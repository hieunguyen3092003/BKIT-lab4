
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d48  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031c8  08009ed0  08009ed0  0000aed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d098  0800d098  0000f02c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d098  0800d098  0000e098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0a0  0800d0a0  0000f02c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0a0  0800d0a0  0000e0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d0a4  0800d0a4  0000e0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  0800d0a8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f02c  2**0
                  CONTENTS
 10 .bss          00000218  2000002c  2000002c  0000f02c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000244  20000244  0000f02c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f02c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135b4  00000000  00000000  0000f05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033b2  00000000  00000000  00022610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  000259c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f38  00000000  00000000  00026d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023800  00000000  00000000  00027cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bdf  00000000  00000000  0004b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d160a  00000000  00000000  0006408f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135699  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005600  00000000  00000000  001356dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0013acdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009eb8 	.word	0x08009eb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08009eb8 	.word	0x08009eb8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96a 	b.w	8000e90 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	460c      	mov	r4, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14e      	bne.n	8000c7e <__udivmoddi4+0xaa>
 8000be0:	4694      	mov	ip, r2
 8000be2:	458c      	cmp	ip, r1
 8000be4:	4686      	mov	lr, r0
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	d962      	bls.n	8000cb2 <__udivmoddi4+0xde>
 8000bec:	b14a      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	4091      	lsls	r1, r2
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	4319      	orrs	r1, r3
 8000bfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f f68c 	uxth.w	r6, ip
 8000c0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c12:	fb07 1114 	mls	r1, r7, r4, r1
 8000c16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1a:	fb04 f106 	mul.w	r1, r4, r6
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x64>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2a:	f080 8112 	bcs.w	8000e52 <__udivmoddi4+0x27e>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 810f 	bls.w	8000e52 <__udivmoddi4+0x27e>
 8000c34:	3c02      	subs	r4, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a59      	subs	r1, r3, r1
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c42:	fb07 1110 	mls	r1, r7, r0, r1
 8000c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4a:	fb00 f606 	mul.w	r6, r0, r6
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x94>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5a:	f080 80fc 	bcs.w	8000e56 <__udivmoddi4+0x282>
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	f240 80f9 	bls.w	8000e56 <__udivmoddi4+0x282>
 8000c64:	4463      	add	r3, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	1b9b      	subs	r3, r3, r6
 8000c6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa6>
 8000c72:	40d3      	lsrs	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xba>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb4>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x150>
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xcc>
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	f0c0 80f0 	bcc.w	8000e80 <__udivmoddi4+0x2ac>
 8000ca0:	1a86      	subs	r6, r0, r2
 8000ca2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d0e6      	beq.n	8000c7a <__udivmoddi4+0xa6>
 8000cac:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb0:	e7e3      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000cb2:	2a00      	cmp	r2, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x204>
 8000cb8:	eba1 040c 	sub.w	r4, r1, ip
 8000cbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc0:	fa1f f78c 	uxth.w	r7, ip
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cce:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb07 f006 	mul.w	r0, r7, r6
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x11c>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x11a>
 8000ce8:	4298      	cmp	r0, r3
 8000cea:	f200 80cd 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cee:	4626      	mov	r6, r4
 8000cf0:	1a1c      	subs	r4, r3, r0
 8000cf2:	fa1f f38e 	uxth.w	r3, lr
 8000cf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d02:	fb00 f707 	mul.w	r7, r0, r7
 8000d06:	429f      	cmp	r7, r3
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x148>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x146>
 8000d14:	429f      	cmp	r7, r3
 8000d16:	f200 80b0 	bhi.w	8000e7a <__udivmoddi4+0x2a6>
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	1bdb      	subs	r3, r3, r7
 8000d1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x9c>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d34:	fa04 f301 	lsl.w	r3, r4, r1
 8000d38:	ea43 030c 	orr.w	r3, r3, ip
 8000d3c:	40f4      	lsrs	r4, r6
 8000d3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d42:	0c38      	lsrs	r0, r7, #16
 8000d44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d48:	fbb4 fef0 	udiv	lr, r4, r0
 8000d4c:	fa1f fc87 	uxth.w	ip, r7
 8000d50:	fb00 441e 	mls	r4, r0, lr, r4
 8000d54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d58:	fb0e f90c 	mul.w	r9, lr, ip
 8000d5c:	45a1      	cmp	r9, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x1a6>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6a:	f080 8084 	bcs.w	8000e76 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8081 	bls.w	8000e76 <__udivmoddi4+0x2a2>
 8000d74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	eba4 0409 	sub.w	r4, r4, r9
 8000d7e:	fa1f f983 	uxth.w	r9, r3
 8000d82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d86:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d92:	45a4      	cmp	ip, r4
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x1d2>
 8000d96:	193c      	adds	r4, r7, r4
 8000d98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d9c:	d267      	bcs.n	8000e6e <__udivmoddi4+0x29a>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d965      	bls.n	8000e6e <__udivmoddi4+0x29a>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000daa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dae:	eba4 040c 	sub.w	r4, r4, ip
 8000db2:	429c      	cmp	r4, r3
 8000db4:	46ce      	mov	lr, r9
 8000db6:	469c      	mov	ip, r3
 8000db8:	d351      	bcc.n	8000e5e <__udivmoddi4+0x28a>
 8000dba:	d04e      	beq.n	8000e5a <__udivmoddi4+0x286>
 8000dbc:	b155      	cbz	r5, 8000dd4 <__udivmoddi4+0x200>
 8000dbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	40cb      	lsrs	r3, r1
 8000dcc:	431e      	orrs	r6, r3
 8000dce:	40cc      	lsrs	r4, r1
 8000dd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e750      	b.n	8000c7a <__udivmoddi4+0xa6>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f103 	lsr.w	r1, r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa24 f303 	lsr.w	r3, r4, r3
 8000de8:	4094      	lsls	r4, r2
 8000dea:	430c      	orrs	r4, r1
 8000dec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df4:	fa1f f78c 	uxth.w	r7, ip
 8000df8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e06:	fb00 f107 	mul.w	r1, r0, r7
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e16:	d22c      	bcs.n	8000e72 <__udivmoddi4+0x29e>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d92a      	bls.n	8000e72 <__udivmoddi4+0x29e>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e28:	fb08 3311 	mls	r3, r8, r1, r3
 8000e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e30:	fb01 f307 	mul.w	r3, r1, r7
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e40:	d213      	bcs.n	8000e6a <__udivmoddi4+0x296>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d911      	bls.n	8000e6a <__udivmoddi4+0x296>
 8000e46:	3902      	subs	r1, #2
 8000e48:	4464      	add	r4, ip
 8000e4a:	1ae4      	subs	r4, r4, r3
 8000e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e50:	e739      	b.n	8000cc6 <__udivmoddi4+0xf2>
 8000e52:	4604      	mov	r4, r0
 8000e54:	e6f0      	b.n	8000c38 <__udivmoddi4+0x64>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e706      	b.n	8000c68 <__udivmoddi4+0x94>
 8000e5a:	45c8      	cmp	r8, r9
 8000e5c:	d2ae      	bcs.n	8000dbc <__udivmoddi4+0x1e8>
 8000e5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e66:	3801      	subs	r0, #1
 8000e68:	e7a8      	b.n	8000dbc <__udivmoddi4+0x1e8>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	e7ed      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e799      	b.n	8000da6 <__udivmoddi4+0x1d2>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e7d4      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e76:	46d6      	mov	lr, sl
 8000e78:	e77f      	b.n	8000d7a <__udivmoddi4+0x1a6>
 8000e7a:	4463      	add	r3, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e74d      	b.n	8000d1c <__udivmoddi4+0x148>
 8000e80:	4606      	mov	r6, r0
 8000e82:	4623      	mov	r3, r4
 8000e84:	4608      	mov	r0, r1
 8000e86:	e70f      	b.n	8000ca8 <__udivmoddi4+0xd4>
 8000e88:	3e02      	subs	r6, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	e730      	b.n	8000cf0 <__udivmoddi4+0x11c>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <initButton>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void initButton() {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <initButton+0x14>)
 8000e9e:	f004 fde5 	bl	8005a6c <HAL_GPIO_WritePin>
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40020c00 	.word	0x40020c00

08000eac <buttonScan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void buttonScan() {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	482f      	ldr	r0, [pc, #188]	@ (8000f74 <buttonScan+0xc8>)
 8000eb8:	f004 fdd8 	bl	8005a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	482c      	ldr	r0, [pc, #176]	@ (8000f74 <buttonScan+0xc8>)
 8000ec2:	f004 fdd3 	bl	8005a6c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	2202      	movs	r2, #2
 8000eca:	492b      	ldr	r1, [pc, #172]	@ (8000f78 <buttonScan+0xcc>)
 8000ecc:	482b      	ldr	r0, [pc, #172]	@ (8000f7c <buttonScan+0xd0>)
 8000ece:	f006 fda3 	bl	8007a18 <HAL_SPI_Receive>

	int button_index = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 8000ed6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eda:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	e03f      	b.n	8000f62 <buttonScan+0xb6>
		if (i >= 0 && i <= 3) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db06      	blt.n	8000ef6 <buttonScan+0x4a>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	dc03      	bgt.n	8000ef6 <buttonScan+0x4a>
			button_index = i + 4;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	e018      	b.n	8000f28 <buttonScan+0x7c>
		} else if (i >= 4 && i <= 7) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	dd07      	ble.n	8000f0c <buttonScan+0x60>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b07      	cmp	r3, #7
 8000f00:	dc04      	bgt.n	8000f0c <buttonScan+0x60>
			button_index = 7 - i;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f1c3 0307 	rsb	r3, r3, #7
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	e00d      	b.n	8000f28 <buttonScan+0x7c>
		} else if (i >= 8 && i <= 11) {
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b07      	cmp	r3, #7
 8000f10:	dd06      	ble.n	8000f20 <buttonScan+0x74>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0b      	cmp	r3, #11
 8000f16:	dc03      	bgt.n	8000f20 <buttonScan+0x74>
			button_index = i + 4;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	e003      	b.n	8000f28 <buttonScan+0x7c>
		} else {
			button_index = 23 - i;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f1c3 0317 	rsb	r3, r3, #23
 8000f26:	60fb      	str	r3, [r7, #12]
		}
		if (button_spi_buffer & mask)
 8000f28:	4b13      	ldr	r3, [pc, #76]	@ (8000f78 <buttonScan+0xcc>)
 8000f2a:	881a      	ldrh	r2, [r3, #0]
 8000f2c:	897b      	ldrh	r3, [r7, #10]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <buttonScan+0x96>
			button_count[button_index] = 0;
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <buttonScan+0xd4>)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f40:	e009      	b.n	8000f56 <buttonScan+0xaa>
		else
			button_count[button_index]++;
 8000f42:	4a0f      	ldr	r2, [pc, #60]	@ (8000f80 <buttonScan+0xd4>)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b299      	uxth	r1, r3
 8000f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f80 <buttonScan+0xd4>)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000f56:	897b      	ldrh	r3, [r7, #10]
 8000f58:	085b      	lsrs	r3, r3, #1
 8000f5a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	ddbc      	ble.n	8000ee2 <buttonScan+0x36>
	}
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	20000068 	.word	0x20000068
 8000f7c:	20000158 	.word	0x20000158
 8000f80:	20000048 	.word	0x20000048

08000f84 <initds3231>:

/**
 * @brief	init ds3231 real time clock micro controler
 */
void initds3231()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	while (HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK)
 8000f88:	bf00      	nop
 8000f8a:	2332      	movs	r3, #50	@ 0x32
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	21d0      	movs	r1, #208	@ 0xd0
 8000f90:	4808      	ldr	r0, [pc, #32]	@ (8000fb4 <initds3231+0x30>)
 8000f92:	f005 fa0f 	bl	80063b4 <HAL_I2C_IsDeviceReady>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1f6      	bne.n	8000f8a <initds3231+0x6>
		;
	ds3231EnableA1(DS3231_DISABLED);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 f995 	bl	80012cc <ds3231EnableA1>
	ds3231EnableA2(DS3231_DISABLED);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 f9c6 	bl	8001334 <ds3231EnableA2>
	ds3231ClearFlagA1();
 8000fa8:	f000 f9f8 	bl	800139c <ds3231ClearFlagA1>
	ds3231ClearFlagA2();
 8000fac:	f000 fa1c 	bl	80013e8 <ds3231ClearFlagA2>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000d4 	.word	0x200000d4

08000fb8 <ds3231Write>:
 * @brief	write data into specific address on ds3231 micro controller
 * @param	address Register address to write.
 * @param 	value DECIMAL Value to set, 1BYTE (0 to 255).
 */
void ds3231Write(uint8_t address, uint8_t value)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af04      	add	r7, sp, #16
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 f9bc 	bl	8005348 <DEC2BCD>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1, 10);
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	230a      	movs	r3, #10
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	f107 030f 	add.w	r3, r7, #15
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	21d0      	movs	r1, #208	@ 0xd0
 8000fea:	4803      	ldr	r0, [pc, #12]	@ (8000ff8 <ds3231Write+0x40>)
 8000fec:	f004 feb6 	bl	8005d5c <HAL_I2C_Mem_Write>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200000d4 	.word	0x200000d4

08000ffc <ds3231ReadTime>:

/**
 * @brief	read 7 (BYTE) register (from reg 0x00 to reg 0x06) from ds3231 and store into array ds3231_buffer[]
 */
void ds3231ReadTime()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8001002:	230a      	movs	r3, #10
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2307      	movs	r3, #7
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	4b31      	ldr	r3, [pc, #196]	@ (80010d0 <ds3231ReadTime+0xd4>)
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	21d0      	movs	r1, #208	@ 0xd0
 8001014:	482f      	ldr	r0, [pc, #188]	@ (80010d4 <ds3231ReadTime+0xd8>)
 8001016:	f004 ff9b 	bl	8005f50 <HAL_I2C_Mem_Read>

	current_time.second = BCD2DEC(ds3231_buffer[0]);
 800101a:	4b2d      	ldr	r3, [pc, #180]	@ (80010d0 <ds3231ReadTime+0xd4>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f004 f978 	bl	8005314 <BCD2DEC>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	4b2b      	ldr	r3, [pc, #172]	@ (80010d8 <ds3231ReadTime+0xdc>)
 800102a:	701a      	strb	r2, [r3, #0]
	current_time.minute = BCD2DEC(ds3231_buffer[1]);
 800102c:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <ds3231ReadTime+0xd4>)
 800102e:	785b      	ldrb	r3, [r3, #1]
 8001030:	4618      	mov	r0, r3
 8001032:	f004 f96f 	bl	8005314 <BCD2DEC>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <ds3231ReadTime+0xdc>)
 800103c:	705a      	strb	r2, [r3, #1]
	current_time.hour = BCD2DEC(ds3231_buffer[2] & 0x3f);
 800103e:	4b24      	ldr	r3, [pc, #144]	@ (80010d0 <ds3231ReadTime+0xd4>)
 8001040:	789b      	ldrb	r3, [r3, #2]
 8001042:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f004 f963 	bl	8005314 <BCD2DEC>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <ds3231ReadTime+0xdc>)
 8001054:	709a      	strb	r2, [r3, #2]
	current_time.day = BCD2DEC(ds3231_buffer[3]);
 8001056:	4b1e      	ldr	r3, [pc, #120]	@ (80010d0 <ds3231ReadTime+0xd4>)
 8001058:	78db      	ldrb	r3, [r3, #3]
 800105a:	4618      	mov	r0, r3
 800105c:	f004 f95a 	bl	8005314 <BCD2DEC>
 8001060:	4603      	mov	r3, r0
 8001062:	461a      	mov	r2, r3
 8001064:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <ds3231ReadTime+0xdc>)
 8001066:	70da      	strb	r2, [r3, #3]
	current_time.date = BCD2DEC(ds3231_buffer[4]);
 8001068:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <ds3231ReadTime+0xd4>)
 800106a:	791b      	ldrb	r3, [r3, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	f004 f951 	bl	8005314 <BCD2DEC>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <ds3231ReadTime+0xdc>)
 8001078:	711a      	strb	r2, [r3, #4]
	current_time.month = BCD2DEC(ds3231_buffer[5] & 0x1f);
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <ds3231ReadTime+0xd4>)
 800107c:	795b      	ldrb	r3, [r3, #5]
 800107e:	f003 031f 	and.w	r3, r3, #31
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f004 f945 	bl	8005314 <BCD2DEC>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <ds3231ReadTime+0xdc>)
 8001090:	715a      	strb	r2, [r3, #5]
	current_time.year = (BCD2DEC(ds3231_buffer[6]) + 2000) + (((ds3231_buffer[5] & 0x80) >> 7) * 100);
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <ds3231ReadTime+0xd4>)
 8001094:	799b      	ldrb	r3, [r3, #6]
 8001096:	4618      	mov	r0, r3
 8001098:	f004 f93c 	bl	8005314 <BCD2DEC>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <ds3231ReadTime+0xd4>)
 80010a2:	795b      	ldrb	r3, [r3, #5]
 80010a4:	09db      	lsrs	r3, r3, #7
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4619      	mov	r1, r3
 80010aa:	0089      	lsls	r1, r1, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	4619      	mov	r1, r3
 80010b0:	0088      	lsls	r0, r1, #2
 80010b2:	4619      	mov	r1, r3
 80010b4:	4603      	mov	r3, r0
 80010b6:	440b      	add	r3, r1
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4413      	add	r3, r2
 80010be:	b29b      	uxth	r3, r3
 80010c0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <ds3231ReadTime+0xdc>)
 80010c8:	80da      	strh	r2, [r3, #6]
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000078 	.word	0x20000078
 80010d4:	200000d4 	.word	0x200000d4
 80010d8:	2000006c 	.word	0x2000006c

080010dc <ds3231SetSec>:
 * @brief	set time functions
 * @param	valid time (DECIMAL) depends on function
 */

void ds3231SetSec(uint8_t second)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	ds3231Write(ADDRESS_SEC, second);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4619      	mov	r1, r3
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff ff64 	bl	8000fb8 <ds3231Write>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <ds3231SetMin>:
void ds3231SetMin(uint8_t minute)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	ds3231Write(ADDRESS_MIN, minute);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4619      	mov	r1, r3
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff ff56 	bl	8000fb8 <ds3231Write>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <ds3231SetHour>:
void ds3231SetHour(uint8_t hour)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af04      	add	r7, sp, #16
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	uint8_t hour_reg = DEC2BCD(hour) & 0x3f; // remove 2 MSB bit avoid write into bit 12/24 mode
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f004 f911 	bl	8005348 <DEC2BCD>
 8001126:	4603      	mov	r3, r0
 8001128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800112c:	b2db      	uxtb	r3, r3
 800112e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, ADDRESS_HOUR, I2C_MEMADD_SIZE_8BIT, &hour_reg, 1, 10);
 8001130:	230a      	movs	r3, #10
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	f107 030f 	add.w	r3, r7, #15
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	2202      	movs	r2, #2
 8001142:	21d0      	movs	r1, #208	@ 0xd0
 8001144:	4803      	ldr	r0, [pc, #12]	@ (8001154 <ds3231SetHour+0x40>)
 8001146:	f004 fe09 	bl	8005d5c <HAL_I2C_Mem_Write>
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000d4 	.word	0x200000d4

08001158 <ds3231SetDay>:
void ds3231SetDay(uint8_t day)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	ds3231Write(ADDRESS_DAY, day);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4619      	mov	r1, r3
 8001166:	2003      	movs	r0, #3
 8001168:	f7ff ff26 	bl	8000fb8 <ds3231Write>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <ds3231SetDate>:
void ds3231SetDate(uint8_t date)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	ds3231Write(ADDRESS_DATE, date);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4619      	mov	r1, r3
 8001182:	2004      	movs	r0, #4
 8001184:	f7ff ff18 	bl	8000fb8 <ds3231Write>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <ds3231SetMonth>:
void ds3231SetMonth(uint8_t month)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af04      	add	r7, sp, #16
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	uint8_t century;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, ADDRESS_MONTH, I2C_MEMADD_SIZE_8BIT, &century, 1, 10);
 800119a:	230a      	movs	r3, #10
 800119c:	9302      	str	r3, [sp, #8]
 800119e:	2301      	movs	r3, #1
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	f107 030f 	add.w	r3, r7, #15
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	2205      	movs	r2, #5
 80011ac:	21d0      	movs	r1, #208	@ 0xd0
 80011ae:	4814      	ldr	r0, [pc, #80]	@ (8001200 <ds3231SetMonth+0x70>)
 80011b0:	f004 fece 	bl	8005f50 <HAL_I2C_Mem_Read>
	century &= 0x80;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	73fb      	strb	r3, [r7, #15]
	uint8_t month_reg = (DEC2BCD(month) & 0x1f) | century; /* not interfere with century bit */
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 f8c1 	bl	8005348 <DEC2BCD>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	f003 031f 	and.w	r3, r3, #31
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, ADDRESS_MONTH, I2C_MEMADD_SIZE_8BIT, &month_reg, 1, 10);
 80011dc:	230a      	movs	r3, #10
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	2301      	movs	r3, #1
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	f107 030e 	add.w	r3, r7, #14
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	2205      	movs	r2, #5
 80011ee:	21d0      	movs	r1, #208	@ 0xd0
 80011f0:	4803      	ldr	r0, [pc, #12]	@ (8001200 <ds3231SetMonth+0x70>)
 80011f2:	f004 fdb3 	bl	8005d5c <HAL_I2C_Mem_Write>
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000d4 	.word	0x200000d4

08001204 <ds3231SetYear>:
void ds3231SetYear(uint16_t year)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af04      	add	r7, sp, #16
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
	uint8_t year_reg = DEC2BCD(year % 100);
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	4a2b      	ldr	r2, [pc, #172]	@ (80012c0 <ds3231SetYear+0xbc>)
 8001212:	fba2 1203 	umull	r1, r2, r2, r3
 8001216:	0952      	lsrs	r2, r2, #5
 8001218:	2164      	movs	r1, #100	@ 0x64
 800121a:	fb01 f202 	mul.w	r2, r1, r2
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	b29b      	uxth	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f004 f88f 	bl	8005348 <DEC2BCD>
 800122a:	4603      	mov	r3, r0
 800122c:	73bb      	strb	r3, [r7, #14]
	uint8_t century = (year / 100) % 20;
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	4a23      	ldr	r2, [pc, #140]	@ (80012c0 <ds3231SetYear+0xbc>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	b29a      	uxth	r2, r3
 800123a:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <ds3231SetYear+0xc0>)
 800123c:	fba3 1302 	umull	r1, r3, r3, r2
 8001240:	0919      	lsrs	r1, r3, #4
 8001242:	460b      	mov	r3, r1
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	b29b      	uxth	r3, r3
 800124e:	73fb      	strb	r3, [r7, #15]
	uint8_t month_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, ADDRESS_MONTH, I2C_MEMADD_SIZE_8BIT, &month_reg, 1, 10);
 8001250:	230a      	movs	r3, #10
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	2301      	movs	r3, #1
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f107 030d 	add.w	r3, r7, #13
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	2205      	movs	r2, #5
 8001262:	21d0      	movs	r1, #208	@ 0xd0
 8001264:	4818      	ldr	r0, [pc, #96]	@ (80012c8 <ds3231SetYear+0xc4>)
 8001266:	f004 fe73 	bl	8005f50 <HAL_I2C_Mem_Read>
	month_reg = ((month_reg & 0x1f) | (century << 7));
 800126a:	7b7b      	ldrb	r3, [r7, #13]
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	b25a      	sxtb	r2, r3
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	01db      	lsls	r3, r3, #7
 8001278:	b25b      	sxtb	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b25b      	sxtb	r3, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, ADDRESS_MONTH, I2C_MEMADD_SIZE_8BIT, &month_reg, 1, 10);
 8001282:	230a      	movs	r3, #10
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	f107 030d 	add.w	r3, r7, #13
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	2205      	movs	r2, #5
 8001294:	21d0      	movs	r1, #208	@ 0xd0
 8001296:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <ds3231SetYear+0xc4>)
 8001298:	f004 fd60 	bl	8005d5c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, ADDRESS_YEAR, I2C_MEMADD_SIZE_8BIT, &year_reg, 1, 10);
 800129c:	230a      	movs	r3, #10
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030e 	add.w	r3, r7, #14
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	2206      	movs	r2, #6
 80012ae:	21d0      	movs	r1, #208	@ 0xd0
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <ds3231SetYear+0xc4>)
 80012b2:	f004 fd53 	bl	8005d5c <HAL_I2C_Mem_Write>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	51eb851f 	.word	0x51eb851f
 80012c4:	cccccccd 	.word	0xcccccccd
 80012c8:	200000d4 	.word	0x200000d4

080012cc <ds3231EnableA1>:
/**
 * @brief Enables alarm 1 or 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void ds3231EnableA1(DS3231_State enable)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, DS3231_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &control_reg, 1, 10);
 80012d6:	230a      	movs	r3, #10
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	2301      	movs	r3, #1
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f107 030f 	add.w	r3, r7, #15
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	220e      	movs	r2, #14
 80012e8:	21d0      	movs	r1, #208	@ 0xd0
 80012ea:	4811      	ldr	r0, [pc, #68]	@ (8001330 <ds3231EnableA1+0x64>)
 80012ec:	f004 fe30 	bl	8005f50 <HAL_I2C_Mem_Read>
	control_reg = ((control_reg & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	b25b      	sxtb	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b25b      	sxtb	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, DS3231_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &control_reg, 1, 10);
 800130c:	230a      	movs	r3, #10
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2301      	movs	r3, #1
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	f107 030f 	add.w	r3, r7, #15
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	220e      	movs	r2, #14
 800131e:	21d0      	movs	r1, #208	@ 0xd0
 8001320:	4803      	ldr	r0, [pc, #12]	@ (8001330 <ds3231EnableA1+0x64>)
 8001322:	f004 fd1b 	bl	8005d5c <HAL_I2C_Mem_Write>
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200000d4 	.word	0x200000d4

08001334 <ds3231EnableA2>:
void ds3231EnableA2(DS3231_State enable)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af04      	add	r7, sp, #16
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, DS3231_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &control_reg, 1, 10);
 800133e:	230a      	movs	r3, #10
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 030f 	add.w	r3, r7, #15
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	220e      	movs	r2, #14
 8001350:	21d0      	movs	r1, #208	@ 0xd0
 8001352:	4811      	ldr	r0, [pc, #68]	@ (8001398 <ds3231EnableA2+0x64>)
 8001354:	f004 fdfc 	bl	8005f50 <HAL_I2C_Mem_Read>
	control_reg = ((control_reg & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	f023 0302 	bic.w	r3, r3, #2
 8001360:	b25a      	sxtb	r2, r3
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	b25b      	sxtb	r3, r3
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	b25b      	sxtb	r3, r3
 800136e:	4313      	orrs	r3, r2
 8001370:	b25b      	sxtb	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, DS3231_REG_CONTROL, I2C_MEMADD_SIZE_8BIT, &control_reg, 1, 10);
 8001376:	230a      	movs	r3, #10
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	2301      	movs	r3, #1
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	f107 030f 	add.w	r3, r7, #15
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	220e      	movs	r2, #14
 8001388:	21d0      	movs	r1, #208	@ 0xd0
 800138a:	4803      	ldr	r0, [pc, #12]	@ (8001398 <ds3231EnableA2+0x64>)
 800138c:	f004 fce6 	bl	8005d5c <HAL_I2C_Mem_Write>
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200000d4 	.word	0x200000d4

0800139c <ds3231ClearFlagA1>:

/*
 * @brief
 */
void ds3231ClearFlagA1()
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af04      	add	r7, sp, #16
	uint8_t status_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, DS3231_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, 10);
 80013a2:	230a      	movs	r3, #10
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	2301      	movs	r3, #1
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2301      	movs	r3, #1
 80013b0:	220f      	movs	r2, #15
 80013b2:	21d0      	movs	r1, #208	@ 0xd0
 80013b4:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <ds3231ClearFlagA1+0x48>)
 80013b6:	f004 fdcb 	bl	8005f50 <HAL_I2C_Mem_Read>
	status_reg = status_reg & 0xfe;
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, DS3231_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, 10);
 80013c4:	230a      	movs	r3, #10
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2301      	movs	r3, #1
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	1dfb      	adds	r3, r7, #7
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	220f      	movs	r2, #15
 80013d4:	21d0      	movs	r1, #208	@ 0xd0
 80013d6:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <ds3231ClearFlagA1+0x48>)
 80013d8:	f004 fcc0 	bl	8005d5c <HAL_I2C_Mem_Write>
	return;
 80013dc:	bf00      	nop
}
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200000d4 	.word	0x200000d4

080013e8 <ds3231ClearFlagA2>:
void ds3231ClearFlagA2()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af04      	add	r7, sp, #16
	uint8_t status_reg;
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, DS3231_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, 10);
 80013ee:	230a      	movs	r3, #10
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	2301      	movs	r3, #1
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2301      	movs	r3, #1
 80013fc:	220f      	movs	r2, #15
 80013fe:	21d0      	movs	r1, #208	@ 0xd0
 8001400:	480b      	ldr	r0, [pc, #44]	@ (8001430 <ds3231ClearFlagA2+0x48>)
 8001402:	f004 fda5 	bl	8005f50 <HAL_I2C_Mem_Read>
	status_reg = status_reg & 0xfd;
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f023 0302 	bic.w	r3, r3, #2
 800140c:	b2db      	uxtb	r3, r3
 800140e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, DS3231_REG_STATUS, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, 10);
 8001410:	230a      	movs	r3, #10
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2301      	movs	r3, #1
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	1dfb      	adds	r3, r7, #7
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	220f      	movs	r2, #15
 8001420:	21d0      	movs	r1, #208	@ 0xd0
 8001422:	4803      	ldr	r0, [pc, #12]	@ (8001430 <ds3231ClearFlagA2+0x48>)
 8001424:	f004 fc9a 	bl	8005d5c <HAL_I2C_Mem_Write>
	return;
 8001428:	bf00      	nop
}
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200000d4 	.word	0x200000d4

08001434 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	@ 0x38
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800144e:	463b      	mov	r3, r7
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001460:	4b2f      	ldr	r3, [pc, #188]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001462:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001466:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001468:	4b2d      	ldr	r3, [pc, #180]	@ (8001520 <MX_FSMC_Init+0xec>)
 800146a:	4a2e      	ldr	r2, [pc, #184]	@ (8001524 <MX_FSMC_Init+0xf0>)
 800146c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001474:	4b2a      	ldr	r3, [pc, #168]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800147a:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <MX_FSMC_Init+0xec>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001480:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001482:	2210      	movs	r2, #16
 8001484:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800148c:	4b24      	ldr	r3, [pc, #144]	@ (8001520 <MX_FSMC_Init+0xec>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001492:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001498:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <MX_FSMC_Init+0xec>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800149e:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <MX_FSMC_Init+0xec>)
 80014a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80014a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001520 <MX_FSMC_Init+0xec>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80014ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <MX_FSMC_Init+0xec>)
 80014ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_FSMC_Init+0xec>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80014ba:	4b19      	ldr	r3, [pc, #100]	@ (8001520 <MX_FSMC_Init+0xec>)
 80014bc:	2200      	movs	r2, #0
 80014be:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80014c0:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <MX_FSMC_Init+0xec>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80014c6:	230f      	movs	r3, #15
 80014c8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80014ca:	230f      	movs	r3, #15
 80014cc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80014ce:	233c      	movs	r3, #60	@ 0x3c
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80014d6:	2310      	movs	r3, #16
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80014da:	2311      	movs	r3, #17
 80014dc:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014de:	2300      	movs	r3, #0
 80014e0:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80014e2:	2308      	movs	r3, #8
 80014e4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80014e6:	230f      	movs	r3, #15
 80014e8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80014ea:	2309      	movs	r3, #9
 80014ec:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80014f2:	2310      	movs	r3, #16
 80014f4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80014f6:	2311      	movs	r3, #17
 80014f8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80014fe:	463a      	mov	r2, r7
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4806      	ldr	r0, [pc, #24]	@ (8001520 <MX_FSMC_Init+0xec>)
 8001508:	f006 fe90 	bl	800822c <HAL_SRAM_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001512:	f003 fc57 	bl	8004dc4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001516:	bf00      	nop
 8001518:	3738      	adds	r7, #56	@ 0x38
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000080 	.word	0x20000080
 8001524:	a0000104 	.word	0xa0000104

08001528 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800153c:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <HAL_FSMC_MspInit+0x88>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d131      	bne.n	80015a8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001544:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <HAL_FSMC_MspInit+0x88>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <HAL_FSMC_MspInit+0x8c>)
 8001550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001552:	4a18      	ldr	r2, [pc, #96]	@ (80015b4 <HAL_FSMC_MspInit+0x8c>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6393      	str	r3, [r2, #56]	@ 0x38
 800155a:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <HAL_FSMC_MspInit+0x8c>)
 800155c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001566:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800156a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001578:	230c      	movs	r3, #12
 800157a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4619      	mov	r1, r3
 8001580:	480d      	ldr	r0, [pc, #52]	@ (80015b8 <HAL_FSMC_MspInit+0x90>)
 8001582:	f004 f8d7 	bl	8005734 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001586:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800158a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001598:	230c      	movs	r3, #12
 800159a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4806      	ldr	r0, [pc, #24]	@ (80015bc <HAL_FSMC_MspInit+0x94>)
 80015a2:	f004 f8c7 	bl	8005734 <HAL_GPIO_Init>
 80015a6:	e000      	b.n	80015aa <HAL_FSMC_MspInit+0x82>
    return;
 80015a8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200000d0 	.word	0x200000d0
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40020c00 	.word	0x40020c00

080015c0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80015c8:	f7ff ffae 	bl	8001528 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08c      	sub	sp, #48	@ 0x30
 80015d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	4b6f      	ldr	r3, [pc, #444]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a6e      	ldr	r2, [pc, #440]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 80015f4:	f043 0310 	orr.w	r3, r3, #16
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b6c      	ldr	r3, [pc, #432]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0310 	and.w	r3, r3, #16
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	4b68      	ldr	r3, [pc, #416]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a67      	ldr	r2, [pc, #412]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b65      	ldr	r3, [pc, #404]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b61      	ldr	r3, [pc, #388]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a60      	ldr	r2, [pc, #384]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 800162c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b5e      	ldr	r3, [pc, #376]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b5a      	ldr	r3, [pc, #360]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a59      	ldr	r2, [pc, #356]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b57      	ldr	r3, [pc, #348]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	4b53      	ldr	r3, [pc, #332]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a52      	ldr	r2, [pc, #328]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b50      	ldr	r3, [pc, #320]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b4c      	ldr	r3, [pc, #304]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a4b      	ldr	r2, [pc, #300]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 8001680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b49      	ldr	r3, [pc, #292]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4b45      	ldr	r3, [pc, #276]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	4a44      	ldr	r2, [pc, #272]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a2:	4b42      	ldr	r3, [pc, #264]	@ (80017ac <MX_GPIO_Init+0x1d8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_DEBUG_Pin|LED_Y0_Pin|LED_Y1_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2170      	movs	r1, #112	@ 0x70
 80016b2:	483f      	ldr	r0, [pc, #252]	@ (80017b0 <MX_GPIO_Init+0x1dc>)
 80016b4:	f004 f9da 	bl	8005a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016be:	483d      	ldr	r0, [pc, #244]	@ (80017b4 <MX_GPIO_Init+0x1e0>)
 80016c0:	f004 f9d4 	bl	8005a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2140      	movs	r1, #64	@ 0x40
 80016c8:	483b      	ldr	r0, [pc, #236]	@ (80017b8 <MX_GPIO_Init+0x1e4>)
 80016ca:	f004 f9cf 	bl	8005a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016d4:	4839      	ldr	r0, [pc, #228]	@ (80017bc <MX_GPIO_Init+0x1e8>)
 80016d6:	f004 f9c9 	bl	8005a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2108      	movs	r1, #8
 80016de:	4838      	ldr	r0, [pc, #224]	@ (80017c0 <MX_GPIO_Init+0x1ec>)
 80016e0:	f004 f9c4 	bl	8005a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|LED_Y0_Pin|LED_Y1_Pin;
 80016e4:	2370      	movs	r3, #112	@ 0x70
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	482d      	ldr	r0, [pc, #180]	@ (80017b0 <MX_GPIO_Init+0x1dc>)
 80016fc:	f004 f81a 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001700:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4826      	ldr	r0, [pc, #152]	@ (80017b4 <MX_GPIO_Init+0x1e0>)
 800171a:	f004 f80b 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800171e:	23c0      	movs	r3, #192	@ 0xc0
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	4822      	ldr	r0, [pc, #136]	@ (80017bc <MX_GPIO_Init+0x1e8>)
 8001732:	f003 ffff 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001736:	2330      	movs	r3, #48	@ 0x30
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	481a      	ldr	r0, [pc, #104]	@ (80017b4 <MX_GPIO_Init+0x1e0>)
 800174a:	f003 fff3 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800174e:	2340      	movs	r3, #64	@ 0x40
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 031c 	add.w	r3, r7, #28
 8001762:	4619      	mov	r1, r3
 8001764:	4814      	ldr	r0, [pc, #80]	@ (80017b8 <MX_GPIO_Init+0x1e4>)
 8001766:	f003 ffe5 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800176a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800176e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	480e      	ldr	r0, [pc, #56]	@ (80017bc <MX_GPIO_Init+0x1e8>)
 8001784:	f003 ffd6 	bl	8005734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001788:	2308      	movs	r3, #8
 800178a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	4808      	ldr	r0, [pc, #32]	@ (80017c0 <MX_GPIO_Init+0x1ec>)
 80017a0:	f003 ffc8 	bl	8005734 <HAL_GPIO_Init>

}
 80017a4:	bf00      	nop
 80017a6:	3730      	adds	r7, #48	@ 0x30
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40020800 	.word	0x40020800
 80017b8:	40021800 	.word	0x40021800
 80017bc:	40020000 	.word	0x40020000
 80017c0:	40020c00 	.word	0x40020c00

080017c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017ca:	4a13      	ldr	r2, [pc, #76]	@ (8001818 <MX_I2C1_Init+0x54>)
 80017cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017d0:	4a12      	ldr	r2, [pc, #72]	@ (800181c <MX_I2C1_Init+0x58>)
 80017d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <MX_I2C1_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	@ (8001814 <MX_I2C1_Init+0x50>)
 8001802:	f004 f967 	bl	8005ad4 <HAL_I2C_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800180c:	f003 fada 	bl	8004dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200000d4 	.word	0x200000d4
 8001818:	40005400 	.word	0x40005400
 800181c:	000186a0 	.word	0x000186a0

08001820 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a19      	ldr	r2, [pc, #100]	@ (80018a4 <HAL_I2C_MspInit+0x84>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d12b      	bne.n	800189a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b18      	ldr	r3, [pc, #96]	@ (80018a8 <HAL_I2C_MspInit+0x88>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a17      	ldr	r2, [pc, #92]	@ (80018a8 <HAL_I2C_MspInit+0x88>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_I2C_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800185e:	23c0      	movs	r3, #192	@ 0xc0
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001862:	2312      	movs	r3, #18
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800186e:	2304      	movs	r3, #4
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <HAL_I2C_MspInit+0x8c>)
 800187a:	f003 ff5b 	bl	8005734 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <HAL_I2C_MspInit+0x88>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	4a08      	ldr	r2, [pc, #32]	@ (80018a8 <HAL_I2C_MspInit+0x88>)
 8001888:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800188c:	6413      	str	r3, [r2, #64]	@ 0x40
 800188e:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_I2C_MspInit+0x88>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	@ 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40005400 	.word	0x40005400
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020400 	.word	0x40020400

080018b0 <LCD_WR_REG>:
static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 80018ba:	4a04      	ldr	r2, [pc, #16]	@ (80018cc <LCD_WR_REG+0x1c>)
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	8013      	strh	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	600ffffe 	.word	0x600ffffe

080018d0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 80018da:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <LCD_WR_DATA+0x1c>)
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	8053      	strh	r3, [r2, #2]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	600ffffe 	.word	0x600ffffe

080018f0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <LCD_RD_DATA+0x20>)
 80018f8:	885b      	ldrh	r3, [r3, #2]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	80fb      	strh	r3, [r7, #6]
	return ram;
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	b29b      	uxth	r3, r3
}
 8001902:	4618      	mov	r0, r3
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	600ffffe 	.word	0x600ffffe

08001914 <lcdSetAddress>:


void lcdSetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4604      	mov	r4, r0
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4623      	mov	r3, r4
 8001924:	80fb      	strh	r3, [r7, #6]
 8001926:	4603      	mov	r3, r0
 8001928:	80bb      	strh	r3, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	807b      	strh	r3, [r7, #2]
 800192e:	4613      	mov	r3, r2
 8001930:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8001932:	202a      	movs	r0, #42	@ 0x2a
 8001934:	f7ff ffbc 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	0a1b      	lsrs	r3, r3, #8
 800193c:	b29b      	uxth	r3, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ffc6 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	b29b      	uxth	r3, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ffc0 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	b29b      	uxth	r3, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ffba 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	b29b      	uxth	r3, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ffb4 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8001968:	202b      	movs	r0, #43	@ 0x2b
 800196a:	f7ff ffa1 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 800196e:	88bb      	ldrh	r3, [r7, #4]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	b29b      	uxth	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ffab 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 800197a:	88bb      	ldrh	r3, [r7, #4]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	b29b      	uxth	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ffa5 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 8001986:	883b      	ldrh	r3, [r7, #0]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	b29b      	uxth	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff9f 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8001992:	883b      	ldrh	r3, [r7, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	b29b      	uxth	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff99 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 800199e:	202c      	movs	r0, #44	@ 0x2c
 80019a0:	f7ff ff86 	bl	80018b0 <LCD_WR_REG>
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd90      	pop	{r4, r7, pc}

080019ac <lcdClear>:
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcdClear(uint16_t color)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcdSetAddress(0, 0, lcddev.width - 1, lcddev.height - 1);
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <lcdClear+0x60>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <lcdClear+0x60>)
 80019c0:	885b      	ldrh	r3, [r3, #2]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	2100      	movs	r1, #0
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff ffa3 	bl	8001914 <lcdSetAddress>
	for (i = 0; i < lcddev.width; i++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	81fb      	strh	r3, [r7, #14]
 80019d2:	e011      	b.n	80019f8 <lcdClear+0x4c>
	{
		for (j = 0; j < lcddev.height; j++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	81bb      	strh	r3, [r7, #12]
 80019d8:	e006      	b.n	80019e8 <lcdClear+0x3c>
		{
			LCD_WR_DATA(color);
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff77 	bl	80018d0 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++)
 80019e2:	89bb      	ldrh	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	81bb      	strh	r3, [r7, #12]
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <lcdClear+0x60>)
 80019ea:	885b      	ldrh	r3, [r3, #2]
 80019ec:	89ba      	ldrh	r2, [r7, #12]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d3f3      	bcc.n	80019da <lcdClear+0x2e>
	for (i = 0; i < lcddev.width; i++)
 80019f2:	89fb      	ldrh	r3, [r7, #14]
 80019f4:	3301      	adds	r3, #1
 80019f6:	81fb      	strh	r3, [r7, #14]
 80019f8:	4b04      	ldr	r3, [pc, #16]	@ (8001a0c <lcdClear+0x60>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	89fa      	ldrh	r2, [r7, #14]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3e8      	bcc.n	80019d4 <lcdClear+0x28>
		}
	}
}
 8001a02:	bf00      	nop
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000128 	.word	0x20000128

08001a10 <lcdDrawPoint>:
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcdDrawPoint(uint16_t x, uint16_t y, uint16_t color)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	80bb      	strh	r3, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	807b      	strh	r3, [r7, #2]
	lcdSetAddress(x, y, x, y);
 8001a22:	88bb      	ldrh	r3, [r7, #4]
 8001a24:	88fa      	ldrh	r2, [r7, #6]
 8001a26:	88b9      	ldrh	r1, [r7, #4]
 8001a28:	88f8      	ldrh	r0, [r7, #6]
 8001a2a:	f7ff ff73 	bl	8001914 <lcdSetAddress>
	LCD_WR_DATA(color);
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff4d 	bl	80018d0 <LCD_WR_DATA>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <lcdDrawLine>:
 * @param  y2 Y coordinate of end point
 * @param  color Color to fill
 * @retval None
 */
void lcdDrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001a3e:	b590      	push	{r4, r7, lr}
 8001a40:	b08d      	sub	sp, #52	@ 0x34
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4604      	mov	r4, r0
 8001a46:	4608      	mov	r0, r1
 8001a48:	4611      	mov	r1, r2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	80fb      	strh	r3, [r7, #6]
 8001a50:	4603      	mov	r3, r0
 8001a52:	80bb      	strh	r3, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1;
 8001a64:	887a      	ldrh	r2, [r7, #2]
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8001a6c:	883a      	ldrh	r2, [r7, #0]
 8001a6e:	88bb      	ldrh	r3, [r7, #4]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8001a78:	88bb      	ldrh	r3, [r7, #4]
 8001a7a:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	dd02      	ble.n	8001a88 <lcdDrawLine+0x4a>
		incx = 1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e00b      	b.n	8001aa0 <lcdDrawLine+0x62>
	else if (delta_x == 0)
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <lcdDrawLine+0x56>
		incx = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e005      	b.n	8001aa0 <lcdDrawLine+0x62>
	else
	{
		incx = -1;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	425b      	negs	r3, r3
 8001a9e:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dd02      	ble.n	8001aac <lcdDrawLine+0x6e>
		incy = 1;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	e00b      	b.n	8001ac4 <lcdDrawLine+0x86>
	else if (delta_y == 0)
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <lcdDrawLine+0x7a>
		incy = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	e005      	b.n	8001ac4 <lcdDrawLine+0x86>
	else
	{
		incy = -1;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	425b      	negs	r3, r3
 8001ac2:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8001ac4:	6a3a      	ldr	r2, [r7, #32]
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dd02      	ble.n	8001ad2 <lcdDrawLine+0x94>
		distance = delta_x;
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	61bb      	str	r3, [r7, #24]
 8001ad0:	e001      	b.n	8001ad6 <lcdDrawLine+0x98>
	else
		distance = delta_y;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	61bb      	str	r3, [r7, #24]
	for (t = 0; t < distance + 1; t++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001ada:	e02b      	b.n	8001b34 <lcdDrawLine+0xf6>
	{
		lcdDrawPoint(uRow, uCol, color);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	b291      	uxth	r1, r2
 8001ae4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff91 	bl	8001a10 <lcdDrawPoint>
		xerr += delta_x;
 8001aee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	4413      	add	r3, r2
 8001af4:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr += delta_y;
 8001af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	4413      	add	r3, r2
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (xerr > distance)
 8001afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dd07      	ble.n	8001b16 <lcdDrawLine+0xd8>
		{
			xerr -= distance;
 8001b06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow += incx;
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance)
 8001b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	dd07      	ble.n	8001b2e <lcdDrawLine+0xf0>
		{
			yerr -= distance;
 8001b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol += incy;
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	60bb      	str	r3, [r7, #8]
	for (t = 0; t < distance + 1; t++)
 8001b2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001b30:	3301      	adds	r3, #1
 8001b32:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001b34:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	dacf      	bge.n	8001adc <lcdDrawLine+0x9e>
		}
	}
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3734      	adds	r7, #52	@ 0x34
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}
	...

08001b48 <lcdShowChar>:
 * @param sizey height (16, 24, 32) of the character in pixels (sizex is typically half the height)
 * @param mode determine whether the background color is applied
 * (!= 0 only the foreground color pixels, skipping the background)
 */
void lcdShowChar(uint16_t x, uint16_t y, uint8_t character, uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4623      	mov	r3, r4
 8001b58:	80fb      	strh	r3, [r7, #6]
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80bb      	strh	r3, [r7, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	70fb      	strb	r3, [r7, #3]
 8001b62:	4613      	mov	r3, r2
 8001b64:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8001b6e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bf14      	ite	ne
 8001b8a:	2301      	movne	r3, #1
 8001b8c:	2300      	moveq	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	fb12 f303 	smulbb	r3, r2, r3
 8001b9e:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	3b20      	subs	r3, #32
 8001ba4:	70fb      	strb	r3, [r7, #3]
	lcdSetAddress(x, y, x + sizex - 1, y + sizey - 1);
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4413      	add	r3, r2
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29c      	uxth	r4, r3
 8001bb4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	88bb      	ldrh	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	88b9      	ldrh	r1, [r7, #4]
 8001bc6:	88f8      	ldrh	r0, [r7, #6]
 8001bc8:	4622      	mov	r2, r4
 8001bca:	f7ff fea3 	bl	8001914 <lcdSetAddress>
	for (i = 0; i < TypefaceNum; i++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	827b      	strh	r3, [r7, #18]
 8001bd2:	e07a      	b.n	8001cca <lcdShowChar+0x182>
	{
		if (sizey == 12)
 8001bd4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001bd8:	2b0c      	cmp	r3, #12
 8001bda:	d028      	beq.n	8001c2e <lcdShowChar+0xe6>
			;
		else if (sizey == 16)
 8001bdc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d108      	bne.n	8001bf6 <lcdShowChar+0xae>
			temp = ascii_1608[character][i];
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	8a7b      	ldrh	r3, [r7, #18]
 8001be8:	493c      	ldr	r1, [pc, #240]	@ (8001cdc <lcdShowChar+0x194>)
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	440a      	add	r2, r1
 8001bee:	4413      	add	r3, r2
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	75fb      	strb	r3, [r7, #23]
 8001bf4:	e01b      	b.n	8001c2e <lcdShowChar+0xe6>
		else if (sizey == 24)
 8001bf6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001bfa:	2b18      	cmp	r3, #24
 8001bfc:	d10b      	bne.n	8001c16 <lcdShowChar+0xce>
			temp = ascii_2412[character][i];
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	8a79      	ldrh	r1, [r7, #18]
 8001c02:	4837      	ldr	r0, [pc, #220]	@ (8001ce0 <lcdShowChar+0x198>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	4403      	add	r3, r0
 8001c0e:	440b      	add	r3, r1
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	75fb      	strb	r3, [r7, #23]
 8001c14:	e00b      	b.n	8001c2e <lcdShowChar+0xe6>
		else if (sizey == 32)
 8001c16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	d15a      	bne.n	8001cd4 <lcdShowChar+0x18c>
			temp = ascii_3216[character][i];
 8001c1e:	78fa      	ldrb	r2, [r7, #3]
 8001c20:	8a7b      	ldrh	r3, [r7, #18]
 8001c22:	4930      	ldr	r1, [pc, #192]	@ (8001ce4 <lcdShowChar+0x19c>)
 8001c24:	0192      	lsls	r2, r2, #6
 8001c26:	440a      	add	r2, r1
 8001c28:	4413      	add	r3, r2
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	75bb      	strb	r3, [r7, #22]
 8001c32:	e044      	b.n	8001cbe <lcdShowChar+0x176>
		{
			if (!mode) {
 8001c34:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d120      	bne.n	8001c7e <lcdShowChar+0x136>
				if (temp & (0x01 << t))
 8001c3c:	7dfa      	ldrb	r2, [r7, #23]
 8001c3e:	7dbb      	ldrb	r3, [r7, #22]
 8001c40:	fa42 f303 	asr.w	r3, r2, r3
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d004      	beq.n	8001c56 <lcdShowChar+0x10e>
					LCD_WR_DATA(fc);
 8001c4c:	883b      	ldrh	r3, [r7, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fe3e 	bl	80018d0 <LCD_WR_DATA>
 8001c54:	e003      	b.n	8001c5e <lcdShowChar+0x116>
				else
					LCD_WR_DATA(bc);
 8001c56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fe39 	bl	80018d0 <LCD_WR_DATA>
				m++;
 8001c5e:	7d7b      	ldrb	r3, [r7, #21]
 8001c60:	3301      	adds	r3, #1
 8001c62:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0)
 8001c64:	7d7b      	ldrb	r3, [r7, #21]
 8001c66:	7bfa      	ldrb	r2, [r7, #15]
 8001c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c6c:	fb01 f202 	mul.w	r2, r1, r2
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d11f      	bne.n	8001cb8 <lcdShowChar+0x170>
				{
					m = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	757b      	strb	r3, [r7, #21]
					break;
 8001c7c:	e022      	b.n	8001cc4 <lcdShowChar+0x17c>
				}
			}
			else
			{
				if (temp & (0x01 << t))
 8001c7e:	7dfa      	ldrb	r2, [r7, #23]
 8001c80:	7dbb      	ldrb	r3, [r7, #22]
 8001c82:	fa42 f303 	asr.w	r3, r2, r3
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <lcdShowChar+0x152>
					lcdDrawPoint(x, y, fc);
 8001c8e:	883a      	ldrh	r2, [r7, #0]
 8001c90:	88b9      	ldrh	r1, [r7, #4]
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff febb 	bl	8001a10 <lcdDrawPoint>
				x++;
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex)
 8001ca0:	88fa      	ldrh	r2, [r7, #6]
 8001ca2:	8a3b      	ldrh	r3, [r7, #16]
 8001ca4:	1ad2      	subs	r2, r2, r3
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d105      	bne.n	8001cb8 <lcdShowChar+0x170>
				{
					x = x0;
 8001cac:	8a3b      	ldrh	r3, [r7, #16]
 8001cae:	80fb      	strh	r3, [r7, #6]
					y++;
 8001cb0:	88bb      	ldrh	r3, [r7, #4]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	80bb      	strh	r3, [r7, #4]
					break;
 8001cb6:	e005      	b.n	8001cc4 <lcdShowChar+0x17c>
		for (t = 0; t < 8; t++)
 8001cb8:	7dbb      	ldrb	r3, [r7, #22]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	75bb      	strb	r3, [r7, #22]
 8001cbe:	7dbb      	ldrb	r3, [r7, #22]
 8001cc0:	2b07      	cmp	r3, #7
 8001cc2:	d9b7      	bls.n	8001c34 <lcdShowChar+0xec>
	for (i = 0; i < TypefaceNum; i++)
 8001cc4:	8a7b      	ldrh	r3, [r7, #18]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	827b      	strh	r3, [r7, #18]
 8001cca:	8a7a      	ldrh	r2, [r7, #18]
 8001ccc:	89bb      	ldrh	r3, [r7, #12]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d380      	bcc.n	8001bd4 <lcdShowChar+0x8c>
 8001cd2:	e000      	b.n	8001cd6 <lcdShowChar+0x18e>
			return;
 8001cd4:	bf00      	nop
				}
			}
		}
	}
}
 8001cd6:	371c      	adds	r7, #28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd90      	pop	{r4, r7, pc}
 8001cdc:	08009f28 	.word	0x08009f28
 8001ce0:	0800a518 	.word	0x0800a518
 8001ce4:	0800b6e8 	.word	0x0800b6e8

08001ce8 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001cfc:	e004      	b.n	8001d08 <mypow+0x20>
		result *= m;
 8001cfe:	79fa      	ldrb	r2, [r7, #7]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001d08:	79bb      	ldrb	r3, [r7, #6]
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	71ba      	strb	r2, [r7, #6]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f5      	bne.n	8001cfe <mypow+0x16>
	return result;
 8001d12:	68fb      	ldr	r3, [r7, #12]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <lcdShowIntNumCenter>:
		lcdShowChar(x + t * sizex, y, temp + 48, fc, bc, sizey, mode);
	}
}
void lcdShowIntNumCenter(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b08b      	sub	sp, #44	@ 0x2c
 8001d24:	af04      	add	r7, sp, #16
 8001d26:	4604      	mov	r4, r0
 8001d28:	4608      	mov	r0, r1
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	80fb      	strh	r3, [r7, #6]
 8001d32:	4603      	mov	r3, r0
 8001d34:	80bb      	strh	r3, [r7, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	807b      	strh	r3, [r7, #2]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	707b      	strb	r3, [r7, #1]
    uint8_t t, temp;
    uint8_t enshow = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75bb      	strb	r3, [r7, #22]
    uint8_t sizex = sizey / 2;
 8001d42:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	757b      	strb	r3, [r7, #21]
    uint16_t total_width = len * sizex;
 8001d4a:	787b      	ldrb	r3, [r7, #1]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	7d7b      	ldrb	r3, [r7, #21]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	fb12 f303 	smulbb	r3, r2, r3
 8001d56:	827b      	strh	r3, [r7, #18]
    uint16_t start_x = x - (total_width / 2);
 8001d58:	8a7b      	ldrh	r3, [r7, #18]
 8001d5a:	085b      	lsrs	r3, r3, #1
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	88fa      	ldrh	r2, [r7, #6]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	823b      	strh	r3, [r7, #16]
    uint16_t start_y = y - (sizey / 2);
 8001d64:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d68:	085b      	lsrs	r3, r3, #1
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	88bb      	ldrh	r3, [r7, #4]
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	81fb      	strh	r3, [r7, #14]

    for (t = 0; t < len; t++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	75fb      	strb	r3, [r7, #23]
 8001d78:	e05b      	b.n	8001e32 <lcdShowIntNumCenter+0x112>
    {
        temp = (num / mypow(10, len - t - 1)) % 10;
 8001d7a:	887c      	ldrh	r4, [r7, #2]
 8001d7c:	787a      	ldrb	r2, [r7, #1]
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4619      	mov	r1, r3
 8001d8a:	200a      	movs	r0, #10
 8001d8c:	f7ff ffac 	bl	8001ce8 <mypow>
 8001d90:	4603      	mov	r3, r0
 8001d92:	fbb4 f1f3 	udiv	r1, r4, r3
 8001d96:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <lcdShowIntNumCenter+0x124>)
 8001d98:	fba3 2301 	umull	r2, r3, r3, r1
 8001d9c:	08da      	lsrs	r2, r3, #3
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	1aca      	subs	r2, r1, r3
 8001da8:	4613      	mov	r3, r2
 8001daa:	737b      	strb	r3, [r7, #13]
        if (enshow == 0 && t < (len - 1))
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d122      	bne.n	8001df8 <lcdShowIntNumCenter+0xd8>
 8001db2:	7dfa      	ldrb	r2, [r7, #23]
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	429a      	cmp	r2, r3
 8001dba:	da1d      	bge.n	8001df8 <lcdShowIntNumCenter+0xd8>
        {
            if (temp == 0)
 8001dbc:	7b7b      	ldrb	r3, [r7, #13]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d118      	bne.n	8001df4 <lcdShowIntNumCenter+0xd4>
            {
                lcdShowChar(start_x + t * sizex, start_y, '0', fc, bc, sizey, mode); // Display '0' instead of blank space
 8001dc2:	7dfb      	ldrb	r3, [r7, #23]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	7d7b      	ldrb	r3, [r7, #21]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	fb12 f303 	smulbb	r3, r2, r3
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	8a3b      	ldrh	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b298      	uxth	r0, r3
 8001dd6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001dd8:	89f9      	ldrh	r1, [r7, #14]
 8001dda:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001dde:	9302      	str	r3, [sp, #8]
 8001de0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	4613      	mov	r3, r2
 8001dec:	2230      	movs	r2, #48	@ 0x30
 8001dee:	f7ff feab 	bl	8001b48 <lcdShowChar>
                continue;
 8001df2:	e01b      	b.n	8001e2c <lcdShowIntNumCenter+0x10c>
            }
            else
                enshow = 1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	75bb      	strb	r3, [r7, #22]
        }
        lcdShowChar(start_x + t * sizex, start_y, temp + 48, fc, bc, sizey, mode);
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	7d7b      	ldrb	r3, [r7, #21]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	fb12 f303 	smulbb	r3, r2, r3
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	8a3b      	ldrh	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	b298      	uxth	r0, r3
 8001e0c:	7b7b      	ldrb	r3, [r7, #13]
 8001e0e:	3330      	adds	r3, #48	@ 0x30
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8001e14:	89f9      	ldrh	r1, [r7, #14]
 8001e16:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e1a:	9302      	str	r3, [sp, #8]
 8001e1c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	4623      	mov	r3, r4
 8001e28:	f7ff fe8e 	bl	8001b48 <lcdShowChar>
    for (t = 0; t < len; t++)
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	75fb      	strb	r3, [r7, #23]
 8001e32:	7dfa      	ldrb	r2, [r7, #23]
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d39f      	bcc.n	8001d7a <lcdShowIntNumCenter+0x5a>
    }
}
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	cccccccd 	.word	0xcccccccd

08001e48 <lcdSetDirection>:
		}
	}
}

void lcdSetDirection(uint8_t dir)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4)
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <lcdSetDirection+0x2a>
	{
		lcddev.width = 320;
 8001e62:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <lcdSetDirection+0x44>)
 8001e64:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e68:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <lcdSetDirection+0x44>)
 8001e6c:	22f0      	movs	r2, #240	@ 0xf0
 8001e6e:	805a      	strh	r2, [r3, #2]
	else
	{
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8001e70:	e006      	b.n	8001e80 <lcdSetDirection+0x38>
		lcddev.width = 240;
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <lcdSetDirection+0x44>)
 8001e74:	22f0      	movs	r2, #240	@ 0xf0
 8001e76:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001e78:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <lcdSetDirection+0x44>)
 8001e7a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e7e:	805a      	strh	r2, [r3, #2]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	20000128 	.word	0x20000128

08001e90 <initLCD>:

void initLCD(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e9a:	48aa      	ldr	r0, [pc, #680]	@ (8002144 <initLCD+0x2b4>)
 8001e9c:	f003 fde6 	bl	8005a6c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ea0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ea4:	f003 fb10 	bl	80054c8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eae:	48a5      	ldr	r0, [pc, #660]	@ (8002144 <initLCD+0x2b4>)
 8001eb0:	f003 fddc 	bl	8005a6c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001eb4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001eb8:	f003 fb06 	bl	80054c8 <HAL_Delay>
	lcdSetDirection(DFT_SCAN_DIR);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff ffc3 	bl	8001e48 <lcdSetDirection>
	LCD_WR_REG(0XD3);
 8001ec2:	20d3      	movs	r0, #211	@ 0xd3
 8001ec4:	f7ff fcf4 	bl	80018b0 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8001ec8:	f7ff fd12 	bl	80018f0 <LCD_RD_DATA>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b9d      	ldr	r3, [pc, #628]	@ (8002148 <initLCD+0x2b8>)
 8001ed2:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001ed4:	f7ff fd0c 	bl	80018f0 <LCD_RD_DATA>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b9a      	ldr	r3, [pc, #616]	@ (8002148 <initLCD+0x2b8>)
 8001ede:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8001ee0:	f7ff fd06 	bl	80018f0 <LCD_RD_DATA>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b97      	ldr	r3, [pc, #604]	@ (8002148 <initLCD+0x2b8>)
 8001eea:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8001eec:	4b96      	ldr	r3, [pc, #600]	@ (8002148 <initLCD+0x2b8>)
 8001eee:	889b      	ldrh	r3, [r3, #4]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	4b94      	ldr	r3, [pc, #592]	@ (8002148 <initLCD+0x2b8>)
 8001ef6:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8001ef8:	f7ff fcfa 	bl	80018f0 <LCD_RD_DATA>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b91      	ldr	r3, [pc, #580]	@ (8002148 <initLCD+0x2b8>)
 8001f02:	889b      	ldrh	r3, [r3, #4]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	4b8f      	ldr	r3, [pc, #572]	@ (8002148 <initLCD+0x2b8>)
 8001f0a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001f0c:	20cf      	movs	r0, #207	@ 0xcf
 8001f0e:	f7ff fccf 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f7ff fcdc 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001f18:	20c1      	movs	r0, #193	@ 0xc1
 8001f1a:	f7ff fcd9 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001f1e:	2030      	movs	r0, #48	@ 0x30
 8001f20:	f7ff fcd6 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001f24:	20ed      	movs	r0, #237	@ 0xed
 8001f26:	f7ff fcc3 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001f2a:	2064      	movs	r0, #100	@ 0x64
 8001f2c:	f7ff fcd0 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001f30:	2003      	movs	r0, #3
 8001f32:	f7ff fccd 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001f36:	2012      	movs	r0, #18
 8001f38:	f7ff fcca 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001f3c:	2081      	movs	r0, #129	@ 0x81
 8001f3e:	f7ff fcc7 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f42:	20e8      	movs	r0, #232	@ 0xe8
 8001f44:	f7ff fcb4 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001f48:	2085      	movs	r0, #133	@ 0x85
 8001f4a:	f7ff fcc1 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f4e:	2010      	movs	r0, #16
 8001f50:	f7ff fcbe 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001f54:	207a      	movs	r0, #122	@ 0x7a
 8001f56:	f7ff fcbb 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001f5a:	20cb      	movs	r0, #203	@ 0xcb
 8001f5c:	f7ff fca8 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001f60:	2039      	movs	r0, #57	@ 0x39
 8001f62:	f7ff fcb5 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001f66:	202c      	movs	r0, #44	@ 0x2c
 8001f68:	f7ff fcb2 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff fcaf 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001f72:	2034      	movs	r0, #52	@ 0x34
 8001f74:	f7ff fcac 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f7ff fca9 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001f7e:	20f7      	movs	r0, #247	@ 0xf7
 8001f80:	f7ff fc96 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001f84:	2020      	movs	r0, #32
 8001f86:	f7ff fca3 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001f8a:	20ea      	movs	r0, #234	@ 0xea
 8001f8c:	f7ff fc90 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff fc9d 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f7ff fc9a 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001f9c:	20c0      	movs	r0, #192	@ 0xc0
 8001f9e:	f7ff fc87 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001fa2:	201b      	movs	r0, #27
 8001fa4:	f7ff fc94 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001fa8:	20c1      	movs	r0, #193	@ 0xc1
 8001faa:	f7ff fc81 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff fc8e 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001fb4:	20c5      	movs	r0, #197	@ 0xc5
 8001fb6:	f7ff fc7b 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001fba:	2030      	movs	r0, #48	@ 0x30
 8001fbc:	f7ff fc88 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001fc0:	2030      	movs	r0, #48	@ 0x30
 8001fc2:	f7ff fc85 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001fc6:	20c7      	movs	r0, #199	@ 0xc7
 8001fc8:	f7ff fc72 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001fcc:	20b7      	movs	r0, #183	@ 0xb7
 8001fce:	f7ff fc7f 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001fd2:	2036      	movs	r0, #54	@ 0x36
 8001fd4:	f7ff fc6c 	bl	80018b0 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001fd8:	2008      	movs	r0, #8
 8001fda:	f7ff fc79 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001fde:	203a      	movs	r0, #58	@ 0x3a
 8001fe0:	f7ff fc66 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001fe4:	2055      	movs	r0, #85	@ 0x55
 8001fe6:	f7ff fc73 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001fea:	20b1      	movs	r0, #177	@ 0xb1
 8001fec:	f7ff fc60 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff fc6d 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001ff6:	201a      	movs	r0, #26
 8001ff8:	f7ff fc6a 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001ffc:	20b6      	movs	r0, #182	@ 0xb6
 8001ffe:	f7ff fc57 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002002:	200a      	movs	r0, #10
 8002004:	f7ff fc64 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002008:	20a2      	movs	r0, #162	@ 0xa2
 800200a:	f7ff fc61 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800200e:	20f2      	movs	r0, #242	@ 0xf2
 8002010:	f7ff fc4e 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff fc5b 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800201a:	2026      	movs	r0, #38	@ 0x26
 800201c:	f7ff fc48 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002020:	2001      	movs	r0, #1
 8002022:	f7ff fc55 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002026:	20e0      	movs	r0, #224	@ 0xe0
 8002028:	f7ff fc42 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800202c:	200f      	movs	r0, #15
 800202e:	f7ff fc4f 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002032:	202a      	movs	r0, #42	@ 0x2a
 8002034:	f7ff fc4c 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002038:	2028      	movs	r0, #40	@ 0x28
 800203a:	f7ff fc49 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800203e:	2008      	movs	r0, #8
 8002040:	f7ff fc46 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002044:	200e      	movs	r0, #14
 8002046:	f7ff fc43 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800204a:	2008      	movs	r0, #8
 800204c:	f7ff fc40 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002050:	2054      	movs	r0, #84	@ 0x54
 8002052:	f7ff fc3d 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002056:	20a9      	movs	r0, #169	@ 0xa9
 8002058:	f7ff fc3a 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 800205c:	2043      	movs	r0, #67	@ 0x43
 800205e:	f7ff fc37 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002062:	200a      	movs	r0, #10
 8002064:	f7ff fc34 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002068:	200f      	movs	r0, #15
 800206a:	f7ff fc31 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800206e:	2000      	movs	r0, #0
 8002070:	f7ff fc2e 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002074:	2000      	movs	r0, #0
 8002076:	f7ff fc2b 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800207a:	2000      	movs	r0, #0
 800207c:	f7ff fc28 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff fc25 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002086:	20e1      	movs	r0, #225	@ 0xe1
 8002088:	f7ff fc12 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff fc1f 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002092:	2015      	movs	r0, #21
 8002094:	f7ff fc1c 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002098:	2017      	movs	r0, #23
 800209a:	f7ff fc19 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800209e:	2007      	movs	r0, #7
 80020a0:	f7ff fc16 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80020a4:	2011      	movs	r0, #17
 80020a6:	f7ff fc13 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80020aa:	2006      	movs	r0, #6
 80020ac:	f7ff fc10 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80020b0:	202b      	movs	r0, #43	@ 0x2b
 80020b2:	f7ff fc0d 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80020b6:	2056      	movs	r0, #86	@ 0x56
 80020b8:	f7ff fc0a 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80020bc:	203c      	movs	r0, #60	@ 0x3c
 80020be:	f7ff fc07 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80020c2:	2005      	movs	r0, #5
 80020c4:	f7ff fc04 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80020c8:	2010      	movs	r0, #16
 80020ca:	f7ff fc01 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020ce:	200f      	movs	r0, #15
 80020d0:	f7ff fbfe 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80020d4:	203f      	movs	r0, #63	@ 0x3f
 80020d6:	f7ff fbfb 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80020da:	203f      	movs	r0, #63	@ 0x3f
 80020dc:	f7ff fbf8 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020e0:	200f      	movs	r0, #15
 80020e2:	f7ff fbf5 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80020e6:	202b      	movs	r0, #43	@ 0x2b
 80020e8:	f7ff fbe2 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7ff fbef 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7ff fbec 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7ff fbe9 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80020fe:	203f      	movs	r0, #63	@ 0x3f
 8002100:	f7ff fbe6 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002104:	202a      	movs	r0, #42	@ 0x2a
 8002106:	f7ff fbd3 	bl	80018b0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800210a:	2000      	movs	r0, #0
 800210c:	f7ff fbe0 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff fbdd 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002116:	2000      	movs	r0, #0
 8002118:	f7ff fbda 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800211c:	20ef      	movs	r0, #239	@ 0xef
 800211e:	f7ff fbd7 	bl	80018d0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8002122:	2011      	movs	r0, #17
 8002124:	f7ff fbc4 	bl	80018b0 <LCD_WR_REG>
	HAL_Delay(120);
 8002128:	2078      	movs	r0, #120	@ 0x78
 800212a:	f003 f9cd 	bl	80054c8 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 800212e:	2029      	movs	r0, #41	@ 0x29
 8002130:	f7ff fbbe 	bl	80018b0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002134:	2201      	movs	r2, #1
 8002136:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800213a:	4804      	ldr	r0, [pc, #16]	@ (800214c <initLCD+0x2bc>)
 800213c:	f003 fc96 	bl	8005a6c <HAL_GPIO_WritePin>
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40020800 	.word	0x40020800
 8002148:	20000128 	.word	0x20000128
 800214c:	40020000 	.word	0x40020000

08002150 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
	lcdDrawPoint(xc + x, yc + y, c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	b29a      	uxth	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	b29b      	uxth	r3, r3
 8002166:	4413      	add	r3, r2
 8002168:	b298      	uxth	r0, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	b29a      	uxth	r2, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	4413      	add	r3, r2
 8002174:	b29b      	uxth	r3, r3
 8002176:	8b3a      	ldrh	r2, [r7, #24]
 8002178:	4619      	mov	r1, r3
 800217a:	f7ff fc49 	bl	8001a10 <lcdDrawPoint>

	lcdDrawPoint(xc - x, yc + y, c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	b29a      	uxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	b29b      	uxth	r3, r3
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	b298      	uxth	r0, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	b29a      	uxth	r2, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4413      	add	r3, r2
 8002194:	b29b      	uxth	r3, r3
 8002196:	8b3a      	ldrh	r2, [r7, #24]
 8002198:	4619      	mov	r1, r3
 800219a:	f7ff fc39 	bl	8001a10 <lcdDrawPoint>

	lcdDrawPoint(xc + x, yc - y, c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	b298      	uxth	r0, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	8b3a      	ldrh	r2, [r7, #24]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7ff fc29 	bl	8001a10 <lcdDrawPoint>

	lcdDrawPoint(xc - x, yc - y, c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	b298      	uxth	r0, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	8b3a      	ldrh	r2, [r7, #24]
 80021d8:	4619      	mov	r1, r3
 80021da:	f7ff fc19 	bl	8001a10 <lcdDrawPoint>

	lcdDrawPoint(xc + y, yc + x, c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	b298      	uxth	r0, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	8b3a      	ldrh	r2, [r7, #24]
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7ff fc09 	bl	8001a10 <lcdDrawPoint>

	lcdDrawPoint(xc - y, yc + x, c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	b29a      	uxth	r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	b298      	uxth	r0, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	b29a      	uxth	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	b29b      	uxth	r3, r3
 8002212:	4413      	add	r3, r2
 8002214:	b29b      	uxth	r3, r3
 8002216:	8b3a      	ldrh	r2, [r7, #24]
 8002218:	4619      	mov	r1, r3
 800221a:	f7ff fbf9 	bl	8001a10 <lcdDrawPoint>

	lcdDrawPoint(xc + y, yc - x, c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	b29a      	uxth	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b29b      	uxth	r3, r3
 8002226:	4413      	add	r3, r2
 8002228:	b298      	uxth	r0, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	b29b      	uxth	r3, r3
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	b29b      	uxth	r3, r3
 8002236:	8b3a      	ldrh	r2, [r7, #24]
 8002238:	4619      	mov	r1, r3
 800223a:	f7ff fbe9 	bl	8001a10 <lcdDrawPoint>

	lcdDrawPoint(xc - y, yc - x, c);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	b29a      	uxth	r2, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	b298      	uxth	r0, r3
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	b29a      	uxth	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	b29b      	uxth	r3, r3
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	b29b      	uxth	r3, r3
 8002256:	8b3a      	ldrh	r2, [r7, #24]
 8002258:	4619      	mov	r1, r3
 800225a:	f7ff fbd9 	bl	8001a10 <lcdDrawPoint>
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <lcdDrawCircle>:
 * @param c Color to be used for drawing the circle.
 * @param r radius of the circle
 * @param Boolean indicating whether to fill the circle (non-zero value) or just draw the outline (zero value).
 */
void lcdDrawCircle(int xc, int yc, uint16_t c, int r, int fill)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b08a      	sub	sp, #40	@ 0x28
 800226a:	af02      	add	r7, sp, #8
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	4613      	mov	r3, r2
 8002274:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	f1c3 0303 	rsb	r3, r3, #3
 8002286:	613b      	str	r3, [r7, #16]

	if (fill) {
 8002288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228a:	2b00      	cmp	r3, #0
 800228c:	d04f      	beq.n	800232e <lcdDrawCircle+0xc8>
		while (x <= y)
 800228e:	e029      	b.n	80022e4 <lcdDrawCircle+0x7e>
		{
			for (yi = x; yi <= y; yi++)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e00a      	b.n	80022ac <lcdDrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff ff55 	bl	8002150 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	ddf0      	ble.n	8002296 <lcdDrawCircle+0x30>

			if (d < 0)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da06      	bge.n	80022c8 <lcdDrawCircle+0x62>
			{
				d = d + 4 * x + 6;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	009a      	lsls	r2, r3, #2
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4413      	add	r3, r2
 80022c2:	3306      	adds	r3, #6
 80022c4:	613b      	str	r3, [r7, #16]
 80022c6:	e00a      	b.n	80022de <lcdDrawCircle+0x78>
			}
			else
			{
				d = d + 4 * (x - y) + 10;
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	009a      	lsls	r2, r3, #2
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	330a      	adds	r3, #10
 80022d6:	613b      	str	r3, [r7, #16]
				y--;
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	3b01      	subs	r3, #1
 80022dc:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
		while (x <= y)
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	ddd1      	ble.n	8002290 <lcdDrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80022ec:	e023      	b.n	8002336 <lcdDrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f7ff ff29 	bl	8002150 <_draw_circle_8>
			if (d < 0)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	da06      	bge.n	8002312 <lcdDrawCircle+0xac>
				d = d + 4 * x + 6;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	009a      	lsls	r2, r3, #2
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	3306      	adds	r3, #6
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e00a      	b.n	8002328 <lcdDrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	009a      	lsls	r2, r3, #2
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	330a      	adds	r3, #10
 8002320:	613b      	str	r3, [r7, #16]
				y--;
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	3b01      	subs	r3, #1
 8002326:	61bb      	str	r3, [r7, #24]
			x++;
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	3301      	adds	r3, #1
 800232c:	61fb      	str	r3, [r7, #28]
		while (x <= y)
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	429a      	cmp	r2, r3
 8002334:	dddb      	ble.n	80022ee <lcdDrawCircle+0x88>
}
 8002336:	bf00      	nop
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <lcdShowString>:
 * @param mode determine whether the background color is applied
 * (!= 0 only the foreground color pixels, skipping the background)
 */
void lcdShowString(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b08b      	sub	sp, #44	@ 0x2c
 8002344:	af04      	add	r7, sp, #16
 8002346:	60ba      	str	r2, [r7, #8]
 8002348:	461a      	mov	r2, r3
 800234a:	4603      	mov	r3, r0
 800234c:	81fb      	strh	r3, [r7, #14]
 800234e:	460b      	mov	r3, r1
 8002350:	81bb      	strh	r3, [r7, #12]
 8002352:	4613      	mov	r3, r2
 8002354:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8002356:	89fb      	ldrh	r3, [r7, #14]
 8002358:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0; // used to handle characters that are more than one byte long (e.g., Chinese characters)
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]
	while (*str != 0)
 800235e:	e048      	b.n	80023f2 <lcdShowString+0xb2>
	{
		if (!bHz)
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d145      	bne.n	80023f2 <lcdShowString+0xb2>
		{
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8002366:	89fa      	ldrh	r2, [r7, #14]
 8002368:	4b26      	ldr	r3, [pc, #152]	@ (8002404 <lcdShowString+0xc4>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	1acb      	subs	r3, r1, r3
 8002378:	429a      	cmp	r2, r3
 800237a:	dc3f      	bgt.n	80023fc <lcdShowString+0xbc>
 800237c:	89ba      	ldrh	r2, [r7, #12]
 800237e:	4b21      	ldr	r3, [pc, #132]	@ (8002404 <lcdShowString+0xc4>)
 8002380:	885b      	ldrh	r3, [r3, #2]
 8002382:	4619      	mov	r1, r3
 8002384:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002388:	1acb      	subs	r3, r1, r3
 800238a:	429a      	cmp	r2, r3
 800238c:	dc36      	bgt.n	80023fc <lcdShowString+0xbc>
				return;
			if (*str > 0x80)
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b80      	cmp	r3, #128	@ 0x80
 8002394:	d902      	bls.n	800239c <lcdShowString+0x5c>
				bHz = 1;
 8002396:	2301      	movs	r3, #1
 8002398:	75fb      	strb	r3, [r7, #23]
 800239a:	e02a      	b.n	80023f2 <lcdShowString+0xb2>
			else
			{
				if (*str == 0x0D)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b0d      	cmp	r3, #13
 80023a2:	d10b      	bne.n	80023bc <lcdShowString+0x7c>
				{
					y += sizey;
 80023a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	89bb      	ldrh	r3, [r7, #12]
 80023ac:	4413      	add	r3, r2
 80023ae:	81bb      	strh	r3, [r7, #12]
					x = x0;
 80023b0:	8abb      	ldrh	r3, [r7, #20]
 80023b2:	81fb      	strh	r3, [r7, #14]
					str++;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	3301      	adds	r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	e017      	b.n	80023ec <lcdShowString+0xac>
				}
				else
				{
					lcdShowChar(x, y, *str, fc, bc, sizey, mode);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	88fc      	ldrh	r4, [r7, #6]
 80023c2:	89b9      	ldrh	r1, [r7, #12]
 80023c4:	89f8      	ldrh	r0, [r7, #14]
 80023c6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80023ca:	9302      	str	r3, [sp, #8]
 80023cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	4623      	mov	r3, r4
 80023d8:	f7ff fbb6 	bl	8001b48 <lcdShowChar>
					x += sizey / 2;
 80023dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	89fb      	ldrh	r3, [r7, #14]
 80023e8:	4413      	add	r3, r2
 80023ea:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	3301      	adds	r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
	while (*str != 0)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1b2      	bne.n	8002360 <lcdShowString+0x20>
 80023fa:	e000      	b.n	80023fe <lcdShowString+0xbe>
				return;
 80023fc:	bf00      	nop
			}
		}
	}
}
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}
 8002404:	20000128 	.word	0x20000128

08002408 <lcdShowStringCenter>:
 * @param bc Background color behind the text.
 * @param sizey Height of the characters (can be 16, 24, 32).
 * @param mode Determine whether the background color is applied
 * (!= 0 only the foreground color pixels, skipping the background).
 */
void lcdShowStringCenter(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc, uint8_t sizey, uint8_t mode) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	@ 0x30
 800240c:	af04      	add	r7, sp, #16
 800240e:	60ba      	str	r2, [r7, #8]
 8002410:	461a      	mov	r2, r3
 8002412:	4603      	mov	r3, r0
 8002414:	81fb      	strh	r3, [r7, #14]
 8002416:	460b      	mov	r3, r1
 8002418:	81bb      	strh	r3, [r7, #12]
 800241a:	4613      	mov	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
    uint8_t sizex = sizey / 2;
 800241e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002422:	085b      	lsrs	r3, r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
    uint16_t str_len = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	83fb      	strh	r3, [r7, #30]
    char *ptr = str;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	61bb      	str	r3, [r7, #24]

    // Calculate the length of the string
    while (*ptr != '\0')
 800242e:	e010      	b.n	8002452 <lcdShowStringCenter+0x4a>
    {
        if (*ptr > 0x80)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b80      	cmp	r3, #128	@ 0x80
 8002436:	d906      	bls.n	8002446 <lcdShowStringCenter+0x3e>
        {
            // If the character is a multibyte character (e.g., Chinese character)
            str_len += 2;
 8002438:	8bfb      	ldrh	r3, [r7, #30]
 800243a:	3302      	adds	r3, #2
 800243c:	83fb      	strh	r3, [r7, #30]
            ptr++;
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	3301      	adds	r3, #1
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	e002      	b.n	800244c <lcdShowStringCenter+0x44>
        }
        else
        {
            str_len++;
 8002446:	8bfb      	ldrh	r3, [r7, #30]
 8002448:	3301      	adds	r3, #1
 800244a:	83fb      	strh	r3, [r7, #30]
        }
        ptr++;
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	3301      	adds	r3, #1
 8002450:	61bb      	str	r3, [r7, #24]
    while (*ptr != '\0')
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1ea      	bne.n	8002430 <lcdShowStringCenter+0x28>
    }

    uint16_t total_width = str_len * sizex;
 800245a:	7dfb      	ldrb	r3, [r7, #23]
 800245c:	b29b      	uxth	r3, r3
 800245e:	8bfa      	ldrh	r2, [r7, #30]
 8002460:	fb12 f303 	smulbb	r3, r2, r3
 8002464:	82bb      	strh	r3, [r7, #20]
    uint16_t start_x = x - (total_width / 2);
 8002466:	8abb      	ldrh	r3, [r7, #20]
 8002468:	085b      	lsrs	r3, r3, #1
 800246a:	b29b      	uxth	r3, r3
 800246c:	89fa      	ldrh	r2, [r7, #14]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	827b      	strh	r3, [r7, #18]
    uint16_t start_y = y - (sizey / 2);
 8002472:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002476:	085b      	lsrs	r3, r3, #1
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	89bb      	ldrh	r3, [r7, #12]
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	823b      	strh	r3, [r7, #16]

    lcdShowString(start_x, start_y, str, fc, bc, sizey, mode);
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	8a39      	ldrh	r1, [r7, #16]
 8002486:	8a78      	ldrh	r0, [r7, #18]
 8002488:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800248c:	9302      	str	r3, [sp, #8]
 800248e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	4613      	mov	r3, r2
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f7ff ff50 	bl	8002340 <lcdShowString>
}
 80024a0:	bf00      	nop
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <initLed7Seg>:
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void initLed7Seg()
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80024ac:	2201      	movs	r2, #1
 80024ae:	2140      	movs	r1, #64	@ 0x40
 80024b0:	4802      	ldr	r0, [pc, #8]	@ (80024bc <initLed7Seg+0x14>)
 80024b2:	f003 fadb 	bl	8005a6c <HAL_GPIO_WritePin>
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40021800 	.word	0x40021800

080024c0 <led7SegDisplay>:
 * @param	None
 * @note	Call in 1ms interrupt (Be called in default in Timer 4 callback function)
 * @retval 	None
 */
void led7SegDisplay()
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80024c4:	4b3f      	ldr	r3, [pc, #252]	@ (80025c4 <led7SegDisplay+0x104>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <led7SegDisplay+0x104>)
 80024ce:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 80024d0:	4b3d      	ldr	r3, [pc, #244]	@ (80025c8 <led7SegDisplay+0x108>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b3d      	ldr	r3, [pc, #244]	@ (80025cc <led7SegDisplay+0x10c>)
 80024d8:	5c9b      	ldrb	r3, [r3, r2]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	b21a      	sxth	r2, r3
 80024de:	4b39      	ldr	r3, [pc, #228]	@ (80025c4 <led7SegDisplay+0x104>)
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	4313      	orrs	r3, r2
 80024e6:	b21b      	sxth	r3, r3
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <led7SegDisplay+0x104>)
 80024ec:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 80024ee:	4b36      	ldr	r3, [pc, #216]	@ (80025c8 <led7SegDisplay+0x108>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d846      	bhi.n	8002584 <led7SegDisplay+0xc4>
 80024f6:	a201      	add	r2, pc, #4	@ (adr r2, 80024fc <led7SegDisplay+0x3c>)
 80024f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fc:	0800250d 	.word	0x0800250d
 8002500:	0800252b 	.word	0x0800252b
 8002504:	08002549 	.word	0x08002549
 8002508:	08002567 	.word	0x08002567
	case 0:
		spi_buffer |= 0x00b0;
 800250c:	4b2d      	ldr	r3, [pc, #180]	@ (80025c4 <led7SegDisplay+0x104>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b2b      	ldr	r3, [pc, #172]	@ (80025c4 <led7SegDisplay+0x104>)
 8002518:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800251a:	4b2a      	ldr	r3, [pc, #168]	@ (80025c4 <led7SegDisplay+0x104>)
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002522:	b29a      	uxth	r2, r3
 8002524:	4b27      	ldr	r3, [pc, #156]	@ (80025c4 <led7SegDisplay+0x104>)
 8002526:	801a      	strh	r2, [r3, #0]
		break;
 8002528:	e02d      	b.n	8002586 <led7SegDisplay+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800252a:	4b26      	ldr	r3, [pc, #152]	@ (80025c4 <led7SegDisplay+0x104>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8002532:	b29a      	uxth	r2, r3
 8002534:	4b23      	ldr	r3, [pc, #140]	@ (80025c4 <led7SegDisplay+0x104>)
 8002536:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8002538:	4b22      	ldr	r3, [pc, #136]	@ (80025c4 <led7SegDisplay+0x104>)
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	f023 0320 	bic.w	r3, r3, #32
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b20      	ldr	r3, [pc, #128]	@ (80025c4 <led7SegDisplay+0x104>)
 8002544:	801a      	strh	r2, [r3, #0]
		break;
 8002546:	e01e      	b.n	8002586 <led7SegDisplay+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002548:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <led7SegDisplay+0x104>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8002550:	b29a      	uxth	r2, r3
 8002552:	4b1c      	ldr	r3, [pc, #112]	@ (80025c4 <led7SegDisplay+0x104>)
 8002554:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8002556:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <led7SegDisplay+0x104>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	f023 0310 	bic.w	r3, r3, #16
 800255e:	b29a      	uxth	r2, r3
 8002560:	4b18      	ldr	r3, [pc, #96]	@ (80025c4 <led7SegDisplay+0x104>)
 8002562:	801a      	strh	r2, [r3, #0]
		break;
 8002564:	e00f      	b.n	8002586 <led7SegDisplay+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8002566:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <led7SegDisplay+0x104>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800256e:	b29a      	uxth	r2, r3
 8002570:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <led7SegDisplay+0x104>)
 8002572:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8002574:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <led7SegDisplay+0x104>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800257c:	b29a      	uxth	r2, r3
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <led7SegDisplay+0x104>)
 8002580:	801a      	strh	r2, [r3, #0]
		break;
 8002582:	e000      	b.n	8002586 <led7SegDisplay+0xc6>
	default:
		break;
 8002584:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 8002586:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <led7SegDisplay+0x108>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	425a      	negs	r2, r3
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	f002 0203 	and.w	r2, r2, #3
 8002596:	bf58      	it	pl
 8002598:	4253      	negpl	r3, r2
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <led7SegDisplay+0x108>)
 800259e:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2140      	movs	r1, #64	@ 0x40
 80025a4:	480a      	ldr	r0, [pc, #40]	@ (80025d0 <led7SegDisplay+0x110>)
 80025a6:	f003 fa61 	bl	8005a6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 80025aa:	2301      	movs	r3, #1
 80025ac:	2202      	movs	r2, #2
 80025ae:	4905      	ldr	r1, [pc, #20]	@ (80025c4 <led7SegDisplay+0x104>)
 80025b0:	4808      	ldr	r0, [pc, #32]	@ (80025d4 <led7SegDisplay+0x114>)
 80025b2:	f005 f8ee 	bl	8007792 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80025b6:	2201      	movs	r2, #1
 80025b8:	2140      	movs	r1, #64	@ 0x40
 80025ba:	4805      	ldr	r0, [pc, #20]	@ (80025d0 <led7SegDisplay+0x110>)
 80025bc:	f003 fa56 	bl	8005a6c <HAL_GPIO_WritePin>
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	2000001a 	.word	0x2000001a
 80025c8:	2000012e 	.word	0x2000012e
 80025cc:	2000000c 	.word	0x2000000c
 80025d0:	40021800 	.word	0x40021800
 80025d4:	20000158 	.word	0x20000158

080025d8 <led7SegSetDigit>:
 * @param  	pos	The position displayed (index from 0)
 * @param  	show_dot Show dot in the led or not
 * @retval 	None
 */
void led7SegSetDigit(uint8_t num, uint8_t position, uint8_t show_dot)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
 80025e2:	460b      	mov	r3, r1
 80025e4:	71bb      	strb	r3, [r7, #6]
 80025e6:	4613      	mov	r3, r2
 80025e8:	717b      	strb	r3, [r7, #5]
	if (num <= 9)
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	d808      	bhi.n	8002602 <led7SegSetDigit+0x2a>
	{
		led_7seg[position] = led_7seg_map_of_output[num] - show_dot;
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	4a07      	ldr	r2, [pc, #28]	@ (8002610 <led7SegSetDigit+0x38>)
 80025f4:	5cd1      	ldrb	r1, [r2, r3]
 80025f6:	79bb      	ldrb	r3, [r7, #6]
 80025f8:	797a      	ldrb	r2, [r7, #5]
 80025fa:	1a8a      	subs	r2, r1, r2
 80025fc:	b2d1      	uxtb	r1, r2
 80025fe:	4a05      	ldr	r2, [pc, #20]	@ (8002614 <led7SegSetDigit+0x3c>)
 8002600:	54d1      	strb	r1, [r2, r3]
	}
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000010 	.word	0x20000010
 8002614:	2000000c 	.word	0x2000000c

08002618 <led7SegSetColon>:
 *				@arg 0: Turn off
 *				@arg 1: Turn on
 * @retval None
 */
void led7SegSetColon(uint8_t status)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
	if (status == 1)
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d107      	bne.n	8002638 <led7SegSetColon+0x20>
		spi_buffer &= ~(1 << 3);
 8002628:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <led7SegSetColon+0x3c>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	f023 0308 	bic.w	r3, r3, #8
 8002630:	b29a      	uxth	r2, r3
 8002632:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <led7SegSetColon+0x3c>)
 8002634:	801a      	strh	r2, [r3, #0]
	else
		spi_buffer |= (1 << 3);
}
 8002636:	e006      	b.n	8002646 <led7SegSetColon+0x2e>
		spi_buffer |= (1 << 3);
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <led7SegSetColon+0x3c>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	f043 0308 	orr.w	r3, r3, #8
 8002640:	b29a      	uxth	r2, r3
 8002642:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <led7SegSetColon+0x3c>)
 8002644:	801a      	strh	r2, [r3, #0]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	2000001a 	.word	0x2000001a

08002658 <led7SegTurnOff>:

/**
 *
 */
void led7SegTurnOff(uint8_t position)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
	led_7seg[position] = 0xff;
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	4a04      	ldr	r2, [pc, #16]	@ (8002678 <led7SegTurnOff+0x20>)
 8002666:	21ff      	movs	r1, #255	@ 0xff
 8002668:	54d1      	strb	r1, [r2, r3]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	2000000c 	.word	0x2000000c

0800267c <led7SegDebugTurnOn>:
 *            	@arg 7
 *            	@arg 8
 * @retval None
 */
void led7SegDebugTurnOn(uint8_t index)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
	if (index >= 6 && index <= 8)
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d910      	bls.n	80026ae <led7SegDebugTurnOn+0x32>
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	2b08      	cmp	r3, #8
 8002690:	d80d      	bhi.n	80026ae <led7SegDebugTurnOn+0x32>
	{
		spi_buffer |= 1 << (index - 6);
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	3b06      	subs	r3, #6
 8002696:	2201      	movs	r2, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	b21a      	sxth	r2, r3
 800269e:	4b07      	ldr	r3, [pc, #28]	@ (80026bc <led7SegDebugTurnOn+0x40>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <led7SegDebugTurnOn+0x40>)
 80026ac:	801a      	strh	r2, [r3, #0]
	}
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	2000001a 	.word	0x2000001a

080026c0 <led7SegDebugTurnOff>:
 *            	@arg 7
 *            	@arg 8
 * @retval None
 */
void led7SegDebugTurnOff(uint8_t index)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
	if (index >= 6 && index <= 8)
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d912      	bls.n	80026f6 <led7SegDebugTurnOff+0x36>
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d80f      	bhi.n	80026f6 <led7SegDebugTurnOff+0x36>
	{
		spi_buffer &= ~(1 << (index - 6));
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	3b06      	subs	r3, #6
 80026da:	2201      	movs	r2, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	b21a      	sxth	r2, r3
 80026e6:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <led7SegDebugTurnOff+0x44>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	4013      	ands	r3, r2
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	4b04      	ldr	r3, [pc, #16]	@ (8002704 <led7SegDebugTurnOff+0x44>)
 80026f4:	801a      	strh	r2, [r3, #0]
	}
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	2000001a 	.word	0x2000001a

08002708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800270e:	f002 fe69 	bl	80053e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002712:	f001 f9c9 	bl	8003aa8 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002716:	f7fe ff5d 	bl	80015d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800271a:	f002 fd1d 	bl	8005158 <MX_TIM2_Init>
  MX_TIM4_Init();
 800271e:	f002 fd67 	bl	80051f0 <MX_TIM4_Init>
  MX_SPI1_Init();
 8002722:	f002 fc1d 	bl	8004f60 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002726:	f7fe fe85 	bl	8001434 <MX_FSMC_Init>
  MX_I2C1_Init();
 800272a:	f7ff f84b 	bl	80017c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  initSystem();
 800272e:	f001 fa2f 	bl	8003b90 <initSystem>

  sTimer4Set(1000, 50); // interrupt every 50ms
 8002732:	2132      	movs	r1, #50	@ 0x32
 8002734:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002738:	f002 fb7c 	bl	8004e34 <sTimer4Set>
  sTimer2Set(0, 500); // interrupt every 500ms
 800273c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002740:	2000      	movs	r0, #0
 8002742:	f002 fb59 	bl	8004df8 <sTimer2Set>

  int clock_radius = 100;
 8002746:	2364      	movs	r3, #100	@ 0x64
 8002748:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(sTimer4GetFlag())
 800274a:	f002 fbad 	bl	8004ea8 <sTimer4GetFlag>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <main+0x54>
	  {
		  buttonScan();
 8002754:	f7fe fbaa 	bl	8000eac <buttonScan>
		  led7SegDisplay();
 8002758:	f7ff feb2 	bl	80024c0 <led7SegDisplay>
	  }

	  switch (current_mode)
 800275c:	4baf      	ldr	r3, [pc, #700]	@ (8002a1c <main+0x314>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b07      	cmp	r3, #7
 8002762:	f201 8178 	bhi.w	8003a56 <main+0x134e>
 8002766:	a201      	add	r2, pc, #4	@ (adr r2, 800276c <main+0x64>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	0800278d 	.word	0x0800278d
 8002770:	080027bb 	.word	0x080027bb
 8002774:	08003a57 	.word	0x08003a57
 8002778:	0800297d 	.word	0x0800297d
 800277c:	08003a61 	.word	0x08003a61
 8002780:	08003a61 	.word	0x08003a61
 8002784:	08003a61 	.word	0x08003a61
 8002788:	08003a61 	.word	0x08003a61
	  {
	  case Mode_init:
	  {
		  led7SegSetColon(1);
 800278c:	2001      	movs	r0, #1
 800278e:	f7ff ff43 	bl	8002618 <led7SegSetColon>
		  setTime(&set_time.second, &set_time.minute, &set_time.hour, &set_time.day, &set_time.date, &set_time.month, &set_time.year);
 8002792:	4ba3      	ldr	r3, [pc, #652]	@ (8002a20 <main+0x318>)
 8002794:	9302      	str	r3, [sp, #8]
 8002796:	4ba3      	ldr	r3, [pc, #652]	@ (8002a24 <main+0x31c>)
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	4ba3      	ldr	r3, [pc, #652]	@ (8002a28 <main+0x320>)
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	4ba3      	ldr	r3, [pc, #652]	@ (8002a2c <main+0x324>)
 80027a0:	4aa3      	ldr	r2, [pc, #652]	@ (8002a30 <main+0x328>)
 80027a2:	49a4      	ldr	r1, [pc, #656]	@ (8002a34 <main+0x32c>)
 80027a4:	48a4      	ldr	r0, [pc, #656]	@ (8002a38 <main+0x330>)
 80027a6:	f001 fa03 	bl	8003bb0 <setTime>

		  current_time.alarm_on = false;
 80027aa:	4ba4      	ldr	r3, [pc, #656]	@ (8002a3c <main+0x334>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	721a      	strb	r2, [r3, #8]

		  current_mode = Mode_config_time;
 80027b0:	4b9a      	ldr	r3, [pc, #616]	@ (8002a1c <main+0x314>)
 80027b2:	2203      	movs	r2, #3
 80027b4:	701a      	strb	r2, [r3, #0]

		  break;
 80027b6:	f001 b95a 	b.w	8003a6e <main+0x1366>
	  }
	  case Mode_word_clock:
	  {
		  if(previous_mode != current_mode)
 80027ba:	4ba1      	ldr	r3, [pc, #644]	@ (8002a40 <main+0x338>)
 80027bc:	781a      	ldrb	r2, [r3, #0]
 80027be:	4b97      	ldr	r3, [pc, #604]	@ (8002a1c <main+0x314>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d05f      	beq.n	8002886 <main+0x17e>
		  {
			  lcdClear(WHITE);
 80027c6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80027ca:	f7ff f8ef 	bl	80019ac <lcdClear>
			  clock_radius = 100;
 80027ce:	2364      	movs	r3, #100	@ 0x64
 80027d0:	607b      	str	r3, [r7, #4]
			  displayClock(LCD_WIDTH / 2, 110, clock_radius);
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	216e      	movs	r1, #110	@ 0x6e
 80027d6:	2078      	movs	r0, #120	@ 0x78
 80027d8:	f001 fa1a 	bl	8003c10 <displayClock>

			  (void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &current_time.second, BLUE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f1a3 021e 	sub.w	r2, r3, #30
 80027e2:	231f      	movs	r3, #31
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	4b95      	ldr	r3, [pc, #596]	@ (8002a3c <main+0x334>)
 80027e8:	216e      	movs	r1, #110	@ 0x6e
 80027ea:	2078      	movs	r0, #120	@ 0x78
 80027ec:	f001 fac8 	bl	8003d80 <displaySecClockwise>
			  (void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &current_time.second, &current_time.minute, BLACK);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 80027f6:	2300      	movs	r3, #0
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	4b92      	ldr	r3, [pc, #584]	@ (8002a44 <main+0x33c>)
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	4b8f      	ldr	r3, [pc, #572]	@ (8002a3c <main+0x334>)
 8002800:	216e      	movs	r1, #110	@ 0x6e
 8002802:	2078      	movs	r0, #120	@ 0x78
 8002804:	f001 fbb8 	bl	8003f78 <displayMinClockwise>
			  (void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &current_time.minute, &current_time.hour, RED);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 800280e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	4b8c      	ldr	r3, [pc, #560]	@ (8002a48 <main+0x340>)
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	4b8a      	ldr	r3, [pc, #552]	@ (8002a44 <main+0x33c>)
 800281a:	216e      	movs	r1, #110	@ 0x6e
 800281c:	2078      	movs	r0, #120	@ 0x78
 800281e:	f001 fcc7 	bl	80041b0 <displayHourClockwise>

			  displayTime(LCD_WIDTH / 2, 240, &current_time.second, &current_time.minute, &current_time.hour, 32, BLACK, BLACK, BLACK);
 8002822:	2300      	movs	r3, #0
 8002824:	9304      	str	r3, [sp, #16]
 8002826:	2300      	movs	r3, #0
 8002828:	9303      	str	r3, [sp, #12]
 800282a:	2300      	movs	r3, #0
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	2320      	movs	r3, #32
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	4b85      	ldr	r3, [pc, #532]	@ (8002a48 <main+0x340>)
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	4b83      	ldr	r3, [pc, #524]	@ (8002a44 <main+0x33c>)
 8002838:	4a80      	ldr	r2, [pc, #512]	@ (8002a3c <main+0x334>)
 800283a:	21f0      	movs	r1, #240	@ 0xf0
 800283c:	2078      	movs	r0, #120	@ 0x78
 800283e:	f001 fddb 	bl	80043f8 <displayTime>
			  displayDate(LCD_WIDTH / 2, 240 + 32, &current_time.date, &current_time.month, &current_time.year, 24, DARKBLUE, DARKBLUE, DARKBLUE);
 8002842:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002846:	9304      	str	r3, [sp, #16]
 8002848:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800284c:	9303      	str	r3, [sp, #12]
 800284e:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002852:	9302      	str	r3, [sp, #8]
 8002854:	2318      	movs	r3, #24
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	4b7c      	ldr	r3, [pc, #496]	@ (8002a4c <main+0x344>)
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	4b7c      	ldr	r3, [pc, #496]	@ (8002a50 <main+0x348>)
 800285e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a54 <main+0x34c>)
 8002860:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002864:	2078      	movs	r0, #120	@ 0x78
 8002866:	f001 fe45 	bl	80044f4 <displayDate>
			  displayDay(20, 320 - 10 - 24, &current_time.day, 24, RED);
 800286a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2318      	movs	r3, #24
 8002872:	4a79      	ldr	r2, [pc, #484]	@ (8002a58 <main+0x350>)
 8002874:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8002878:	2014      	movs	r0, #20
 800287a:	f001 fedf 	bl	800463c <displayDay>

			  previous_mode = current_mode;
 800287e:	4b67      	ldr	r3, [pc, #412]	@ (8002a1c <main+0x314>)
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	4b6f      	ldr	r3, [pc, #444]	@ (8002a40 <main+0x338>)
 8002884:	701a      	strb	r2, [r3, #0]
		  }

		  if(sTimer2GetFlag())
 8002886:	f002 faf3 	bl	8004e70 <sTimer2GetFlag>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d065      	beq.n	800295c <main+0x254>
		  {
			  debugSystem();
 8002890:	f001 f974 	bl	8003b7c <debugSystem>

			  ds3231ReadTime();
 8002894:	f7fe fbb2 	bl	8000ffc <ds3231ReadTime>

			  (void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &current_time.second, BLUE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f1a3 021e 	sub.w	r2, r3, #30
 800289e:	231f      	movs	r3, #31
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	4b66      	ldr	r3, [pc, #408]	@ (8002a3c <main+0x334>)
 80028a4:	216e      	movs	r1, #110	@ 0x6e
 80028a6:	2078      	movs	r0, #120	@ 0x78
 80028a8:	f001 fa6a 	bl	8003d80 <displaySecClockwise>
			  (void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &current_time.second, &current_time.minute, BLACK);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 80028b2:	2300      	movs	r3, #0
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	4b63      	ldr	r3, [pc, #396]	@ (8002a44 <main+0x33c>)
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	4b60      	ldr	r3, [pc, #384]	@ (8002a3c <main+0x334>)
 80028bc:	216e      	movs	r1, #110	@ 0x6e
 80028be:	2078      	movs	r0, #120	@ 0x78
 80028c0:	f001 fb5a 	bl	8003f78 <displayMinClockwise>
			  (void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &current_time.minute, &current_time.hour, RED);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 80028ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002a48 <main+0x340>)
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	4b5b      	ldr	r3, [pc, #364]	@ (8002a44 <main+0x33c>)
 80028d6:	216e      	movs	r1, #110	@ 0x6e
 80028d8:	2078      	movs	r0, #120	@ 0x78
 80028da:	f001 fc69 	bl	80041b0 <displayHourClockwise>

			  displayTime(LCD_WIDTH / 2, 240, &current_time.second, &current_time.minute, &current_time.hour, 32, BLACK, BLACK, BLACK);
 80028de:	2300      	movs	r3, #0
 80028e0:	9304      	str	r3, [sp, #16]
 80028e2:	2300      	movs	r3, #0
 80028e4:	9303      	str	r3, [sp, #12]
 80028e6:	2300      	movs	r3, #0
 80028e8:	9302      	str	r3, [sp, #8]
 80028ea:	2320      	movs	r3, #32
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	4b56      	ldr	r3, [pc, #344]	@ (8002a48 <main+0x340>)
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	4b54      	ldr	r3, [pc, #336]	@ (8002a44 <main+0x33c>)
 80028f4:	4a51      	ldr	r2, [pc, #324]	@ (8002a3c <main+0x334>)
 80028f6:	21f0      	movs	r1, #240	@ 0xf0
 80028f8:	2078      	movs	r0, #120	@ 0x78
 80028fa:	f001 fd7d 	bl	80043f8 <displayTime>
			  if(current_time.second == 0 && current_time.minute == 0 && current_time.hour == 0)
 80028fe:	4b4f      	ldr	r3, [pc, #316]	@ (8002a3c <main+0x334>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d125      	bne.n	8002952 <main+0x24a>
 8002906:	4b4d      	ldr	r3, [pc, #308]	@ (8002a3c <main+0x334>)
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d121      	bne.n	8002952 <main+0x24a>
 800290e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a3c <main+0x334>)
 8002910:	789b      	ldrb	r3, [r3, #2]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d11d      	bne.n	8002952 <main+0x24a>
			  {
				  displayDate(LCD_WIDTH / 2, 240 + 32, &current_time.date, &current_time.month, &current_time.year, 24, DARKBLUE, DARKBLUE, DARKBLUE);
 8002916:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800291a:	9304      	str	r3, [sp, #16]
 800291c:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002920:	9303      	str	r3, [sp, #12]
 8002922:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002926:	9302      	str	r3, [sp, #8]
 8002928:	2318      	movs	r3, #24
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	4b47      	ldr	r3, [pc, #284]	@ (8002a4c <main+0x344>)
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	4b47      	ldr	r3, [pc, #284]	@ (8002a50 <main+0x348>)
 8002932:	4a48      	ldr	r2, [pc, #288]	@ (8002a54 <main+0x34c>)
 8002934:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002938:	2078      	movs	r0, #120	@ 0x78
 800293a:	f001 fddb 	bl	80044f4 <displayDate>
				  displayDay(20, 320 - 34, &current_time.day, 24, RED);
 800293e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2318      	movs	r3, #24
 8002946:	4a44      	ldr	r2, [pc, #272]	@ (8002a58 <main+0x350>)
 8002948:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 800294c:	2014      	movs	r0, #20
 800294e:	f001 fe75 	bl	800463c <displayDay>
			  }

			  displayTimeLed7Seg(&current_time.second, &current_time.minute, &current_time.hour);
 8002952:	4a3d      	ldr	r2, [pc, #244]	@ (8002a48 <main+0x340>)
 8002954:	493b      	ldr	r1, [pc, #236]	@ (8002a44 <main+0x33c>)
 8002956:	4839      	ldr	r0, [pc, #228]	@ (8002a3c <main+0x334>)
 8002958:	f001 ff18 	bl	800478c <displayTimeLed7Seg>
		  }

		  if(button_count[12] == 1)
 800295c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a5c <main+0x354>)
 800295e:	8b1b      	ldrh	r3, [r3, #24]
 8002960:	2b01      	cmp	r3, #1
 8002962:	f041 8080 	bne.w	8003a66 <main+0x135e>
		  {
			  current_mode = Mode_config_time;
 8002966:	4b2d      	ldr	r3, [pc, #180]	@ (8002a1c <main+0x314>)
 8002968:	2203      	movs	r2, #3
 800296a:	701a      	strb	r2, [r3, #0]
			  button_count[12] += 1;
 800296c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a5c <main+0x354>)
 800296e:	8b1b      	ldrh	r3, [r3, #24]
 8002970:	3301      	adds	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	4b39      	ldr	r3, [pc, #228]	@ (8002a5c <main+0x354>)
 8002976:	831a      	strh	r2, [r3, #24]
		  }

		  break;
 8002978:	f001 b875 	b.w	8003a66 <main+0x135e>
	  }
	  case Mode_config_time:
	  {
		  if(previous_mode != current_mode)
 800297c:	4b30      	ldr	r3, [pc, #192]	@ (8002a40 <main+0x338>)
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	4b26      	ldr	r3, [pc, #152]	@ (8002a1c <main+0x314>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d032      	beq.n	80029ee <main+0x2e6>
		  {
			  ds3231ReadTime();
 8002988:	f7fe fb38 	bl	8000ffc <ds3231ReadTime>
			  set_time.second = current_time.second;
 800298c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a3c <main+0x334>)
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	4b29      	ldr	r3, [pc, #164]	@ (8002a38 <main+0x330>)
 8002992:	701a      	strb	r2, [r3, #0]
			  set_time.minute = current_time.minute;
 8002994:	4b29      	ldr	r3, [pc, #164]	@ (8002a3c <main+0x334>)
 8002996:	785a      	ldrb	r2, [r3, #1]
 8002998:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <main+0x330>)
 800299a:	705a      	strb	r2, [r3, #1]
			  set_time.hour = current_time.hour;
 800299c:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <main+0x334>)
 800299e:	789a      	ldrb	r2, [r3, #2]
 80029a0:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <main+0x330>)
 80029a2:	709a      	strb	r2, [r3, #2]
			  set_time.day = current_time.day;
 80029a4:	4b25      	ldr	r3, [pc, #148]	@ (8002a3c <main+0x334>)
 80029a6:	78da      	ldrb	r2, [r3, #3]
 80029a8:	4b23      	ldr	r3, [pc, #140]	@ (8002a38 <main+0x330>)
 80029aa:	70da      	strb	r2, [r3, #3]
			  set_time.date = current_time.date;
 80029ac:	4b23      	ldr	r3, [pc, #140]	@ (8002a3c <main+0x334>)
 80029ae:	791a      	ldrb	r2, [r3, #4]
 80029b0:	4b21      	ldr	r3, [pc, #132]	@ (8002a38 <main+0x330>)
 80029b2:	711a      	strb	r2, [r3, #4]
			  set_time.month = current_time.month;
 80029b4:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <main+0x334>)
 80029b6:	795a      	ldrb	r2, [r3, #5]
 80029b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a38 <main+0x330>)
 80029ba:	715a      	strb	r2, [r3, #5]
			  set_time.year = current_time.year;
 80029bc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <main+0x334>)
 80029be:	88da      	ldrh	r2, [r3, #6]
 80029c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <main+0x330>)
 80029c2:	80da      	strh	r2, [r3, #6]

			  lcdClear(WHITE);
 80029c4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80029c8:	f7fe fff0 	bl	80019ac <lcdClear>
			  clock_radius = 100;
 80029cc:	2364      	movs	r3, #100	@ 0x64
 80029ce:	607b      	str	r3, [r7, #4]
			  displayClock(LCD_WIDTH / 2, 110, clock_radius);
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	216e      	movs	r1, #110	@ 0x6e
 80029d4:	2078      	movs	r0, #120	@ 0x78
 80029d6:	f001 f91b 	bl	8003c10 <displayClock>

			  current_mode_config = Mode_config_second;
 80029da:	4b21      	ldr	r3, [pc, #132]	@ (8002a60 <main+0x358>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
			  previous_mode_config = Mode_config_minute;
 80029e0:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <main+0x35c>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]

			  previous_mode = current_mode;
 80029e6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a1c <main+0x314>)
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <main+0x338>)
 80029ec:	701a      	strb	r2, [r3, #0]
		  }

		  switch (current_mode_config)
 80029ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002a60 <main+0x358>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	f201 8007 	bhi.w	8003a06 <main+0x12fe>
 80029f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002a00 <main+0x2f8>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a69 	.word	0x08002a69
 8002a04:	08002d0d 	.word	0x08002d0d
 8002a08:	08002fdd 	.word	0x08002fdd
 8002a0c:	080032ad 	.word	0x080032ad
 8002a10:	08003453 	.word	0x08003453
 8002a14:	08003653 	.word	0x08003653
 8002a18:	08003851 	.word	0x08003851
 8002a1c:	20000130 	.word	0x20000130
 8002a20:	20000006 	.word	0x20000006
 8002a24:	20000005 	.word	0x20000005
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	20000003 	.word	0x20000003
 8002a30:	20000002 	.word	0x20000002
 8002a34:	20000001 	.word	0x20000001
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	2000006c 	.word	0x2000006c
 8002a40:	20000131 	.word	0x20000131
 8002a44:	2000006d 	.word	0x2000006d
 8002a48:	2000006e 	.word	0x2000006e
 8002a4c:	20000072 	.word	0x20000072
 8002a50:	20000071 	.word	0x20000071
 8002a54:	20000070 	.word	0x20000070
 8002a58:	2000006f 	.word	0x2000006f
 8002a5c:	20000048 	.word	0x20000048
 8002a60:	20000132 	.word	0x20000132
 8002a64:	2000001c 	.word	0x2000001c
		  {
			case Mode_config_second:
			{
				if(previous_mode_config != current_mode_config)
 8002a68:	4b9b      	ldr	r3, [pc, #620]	@ (8002cd8 <main+0x5d0>)
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	4b9b      	ldr	r3, [pc, #620]	@ (8002cdc <main+0x5d4>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d05a      	beq.n	8002b2a <main+0x422>
				{
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLACK);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	4b98      	ldr	r3, [pc, #608]	@ (8002ce0 <main+0x5d8>)
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	4b98      	ldr	r3, [pc, #608]	@ (8002ce4 <main+0x5dc>)
 8002a84:	216e      	movs	r1, #110	@ 0x6e
 8002a86:	2078      	movs	r0, #120	@ 0x78
 8002a88:	f001 fa76 	bl	8003f78 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, BLUE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002a92:	231f      	movs	r3, #31
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	4b94      	ldr	r3, [pc, #592]	@ (8002ce8 <main+0x5e0>)
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	4b91      	ldr	r3, [pc, #580]	@ (8002ce0 <main+0x5d8>)
 8002a9c:	216e      	movs	r1, #110	@ 0x6e
 8002a9e:	2078      	movs	r0, #120	@ 0x78
 8002aa0:	f001 fb86 	bl	80041b0 <displayHourClockwise>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, RED);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f1a3 021e 	sub.w	r2, r3, #30
 8002aaa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4b8c      	ldr	r3, [pc, #560]	@ (8002ce4 <main+0x5dc>)
 8002ab2:	216e      	movs	r1, #110	@ 0x6e
 8002ab4:	2078      	movs	r0, #120	@ 0x78
 8002ab6:	f001 f963 	bl	8003d80 <displaySecClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, RED, BLACK, BLACK);
 8002aba:	2300      	movs	r3, #0
 8002abc:	9304      	str	r3, [sp, #16]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	9303      	str	r3, [sp, #12]
 8002ac2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ac6:	9302      	str	r3, [sp, #8]
 8002ac8:	2320      	movs	r3, #32
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	4b86      	ldr	r3, [pc, #536]	@ (8002ce8 <main+0x5e0>)
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	4b83      	ldr	r3, [pc, #524]	@ (8002ce0 <main+0x5d8>)
 8002ad2:	4a84      	ldr	r2, [pc, #528]	@ (8002ce4 <main+0x5dc>)
 8002ad4:	21f0      	movs	r1, #240	@ 0xf0
 8002ad6:	2078      	movs	r0, #120	@ 0x78
 8002ad8:	f001 fc8e 	bl	80043f8 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, DARKBLUE);
 8002adc:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002ae0:	9304      	str	r3, [sp, #16]
 8002ae2:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002ae6:	9303      	str	r3, [sp, #12]
 8002ae8:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002aec:	9302      	str	r3, [sp, #8]
 8002aee:	2318      	movs	r3, #24
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	4b7e      	ldr	r3, [pc, #504]	@ (8002cec <main+0x5e4>)
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4b7e      	ldr	r3, [pc, #504]	@ (8002cf0 <main+0x5e8>)
 8002af8:	4a7e      	ldr	r2, [pc, #504]	@ (8002cf4 <main+0x5ec>)
 8002afa:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002afe:	2078      	movs	r0, #120	@ 0x78
 8002b00:	f001 fcf8 	bl	80044f4 <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8002b04:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	2318      	movs	r3, #24
 8002b0c:	4a7a      	ldr	r2, [pc, #488]	@ (8002cf8 <main+0x5f0>)
 8002b0e:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8002b12:	2014      	movs	r0, #20
 8002b14:	f001 fd92 	bl	800463c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8002b18:	4a73      	ldr	r2, [pc, #460]	@ (8002ce8 <main+0x5e0>)
 8002b1a:	4971      	ldr	r1, [pc, #452]	@ (8002ce0 <main+0x5d8>)
 8002b1c:	4871      	ldr	r0, [pc, #452]	@ (8002ce4 <main+0x5dc>)
 8002b1e:	f001 fe35 	bl	800478c <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 8002b22:	4b6e      	ldr	r3, [pc, #440]	@ (8002cdc <main+0x5d4>)
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	4b6c      	ldr	r3, [pc, #432]	@ (8002cd8 <main+0x5d0>)
 8002b28:	701a      	strb	r2, [r3, #0]
				}

				if(sTimer2GetFlag())
 8002b2a:	f002 f9a1 	bl	8004e70 <sTimer2GetFlag>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01f      	beq.n	8002b74 <main+0x46c>
				{
					static int counter = 0;
					counter += 1;
 8002b34:	4b71      	ldr	r3, [pc, #452]	@ (8002cfc <main+0x5f4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	4a70      	ldr	r2, [pc, #448]	@ (8002cfc <main+0x5f4>)
 8002b3c:	6013      	str	r3, [r2, #0]

					if(counter % 4 == 0)
 8002b3e:	4b6f      	ldr	r3, [pc, #444]	@ (8002cfc <main+0x5f4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <main+0x456>
					{
						led7SegDebugTurnOff(6);
 8002b4a:	2006      	movs	r0, #6
 8002b4c:	f7ff fdb8 	bl	80026c0 <led7SegDebugTurnOff>
						led7SegDebugTurnOff(7);
 8002b50:	2007      	movs	r0, #7
 8002b52:	f7ff fdb5 	bl	80026c0 <led7SegDebugTurnOff>
						led7SegDebugTurnOff(8);
 8002b56:	2008      	movs	r0, #8
 8002b58:	f7ff fdb2 	bl	80026c0 <led7SegDebugTurnOff>
 8002b5c:	e00a      	b.n	8002b74 <main+0x46c>
					}
					else if(counter % 2 == 0)
 8002b5e:	4b67      	ldr	r3, [pc, #412]	@ (8002cfc <main+0x5f4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d104      	bne.n	8002b74 <main+0x46c>
					{
						displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8002b6a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ce8 <main+0x5e0>)
 8002b6c:	495c      	ldr	r1, [pc, #368]	@ (8002ce0 <main+0x5d8>)
 8002b6e:	485d      	ldr	r0, [pc, #372]	@ (8002ce4 <main+0x5dc>)
 8002b70:	f001 fe0c 	bl	800478c <displayTimeLed7Seg>
					}
				}

				if(button_count[11] % 30 == 1) // check button is held 1.5 second
 8002b74:	4b62      	ldr	r3, [pc, #392]	@ (8002d00 <main+0x5f8>)
 8002b76:	8ada      	ldrh	r2, [r3, #22]
 8002b78:	4b62      	ldr	r3, [pc, #392]	@ (8002d04 <main+0x5fc>)
 8002b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b7e:	0919      	lsrs	r1, r3, #4
 8002b80:	460b      	mov	r3, r1
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	1a5b      	subs	r3, r3, r1
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d10a      	bne.n	8002ba6 <main+0x49e>
				{
					current_mode_config = Mode_config_minute;
 8002b90:	4b52      	ldr	r3, [pc, #328]	@ (8002cdc <main+0x5d4>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 8002b96:	4b5a      	ldr	r3, [pc, #360]	@ (8002d00 <main+0x5f8>)
 8002b98:	8adb      	ldrh	r3, [r3, #22]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	4b58      	ldr	r3, [pc, #352]	@ (8002d00 <main+0x5f8>)
 8002ba0:	82da      	strh	r2, [r3, #22]
				    displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, RED, BLACK, BLACK);

					button_count[7] += 1;
				}

				break;
 8002ba2:	f000 bf23 	b.w	80039ec <main+0x12e4>
				else if(button_count[3] % 20 == 1)
 8002ba6:	4b56      	ldr	r3, [pc, #344]	@ (8002d00 <main+0x5f8>)
 8002ba8:	88da      	ldrh	r2, [r3, #6]
 8002baa:	4b57      	ldr	r3, [pc, #348]	@ (8002d08 <main+0x600>)
 8002bac:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb0:	0919      	lsrs	r1, r3, #4
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d13d      	bne.n	8002c3e <main+0x536>
					increaseSec();
 8002bc2:	f001 fe63 	bl	800488c <increaseSec>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLACK);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	4b43      	ldr	r3, [pc, #268]	@ (8002ce0 <main+0x5d8>)
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	4b43      	ldr	r3, [pc, #268]	@ (8002ce4 <main+0x5dc>)
 8002bd6:	216e      	movs	r1, #110	@ 0x6e
 8002bd8:	2078      	movs	r0, #120	@ 0x78
 8002bda:	f001 f9cd 	bl	8003f78 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, BLUE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002be4:	231f      	movs	r3, #31
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ce8 <main+0x5e0>)
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce0 <main+0x5d8>)
 8002bee:	216e      	movs	r1, #110	@ 0x6e
 8002bf0:	2078      	movs	r0, #120	@ 0x78
 8002bf2:	f001 fadd 	bl	80041b0 <displayHourClockwise>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, RED);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f1a3 021e 	sub.w	r2, r3, #30
 8002bfc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	4b38      	ldr	r3, [pc, #224]	@ (8002ce4 <main+0x5dc>)
 8002c04:	216e      	movs	r1, #110	@ 0x6e
 8002c06:	2078      	movs	r0, #120	@ 0x78
 8002c08:	f001 f8ba 	bl	8003d80 <displaySecClockwise>
				    displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, RED, BLACK, BLACK);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	9304      	str	r3, [sp, #16]
 8002c10:	2300      	movs	r3, #0
 8002c12:	9303      	str	r3, [sp, #12]
 8002c14:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c18:	9302      	str	r3, [sp, #8]
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	4b32      	ldr	r3, [pc, #200]	@ (8002ce8 <main+0x5e0>)
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce0 <main+0x5d8>)
 8002c24:	4a2f      	ldr	r2, [pc, #188]	@ (8002ce4 <main+0x5dc>)
 8002c26:	21f0      	movs	r1, #240	@ 0xf0
 8002c28:	2078      	movs	r0, #120	@ 0x78
 8002c2a:	f001 fbe5 	bl	80043f8 <displayTime>
					button_count[3] += 1;
 8002c2e:	4b34      	ldr	r3, [pc, #208]	@ (8002d00 <main+0x5f8>)
 8002c30:	88db      	ldrh	r3, [r3, #6]
 8002c32:	3301      	adds	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	4b32      	ldr	r3, [pc, #200]	@ (8002d00 <main+0x5f8>)
 8002c38:	80da      	strh	r2, [r3, #6]
				break;
 8002c3a:	f000 bed7 	b.w	80039ec <main+0x12e4>
				else if(button_count[7] % 20 == 1)
 8002c3e:	4b30      	ldr	r3, [pc, #192]	@ (8002d00 <main+0x5f8>)
 8002c40:	89da      	ldrh	r2, [r3, #14]
 8002c42:	4b31      	ldr	r3, [pc, #196]	@ (8002d08 <main+0x600>)
 8002c44:	fba3 1302 	umull	r1, r3, r3, r2
 8002c48:	0919      	lsrs	r1, r3, #4
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	f040 86c8 	bne.w	80039ec <main+0x12e4>
					decreaseSec();
 8002c5c:	f001 fe4a 	bl	80048f4 <decreaseSec>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLACK);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002c66:	2300      	movs	r3, #0
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce0 <main+0x5d8>)
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <main+0x5dc>)
 8002c70:	216e      	movs	r1, #110	@ 0x6e
 8002c72:	2078      	movs	r0, #120	@ 0x78
 8002c74:	f001 f980 	bl	8003f78 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, BLUE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002c7e:	231f      	movs	r3, #31
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	4b19      	ldr	r3, [pc, #100]	@ (8002ce8 <main+0x5e0>)
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	4b16      	ldr	r3, [pc, #88]	@ (8002ce0 <main+0x5d8>)
 8002c88:	216e      	movs	r1, #110	@ 0x6e
 8002c8a:	2078      	movs	r0, #120	@ 0x78
 8002c8c:	f001 fa90 	bl	80041b0 <displayHourClockwise>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, RED);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f1a3 021e 	sub.w	r2, r3, #30
 8002c96:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <main+0x5dc>)
 8002c9e:	216e      	movs	r1, #110	@ 0x6e
 8002ca0:	2078      	movs	r0, #120	@ 0x78
 8002ca2:	f001 f86d 	bl	8003d80 <displaySecClockwise>
				    displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, RED, BLACK, BLACK);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9304      	str	r3, [sp, #16]
 8002caa:	2300      	movs	r3, #0
 8002cac:	9303      	str	r3, [sp, #12]
 8002cae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002cb2:	9302      	str	r3, [sp, #8]
 8002cb4:	2320      	movs	r3, #32
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <main+0x5e0>)
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <main+0x5d8>)
 8002cbe:	4a09      	ldr	r2, [pc, #36]	@ (8002ce4 <main+0x5dc>)
 8002cc0:	21f0      	movs	r1, #240	@ 0xf0
 8002cc2:	2078      	movs	r0, #120	@ 0x78
 8002cc4:	f001 fb98 	bl	80043f8 <displayTime>
					button_count[7] += 1;
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <main+0x5f8>)
 8002cca:	89db      	ldrh	r3, [r3, #14]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <main+0x5f8>)
 8002cd2:	81da      	strh	r2, [r3, #14]
				break;
 8002cd4:	f000 be8a 	b.w	80039ec <main+0x12e4>
 8002cd8:	2000001c 	.word	0x2000001c
 8002cdc:	20000132 	.word	0x20000132
 8002ce0:	20000001 	.word	0x20000001
 8002ce4:	20000000 	.word	0x20000000
 8002ce8:	20000002 	.word	0x20000002
 8002cec:	20000006 	.word	0x20000006
 8002cf0:	20000005 	.word	0x20000005
 8002cf4:	20000004 	.word	0x20000004
 8002cf8:	20000003 	.word	0x20000003
 8002cfc:	20000134 	.word	0x20000134
 8002d00:	20000048 	.word	0x20000048
 8002d04:	88888889 	.word	0x88888889
 8002d08:	cccccccd 	.word	0xcccccccd
			}
			case Mode_config_minute:
			{
				if(previous_mode_config != current_mode_config)
 8002d0c:	4ba6      	ldr	r3, [pc, #664]	@ (8002fa8 <main+0x8a0>)
 8002d0e:	781a      	ldrb	r2, [r3, #0]
 8002d10:	4ba6      	ldr	r3, [pc, #664]	@ (8002fac <main+0x8a4>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d05a      	beq.n	8002dce <main+0x6c6>
				{
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f1a3 021e 	sub.w	r2, r3, #30
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4ba3      	ldr	r3, [pc, #652]	@ (8002fb0 <main+0x8a8>)
 8002d24:	216e      	movs	r1, #110	@ 0x6e
 8002d26:	2078      	movs	r0, #120	@ 0x78
 8002d28:	f001 f82a 	bl	8003d80 <displaySecClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, BLUE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002d32:	231f      	movs	r3, #31
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	4b9f      	ldr	r3, [pc, #636]	@ (8002fb4 <main+0x8ac>)
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	4b9f      	ldr	r3, [pc, #636]	@ (8002fb8 <main+0x8b0>)
 8002d3c:	216e      	movs	r1, #110	@ 0x6e
 8002d3e:	2078      	movs	r0, #120	@ 0x78
 8002d40:	f001 fa36 	bl	80041b0 <displayHourClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, RED);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002d4a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	4b99      	ldr	r3, [pc, #612]	@ (8002fb8 <main+0x8b0>)
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	4b96      	ldr	r3, [pc, #600]	@ (8002fb0 <main+0x8a8>)
 8002d56:	216e      	movs	r1, #110	@ 0x6e
 8002d58:	2078      	movs	r0, #120	@ 0x78
 8002d5a:	f001 f90d 	bl	8003f78 <displayMinClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, RED, BLACK);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9304      	str	r3, [sp, #16]
 8002d62:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002d66:	9303      	str	r3, [sp, #12]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	9302      	str	r3, [sp, #8]
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	4b90      	ldr	r3, [pc, #576]	@ (8002fb4 <main+0x8ac>)
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	4b90      	ldr	r3, [pc, #576]	@ (8002fb8 <main+0x8b0>)
 8002d76:	4a8e      	ldr	r2, [pc, #568]	@ (8002fb0 <main+0x8a8>)
 8002d78:	21f0      	movs	r1, #240	@ 0xf0
 8002d7a:	2078      	movs	r0, #120	@ 0x78
 8002d7c:	f001 fb3c 	bl	80043f8 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, DARKBLUE);
 8002d80:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002d84:	9304      	str	r3, [sp, #16]
 8002d86:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002d8a:	9303      	str	r3, [sp, #12]
 8002d8c:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002d90:	9302      	str	r3, [sp, #8]
 8002d92:	2318      	movs	r3, #24
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	4b89      	ldr	r3, [pc, #548]	@ (8002fbc <main+0x8b4>)
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	4b89      	ldr	r3, [pc, #548]	@ (8002fc0 <main+0x8b8>)
 8002d9c:	4a89      	ldr	r2, [pc, #548]	@ (8002fc4 <main+0x8bc>)
 8002d9e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002da2:	2078      	movs	r0, #120	@ 0x78
 8002da4:	f001 fba6 	bl	80044f4 <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8002da8:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2318      	movs	r3, #24
 8002db0:	4a85      	ldr	r2, [pc, #532]	@ (8002fc8 <main+0x8c0>)
 8002db2:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8002db6:	2014      	movs	r0, #20
 8002db8:	f001 fc40 	bl	800463c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8002dbc:	4a7d      	ldr	r2, [pc, #500]	@ (8002fb4 <main+0x8ac>)
 8002dbe:	497e      	ldr	r1, [pc, #504]	@ (8002fb8 <main+0x8b0>)
 8002dc0:	487b      	ldr	r0, [pc, #492]	@ (8002fb0 <main+0x8a8>)
 8002dc2:	f001 fce3 	bl	800478c <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 8002dc6:	4b79      	ldr	r3, [pc, #484]	@ (8002fac <main+0x8a4>)
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	4b77      	ldr	r3, [pc, #476]	@ (8002fa8 <main+0x8a0>)
 8002dcc:	701a      	strb	r2, [r3, #0]
				}

				if(sTimer2GetFlag())
 8002dce:	f002 f84f 	bl	8004e70 <sTimer2GetFlag>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01c      	beq.n	8002e12 <main+0x70a>
				{
					static int counter = 0;
					counter += 1;
 8002dd8:	4b7c      	ldr	r3, [pc, #496]	@ (8002fcc <main+0x8c4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	4a7b      	ldr	r2, [pc, #492]	@ (8002fcc <main+0x8c4>)
 8002de0:	6013      	str	r3, [r2, #0]

					if(counter % 4 == 0)
 8002de2:	4b7a      	ldr	r3, [pc, #488]	@ (8002fcc <main+0x8c4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <main+0x6f4>
					{
						led7SegTurnOff(2);
 8002dee:	2002      	movs	r0, #2
 8002df0:	f7ff fc32 	bl	8002658 <led7SegTurnOff>
						led7SegTurnOff(3);
 8002df4:	2003      	movs	r0, #3
 8002df6:	f7ff fc2f 	bl	8002658 <led7SegTurnOff>
 8002dfa:	e00a      	b.n	8002e12 <main+0x70a>
					}
					else if(counter % 2 == 0)
 8002dfc:	4b73      	ldr	r3, [pc, #460]	@ (8002fcc <main+0x8c4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <main+0x70a>
					{
						displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8002e08:	4a6a      	ldr	r2, [pc, #424]	@ (8002fb4 <main+0x8ac>)
 8002e0a:	496b      	ldr	r1, [pc, #428]	@ (8002fb8 <main+0x8b0>)
 8002e0c:	4868      	ldr	r0, [pc, #416]	@ (8002fb0 <main+0x8a8>)
 8002e0e:	f001 fcbd 	bl	800478c <displayTimeLed7Seg>
					}
				}

				if(button_count[11] % 30 == 1) // check button is held 1.5 second
 8002e12:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd0 <main+0x8c8>)
 8002e14:	8ada      	ldrh	r2, [r3, #22]
 8002e16:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd4 <main+0x8cc>)
 8002e18:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1c:	0919      	lsrs	r1, r3, #4
 8002e1e:	460b      	mov	r3, r1
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a5b      	subs	r3, r3, r1
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d10a      	bne.n	8002e44 <main+0x73c>
				{
					current_mode_config = Mode_config_hour;
 8002e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8002fac <main+0x8a4>)
 8002e30:	2202      	movs	r2, #2
 8002e32:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 8002e34:	4b66      	ldr	r3, [pc, #408]	@ (8002fd0 <main+0x8c8>)
 8002e36:	8adb      	ldrh	r3, [r3, #22]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	4b64      	ldr	r3, [pc, #400]	@ (8002fd0 <main+0x8c8>)
 8002e3e:	82da      	strh	r2, [r3, #22]
					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, RED, BLACK);

					button_count[7] += 1;
				}

				break;
 8002e40:	f000 bdd6 	b.w	80039f0 <main+0x12e8>
				else if(button_count[15] % 30 == 1)
 8002e44:	4b62      	ldr	r3, [pc, #392]	@ (8002fd0 <main+0x8c8>)
 8002e46:	8bda      	ldrh	r2, [r3, #30]
 8002e48:	4b62      	ldr	r3, [pc, #392]	@ (8002fd4 <main+0x8cc>)
 8002e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4e:	0919      	lsrs	r1, r3, #4
 8002e50:	460b      	mov	r3, r1
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a5b      	subs	r3, r3, r1
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d10a      	bne.n	8002e76 <main+0x76e>
					current_mode_config = Mode_config_second;
 8002e60:	4b52      	ldr	r3, [pc, #328]	@ (8002fac <main+0x8a4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 8002e66:	4b5a      	ldr	r3, [pc, #360]	@ (8002fd0 <main+0x8c8>)
 8002e68:	8bdb      	ldrh	r3, [r3, #30]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	4b58      	ldr	r3, [pc, #352]	@ (8002fd0 <main+0x8c8>)
 8002e70:	83da      	strh	r2, [r3, #30]
				break;
 8002e72:	f000 bdbd 	b.w	80039f0 <main+0x12e8>
				else if(button_count[3] % 20 == 1)
 8002e76:	4b56      	ldr	r3, [pc, #344]	@ (8002fd0 <main+0x8c8>)
 8002e78:	88da      	ldrh	r2, [r3, #6]
 8002e7a:	4b57      	ldr	r3, [pc, #348]	@ (8002fd8 <main+0x8d0>)
 8002e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e80:	0919      	lsrs	r1, r3, #4
 8002e82:	460b      	mov	r3, r1
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d13d      	bne.n	8002f0e <main+0x806>
					increaseMin();
 8002e92:	f001 fd63 	bl	800495c <increaseMin>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f1a3 021e 	sub.w	r2, r3, #30
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	4b43      	ldr	r3, [pc, #268]	@ (8002fb0 <main+0x8a8>)
 8002ea2:	216e      	movs	r1, #110	@ 0x6e
 8002ea4:	2078      	movs	r0, #120	@ 0x78
 8002ea6:	f000 ff6b 	bl	8003d80 <displaySecClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, BLUE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002eb0:	231f      	movs	r3, #31
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb4 <main+0x8ac>)
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb8 <main+0x8b0>)
 8002eba:	216e      	movs	r1, #110	@ 0x6e
 8002ebc:	2078      	movs	r0, #120	@ 0x78
 8002ebe:	f001 f977 	bl	80041b0 <displayHourClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, RED);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002ec8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb8 <main+0x8b0>)
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	4b37      	ldr	r3, [pc, #220]	@ (8002fb0 <main+0x8a8>)
 8002ed4:	216e      	movs	r1, #110	@ 0x6e
 8002ed6:	2078      	movs	r0, #120	@ 0x78
 8002ed8:	f001 f84e 	bl	8003f78 <displayMinClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, RED, BLACK);
 8002edc:	2300      	movs	r3, #0
 8002ede:	9304      	str	r3, [sp, #16]
 8002ee0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002ee4:	9303      	str	r3, [sp, #12]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9302      	str	r3, [sp, #8]
 8002eea:	2320      	movs	r3, #32
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	4b31      	ldr	r3, [pc, #196]	@ (8002fb4 <main+0x8ac>)
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	4b31      	ldr	r3, [pc, #196]	@ (8002fb8 <main+0x8b0>)
 8002ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb0 <main+0x8a8>)
 8002ef6:	21f0      	movs	r1, #240	@ 0xf0
 8002ef8:	2078      	movs	r0, #120	@ 0x78
 8002efa:	f001 fa7d 	bl	80043f8 <displayTime>
					button_count[3] += 1;
 8002efe:	4b34      	ldr	r3, [pc, #208]	@ (8002fd0 <main+0x8c8>)
 8002f00:	88db      	ldrh	r3, [r3, #6]
 8002f02:	3301      	adds	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	4b32      	ldr	r3, [pc, #200]	@ (8002fd0 <main+0x8c8>)
 8002f08:	80da      	strh	r2, [r3, #6]
				break;
 8002f0a:	f000 bd71 	b.w	80039f0 <main+0x12e8>
				else if(button_count[7] % 20 == 1)
 8002f0e:	4b30      	ldr	r3, [pc, #192]	@ (8002fd0 <main+0x8c8>)
 8002f10:	89da      	ldrh	r2, [r3, #14]
 8002f12:	4b31      	ldr	r3, [pc, #196]	@ (8002fd8 <main+0x8d0>)
 8002f14:	fba3 1302 	umull	r1, r3, r3, r2
 8002f18:	0919      	lsrs	r1, r3, #4
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	f040 8562 	bne.w	80039f0 <main+0x12e8>
					decreaseMin();
 8002f2c:	f001 fd3c 	bl	80049a8 <decreaseMin>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f1a3 021e 	sub.w	r2, r3, #30
 8002f36:	2300      	movs	r3, #0
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <main+0x8a8>)
 8002f3c:	216e      	movs	r1, #110	@ 0x6e
 8002f3e:	2078      	movs	r0, #120	@ 0x78
 8002f40:	f000 ff1e 	bl	8003d80 <displaySecClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, BLUE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8002f4a:	231f      	movs	r3, #31
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <main+0x8ac>)
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <main+0x8b0>)
 8002f54:	216e      	movs	r1, #110	@ 0x6e
 8002f56:	2078      	movs	r0, #120	@ 0x78
 8002f58:	f001 f92a 	bl	80041b0 <displayHourClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, RED);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002f62:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	4b13      	ldr	r3, [pc, #76]	@ (8002fb8 <main+0x8b0>)
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <main+0x8a8>)
 8002f6e:	216e      	movs	r1, #110	@ 0x6e
 8002f70:	2078      	movs	r0, #120	@ 0x78
 8002f72:	f001 f801 	bl	8003f78 <displayMinClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, RED, BLACK);
 8002f76:	2300      	movs	r3, #0
 8002f78:	9304      	str	r3, [sp, #16]
 8002f7a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002f7e:	9303      	str	r3, [sp, #12]
 8002f80:	2300      	movs	r3, #0
 8002f82:	9302      	str	r3, [sp, #8]
 8002f84:	2320      	movs	r3, #32
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <main+0x8ac>)
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <main+0x8b0>)
 8002f8e:	4a08      	ldr	r2, [pc, #32]	@ (8002fb0 <main+0x8a8>)
 8002f90:	21f0      	movs	r1, #240	@ 0xf0
 8002f92:	2078      	movs	r0, #120	@ 0x78
 8002f94:	f001 fa30 	bl	80043f8 <displayTime>
					button_count[7] += 1;
 8002f98:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd0 <main+0x8c8>)
 8002f9a:	89db      	ldrh	r3, [r3, #14]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <main+0x8c8>)
 8002fa2:	81da      	strh	r2, [r3, #14]
				break;
 8002fa4:	f000 bd24 	b.w	80039f0 <main+0x12e8>
 8002fa8:	2000001c 	.word	0x2000001c
 8002fac:	20000132 	.word	0x20000132
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	20000002 	.word	0x20000002
 8002fb8:	20000001 	.word	0x20000001
 8002fbc:	20000006 	.word	0x20000006
 8002fc0:	20000005 	.word	0x20000005
 8002fc4:	20000004 	.word	0x20000004
 8002fc8:	20000003 	.word	0x20000003
 8002fcc:	20000138 	.word	0x20000138
 8002fd0:	20000048 	.word	0x20000048
 8002fd4:	88888889 	.word	0x88888889
 8002fd8:	cccccccd 	.word	0xcccccccd
			}
			case Mode_config_hour:
			{
				if(previous_mode_config != current_mode_config)
 8002fdc:	4ba6      	ldr	r3, [pc, #664]	@ (8003278 <main+0xb70>)
 8002fde:	781a      	ldrb	r2, [r3, #0]
 8002fe0:	4ba6      	ldr	r3, [pc, #664]	@ (800327c <main+0xb74>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d05a      	beq.n	800309e <main+0x996>
				{
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f1a3 021e 	sub.w	r2, r3, #30
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	4ba3      	ldr	r3, [pc, #652]	@ (8003280 <main+0xb78>)
 8002ff4:	216e      	movs	r1, #110	@ 0x6e
 8002ff6:	2078      	movs	r0, #120	@ 0x78
 8002ff8:	f000 fec2 	bl	8003d80 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8003002:	231f      	movs	r3, #31
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	4b9f      	ldr	r3, [pc, #636]	@ (8003284 <main+0xb7c>)
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	4b9d      	ldr	r3, [pc, #628]	@ (8003280 <main+0xb78>)
 800300c:	216e      	movs	r1, #110	@ 0x6e
 800300e:	2078      	movs	r0, #120	@ 0x78
 8003010:	f000 ffb2 	bl	8003f78 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 800301a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	4b99      	ldr	r3, [pc, #612]	@ (8003288 <main+0xb80>)
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	4b97      	ldr	r3, [pc, #604]	@ (8003284 <main+0xb7c>)
 8003026:	216e      	movs	r1, #110	@ 0x6e
 8003028:	2078      	movs	r0, #120	@ 0x78
 800302a:	f001 f8c1 	bl	80041b0 <displayHourClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, RED);
 800302e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003032:	9304      	str	r3, [sp, #16]
 8003034:	2300      	movs	r3, #0
 8003036:	9303      	str	r3, [sp, #12]
 8003038:	2300      	movs	r3, #0
 800303a:	9302      	str	r3, [sp, #8]
 800303c:	2320      	movs	r3, #32
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	4b91      	ldr	r3, [pc, #580]	@ (8003288 <main+0xb80>)
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4b8f      	ldr	r3, [pc, #572]	@ (8003284 <main+0xb7c>)
 8003046:	4a8e      	ldr	r2, [pc, #568]	@ (8003280 <main+0xb78>)
 8003048:	21f0      	movs	r1, #240	@ 0xf0
 800304a:	2078      	movs	r0, #120	@ 0x78
 800304c:	f001 f9d4 	bl	80043f8 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, DARKBLUE);
 8003050:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003054:	9304      	str	r3, [sp, #16]
 8003056:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800305a:	9303      	str	r3, [sp, #12]
 800305c:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003060:	9302      	str	r3, [sp, #8]
 8003062:	2318      	movs	r3, #24
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	4b89      	ldr	r3, [pc, #548]	@ (800328c <main+0xb84>)
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	4b89      	ldr	r3, [pc, #548]	@ (8003290 <main+0xb88>)
 800306c:	4a89      	ldr	r2, [pc, #548]	@ (8003294 <main+0xb8c>)
 800306e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003072:	2078      	movs	r0, #120	@ 0x78
 8003074:	f001 fa3e 	bl	80044f4 <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 8003078:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	2318      	movs	r3, #24
 8003080:	4a85      	ldr	r2, [pc, #532]	@ (8003298 <main+0xb90>)
 8003082:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8003086:	2014      	movs	r0, #20
 8003088:	f001 fad8 	bl	800463c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 800308c:	4a7e      	ldr	r2, [pc, #504]	@ (8003288 <main+0xb80>)
 800308e:	497d      	ldr	r1, [pc, #500]	@ (8003284 <main+0xb7c>)
 8003090:	487b      	ldr	r0, [pc, #492]	@ (8003280 <main+0xb78>)
 8003092:	f001 fb7b 	bl	800478c <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 8003096:	4b79      	ldr	r3, [pc, #484]	@ (800327c <main+0xb74>)
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	4b77      	ldr	r3, [pc, #476]	@ (8003278 <main+0xb70>)
 800309c:	701a      	strb	r2, [r3, #0]
				}

				if(sTimer2GetFlag())
 800309e:	f001 fee7 	bl	8004e70 <sTimer2GetFlag>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01c      	beq.n	80030e2 <main+0x9da>
				{
					static int counter = 0;
					counter += 1;
 80030a8:	4b7c      	ldr	r3, [pc, #496]	@ (800329c <main+0xb94>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3301      	adds	r3, #1
 80030ae:	4a7b      	ldr	r2, [pc, #492]	@ (800329c <main+0xb94>)
 80030b0:	6013      	str	r3, [r2, #0]

					if(counter % 4 == 0)
 80030b2:	4b7a      	ldr	r3, [pc, #488]	@ (800329c <main+0xb94>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <main+0x9c4>
					{
						led7SegTurnOff(0);
 80030be:	2000      	movs	r0, #0
 80030c0:	f7ff faca 	bl	8002658 <led7SegTurnOff>
						led7SegTurnOff(1);
 80030c4:	2001      	movs	r0, #1
 80030c6:	f7ff fac7 	bl	8002658 <led7SegTurnOff>
 80030ca:	e00a      	b.n	80030e2 <main+0x9da>
					}
					else if(counter % 2 == 0)
 80030cc:	4b73      	ldr	r3, [pc, #460]	@ (800329c <main+0xb94>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d104      	bne.n	80030e2 <main+0x9da>
					{
						displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 80030d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003288 <main+0xb80>)
 80030da:	496a      	ldr	r1, [pc, #424]	@ (8003284 <main+0xb7c>)
 80030dc:	4868      	ldr	r0, [pc, #416]	@ (8003280 <main+0xb78>)
 80030de:	f001 fb55 	bl	800478c <displayTimeLed7Seg>
					}
				}

				if(button_count[11] % 30 == 1) // check button is held 1.5 second
 80030e2:	4b6f      	ldr	r3, [pc, #444]	@ (80032a0 <main+0xb98>)
 80030e4:	8ada      	ldrh	r2, [r3, #22]
 80030e6:	4b6f      	ldr	r3, [pc, #444]	@ (80032a4 <main+0xb9c>)
 80030e8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ec:	0919      	lsrs	r1, r3, #4
 80030ee:	460b      	mov	r3, r1
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a5b      	subs	r3, r3, r1
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d10a      	bne.n	8003114 <main+0xa0c>
				{
					current_mode_config = Mode_config_day;
 80030fe:	4b5f      	ldr	r3, [pc, #380]	@ (800327c <main+0xb74>)
 8003100:	2203      	movs	r2, #3
 8003102:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 8003104:	4b66      	ldr	r3, [pc, #408]	@ (80032a0 <main+0xb98>)
 8003106:	8adb      	ldrh	r3, [r3, #22]
 8003108:	3301      	adds	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	4b64      	ldr	r3, [pc, #400]	@ (80032a0 <main+0xb98>)
 800310e:	82da      	strh	r2, [r3, #22]
					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, RED);

					button_count[7] += 1;
				}

				break;
 8003110:	f000 bc70 	b.w	80039f4 <main+0x12ec>
				else if(button_count[15] % 30 == 1)
 8003114:	4b62      	ldr	r3, [pc, #392]	@ (80032a0 <main+0xb98>)
 8003116:	8bda      	ldrh	r2, [r3, #30]
 8003118:	4b62      	ldr	r3, [pc, #392]	@ (80032a4 <main+0xb9c>)
 800311a:	fba3 1302 	umull	r1, r3, r3, r2
 800311e:	0919      	lsrs	r1, r3, #4
 8003120:	460b      	mov	r3, r1
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a5b      	subs	r3, r3, r1
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10a      	bne.n	8003146 <main+0xa3e>
					current_mode_config = Mode_config_minute;
 8003130:	4b52      	ldr	r3, [pc, #328]	@ (800327c <main+0xb74>)
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 8003136:	4b5a      	ldr	r3, [pc, #360]	@ (80032a0 <main+0xb98>)
 8003138:	8bdb      	ldrh	r3, [r3, #30]
 800313a:	3301      	adds	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	4b58      	ldr	r3, [pc, #352]	@ (80032a0 <main+0xb98>)
 8003140:	83da      	strh	r2, [r3, #30]
				break;
 8003142:	f000 bc57 	b.w	80039f4 <main+0x12ec>
				else if(button_count[3] % 20 == 1) // check button is held 1 second
 8003146:	4b56      	ldr	r3, [pc, #344]	@ (80032a0 <main+0xb98>)
 8003148:	88da      	ldrh	r2, [r3, #6]
 800314a:	4b57      	ldr	r3, [pc, #348]	@ (80032a8 <main+0xba0>)
 800314c:	fba3 1302 	umull	r1, r3, r3, r2
 8003150:	0919      	lsrs	r1, r3, #4
 8003152:	460b      	mov	r3, r1
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d13d      	bne.n	80031de <main+0xad6>
					increaseHour();
 8003162:	f001 fc47 	bl	80049f4 <increaseHour>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f1a3 021e 	sub.w	r2, r3, #30
 800316c:	2300      	movs	r3, #0
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	4b43      	ldr	r3, [pc, #268]	@ (8003280 <main+0xb78>)
 8003172:	216e      	movs	r1, #110	@ 0x6e
 8003174:	2078      	movs	r0, #120	@ 0x78
 8003176:	f000 fe03 	bl	8003d80 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8003180:	231f      	movs	r3, #31
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	4b3f      	ldr	r3, [pc, #252]	@ (8003284 <main+0xb7c>)
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4b3d      	ldr	r3, [pc, #244]	@ (8003280 <main+0xb78>)
 800318a:	216e      	movs	r1, #110	@ 0x6e
 800318c:	2078      	movs	r0, #120	@ 0x78
 800318e:	f000 fef3 	bl	8003f78 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8003198:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	4b3a      	ldr	r3, [pc, #232]	@ (8003288 <main+0xb80>)
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	4b38      	ldr	r3, [pc, #224]	@ (8003284 <main+0xb7c>)
 80031a4:	216e      	movs	r1, #110	@ 0x6e
 80031a6:	2078      	movs	r0, #120	@ 0x78
 80031a8:	f001 f802 	bl	80041b0 <displayHourClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, RED);
 80031ac:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80031b0:	9304      	str	r3, [sp, #16]
 80031b2:	2300      	movs	r3, #0
 80031b4:	9303      	str	r3, [sp, #12]
 80031b6:	2300      	movs	r3, #0
 80031b8:	9302      	str	r3, [sp, #8]
 80031ba:	2320      	movs	r3, #32
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	4b32      	ldr	r3, [pc, #200]	@ (8003288 <main+0xb80>)
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	4b30      	ldr	r3, [pc, #192]	@ (8003284 <main+0xb7c>)
 80031c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003280 <main+0xb78>)
 80031c6:	21f0      	movs	r1, #240	@ 0xf0
 80031c8:	2078      	movs	r0, #120	@ 0x78
 80031ca:	f001 f915 	bl	80043f8 <displayTime>
					button_count[3] += 1;
 80031ce:	4b34      	ldr	r3, [pc, #208]	@ (80032a0 <main+0xb98>)
 80031d0:	88db      	ldrh	r3, [r3, #6]
 80031d2:	3301      	adds	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	4b32      	ldr	r3, [pc, #200]	@ (80032a0 <main+0xb98>)
 80031d8:	80da      	strh	r2, [r3, #6]
				break;
 80031da:	f000 bc0b 	b.w	80039f4 <main+0x12ec>
				else if(button_count[7] % 20 == 1)
 80031de:	4b30      	ldr	r3, [pc, #192]	@ (80032a0 <main+0xb98>)
 80031e0:	89da      	ldrh	r2, [r3, #14]
 80031e2:	4b31      	ldr	r3, [pc, #196]	@ (80032a8 <main+0xba0>)
 80031e4:	fba3 1302 	umull	r1, r3, r3, r2
 80031e8:	0919      	lsrs	r1, r3, #4
 80031ea:	460b      	mov	r3, r1
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	f040 83fc 	bne.w	80039f4 <main+0x12ec>
					decreaseHour();
 80031fc:	f001 fc12 	bl	8004a24 <decreaseHour>
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f1a3 021e 	sub.w	r2, r3, #30
 8003206:	2300      	movs	r3, #0
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	4b1d      	ldr	r3, [pc, #116]	@ (8003280 <main+0xb78>)
 800320c:	216e      	movs	r1, #110	@ 0x6e
 800320e:	2078      	movs	r0, #120	@ 0x78
 8003210:	f000 fdb6 	bl	8003d80 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 800321a:	231f      	movs	r3, #31
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	4b19      	ldr	r3, [pc, #100]	@ (8003284 <main+0xb7c>)
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	4b17      	ldr	r3, [pc, #92]	@ (8003280 <main+0xb78>)
 8003224:	216e      	movs	r1, #110	@ 0x6e
 8003226:	2078      	movs	r0, #120	@ 0x78
 8003228:	f000 fea6 	bl	8003f78 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8003232:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	4b13      	ldr	r3, [pc, #76]	@ (8003288 <main+0xb80>)
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	4b11      	ldr	r3, [pc, #68]	@ (8003284 <main+0xb7c>)
 800323e:	216e      	movs	r1, #110	@ 0x6e
 8003240:	2078      	movs	r0, #120	@ 0x78
 8003242:	f000 ffb5 	bl	80041b0 <displayHourClockwise>
					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, RED);
 8003246:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800324a:	9304      	str	r3, [sp, #16]
 800324c:	2300      	movs	r3, #0
 800324e:	9303      	str	r3, [sp, #12]
 8003250:	2300      	movs	r3, #0
 8003252:	9302      	str	r3, [sp, #8]
 8003254:	2320      	movs	r3, #32
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <main+0xb80>)
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <main+0xb7c>)
 800325e:	4a08      	ldr	r2, [pc, #32]	@ (8003280 <main+0xb78>)
 8003260:	21f0      	movs	r1, #240	@ 0xf0
 8003262:	2078      	movs	r0, #120	@ 0x78
 8003264:	f001 f8c8 	bl	80043f8 <displayTime>
					button_count[7] += 1;
 8003268:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <main+0xb98>)
 800326a:	89db      	ldrh	r3, [r3, #14]
 800326c:	3301      	adds	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <main+0xb98>)
 8003272:	81da      	strh	r2, [r3, #14]
				break;
 8003274:	e3be      	b.n	80039f4 <main+0x12ec>
 8003276:	bf00      	nop
 8003278:	2000001c 	.word	0x2000001c
 800327c:	20000132 	.word	0x20000132
 8003280:	20000000 	.word	0x20000000
 8003284:	20000001 	.word	0x20000001
 8003288:	20000002 	.word	0x20000002
 800328c:	20000006 	.word	0x20000006
 8003290:	20000005 	.word	0x20000005
 8003294:	20000004 	.word	0x20000004
 8003298:	20000003 	.word	0x20000003
 800329c:	2000013c 	.word	0x2000013c
 80032a0:	20000048 	.word	0x20000048
 80032a4:	88888889 	.word	0x88888889
 80032a8:	cccccccd 	.word	0xcccccccd
			}
			case Mode_config_day:
			{
				if(previous_mode_config != current_mode_config)
 80032ac:	4ba5      	ldr	r3, [pc, #660]	@ (8003544 <main+0xe3c>)
 80032ae:	781a      	ldrb	r2, [r3, #0]
 80032b0:	4ba5      	ldr	r3, [pc, #660]	@ (8003548 <main+0xe40>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d059      	beq.n	800336c <main+0xc64>
				{
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f1a3 021e 	sub.w	r2, r3, #30
 80032be:	2300      	movs	r3, #0
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	4ba2      	ldr	r3, [pc, #648]	@ (800354c <main+0xe44>)
 80032c4:	216e      	movs	r1, #110	@ 0x6e
 80032c6:	2078      	movs	r0, #120	@ 0x78
 80032c8:	f000 fd5a 	bl	8003d80 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 80032d2:	231f      	movs	r3, #31
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	4b9e      	ldr	r3, [pc, #632]	@ (8003550 <main+0xe48>)
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	4b9c      	ldr	r3, [pc, #624]	@ (800354c <main+0xe44>)
 80032dc:	216e      	movs	r1, #110	@ 0x6e
 80032de:	2078      	movs	r0, #120	@ 0x78
 80032e0:	f000 fe4a 	bl	8003f78 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 80032ea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	4b98      	ldr	r3, [pc, #608]	@ (8003554 <main+0xe4c>)
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	4b96      	ldr	r3, [pc, #600]	@ (8003550 <main+0xe48>)
 80032f6:	216e      	movs	r1, #110	@ 0x6e
 80032f8:	2078      	movs	r0, #120	@ 0x78
 80032fa:	f000 ff59 	bl	80041b0 <displayHourClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, BLACK);
 80032fe:	2300      	movs	r3, #0
 8003300:	9304      	str	r3, [sp, #16]
 8003302:	2300      	movs	r3, #0
 8003304:	9303      	str	r3, [sp, #12]
 8003306:	2300      	movs	r3, #0
 8003308:	9302      	str	r3, [sp, #8]
 800330a:	2320      	movs	r3, #32
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	4b91      	ldr	r3, [pc, #580]	@ (8003554 <main+0xe4c>)
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	4b8f      	ldr	r3, [pc, #572]	@ (8003550 <main+0xe48>)
 8003314:	4a8d      	ldr	r2, [pc, #564]	@ (800354c <main+0xe44>)
 8003316:	21f0      	movs	r1, #240	@ 0xf0
 8003318:	2078      	movs	r0, #120	@ 0x78
 800331a:	f001 f86d 	bl	80043f8 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, DARKBLUE);
 800331e:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003322:	9304      	str	r3, [sp, #16]
 8003324:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003328:	9303      	str	r3, [sp, #12]
 800332a:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800332e:	9302      	str	r3, [sp, #8]
 8003330:	2318      	movs	r3, #24
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	4b88      	ldr	r3, [pc, #544]	@ (8003558 <main+0xe50>)
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	4b88      	ldr	r3, [pc, #544]	@ (800355c <main+0xe54>)
 800333a:	4a89      	ldr	r2, [pc, #548]	@ (8003560 <main+0xe58>)
 800333c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003340:	2078      	movs	r0, #120	@ 0x78
 8003342:	f001 f8d7 	bl	80044f4 <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, RED);
 8003346:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2318      	movs	r3, #24
 800334e:	4a85      	ldr	r2, [pc, #532]	@ (8003564 <main+0xe5c>)
 8003350:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8003354:	2014      	movs	r0, #20
 8003356:	f001 f971 	bl	800463c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 800335a:	4a7e      	ldr	r2, [pc, #504]	@ (8003554 <main+0xe4c>)
 800335c:	497c      	ldr	r1, [pc, #496]	@ (8003550 <main+0xe48>)
 800335e:	487b      	ldr	r0, [pc, #492]	@ (800354c <main+0xe44>)
 8003360:	f001 fa14 	bl	800478c <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 8003364:	4b78      	ldr	r3, [pc, #480]	@ (8003548 <main+0xe40>)
 8003366:	781a      	ldrb	r2, [r3, #0]
 8003368:	4b76      	ldr	r3, [pc, #472]	@ (8003544 <main+0xe3c>)
 800336a:	701a      	strb	r2, [r3, #0]
				}

				if(button_count[11] % 30 == 1) // check button is held 1.5 second
 800336c:	4b7e      	ldr	r3, [pc, #504]	@ (8003568 <main+0xe60>)
 800336e:	8ada      	ldrh	r2, [r3, #22]
 8003370:	4b7e      	ldr	r3, [pc, #504]	@ (800356c <main+0xe64>)
 8003372:	fba3 1302 	umull	r1, r3, r3, r2
 8003376:	0919      	lsrs	r1, r3, #4
 8003378:	460b      	mov	r3, r1
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a5b      	subs	r3, r3, r1
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d109      	bne.n	800339c <main+0xc94>
				{
					current_mode_config = Mode_config_date;
 8003388:	4b6f      	ldr	r3, [pc, #444]	@ (8003548 <main+0xe40>)
 800338a:	2204      	movs	r2, #4
 800338c:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 800338e:	4b76      	ldr	r3, [pc, #472]	@ (8003568 <main+0xe60>)
 8003390:	8adb      	ldrh	r3, [r3, #22]
 8003392:	3301      	adds	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	4b74      	ldr	r3, [pc, #464]	@ (8003568 <main+0xe60>)
 8003398:	82da      	strh	r2, [r3, #22]

					button_count[7] += 1;
				}


				break;
 800339a:	e32d      	b.n	80039f8 <main+0x12f0>
				else if(button_count[15] % 30 == 1)
 800339c:	4b72      	ldr	r3, [pc, #456]	@ (8003568 <main+0xe60>)
 800339e:	8bda      	ldrh	r2, [r3, #30]
 80033a0:	4b72      	ldr	r3, [pc, #456]	@ (800356c <main+0xe64>)
 80033a2:	fba3 1302 	umull	r1, r3, r3, r2
 80033a6:	0919      	lsrs	r1, r3, #4
 80033a8:	460b      	mov	r3, r1
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a5b      	subs	r3, r3, r1
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d109      	bne.n	80033cc <main+0xcc4>
					current_mode_config = Mode_config_hour;
 80033b8:	4b63      	ldr	r3, [pc, #396]	@ (8003548 <main+0xe40>)
 80033ba:	2202      	movs	r2, #2
 80033bc:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 80033be:	4b6a      	ldr	r3, [pc, #424]	@ (8003568 <main+0xe60>)
 80033c0:	8bdb      	ldrh	r3, [r3, #30]
 80033c2:	3301      	adds	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	4b68      	ldr	r3, [pc, #416]	@ (8003568 <main+0xe60>)
 80033c8:	83da      	strh	r2, [r3, #30]
				break;
 80033ca:	e315      	b.n	80039f8 <main+0x12f0>
				else if(button_count[3] % 20 == 1) // check button is held 1 second
 80033cc:	4b66      	ldr	r3, [pc, #408]	@ (8003568 <main+0xe60>)
 80033ce:	88da      	ldrh	r2, [r3, #6]
 80033d0:	4b67      	ldr	r3, [pc, #412]	@ (8003570 <main+0xe68>)
 80033d2:	fba3 1302 	umull	r1, r3, r3, r2
 80033d6:	0919      	lsrs	r1, r3, #4
 80033d8:	460b      	mov	r3, r1
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d112      	bne.n	800340e <main+0xd06>
					increaseDay();
 80033e8:	f001 fb34 	bl	8004a54 <increaseDay>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, RED);
 80033ec:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2318      	movs	r3, #24
 80033f4:	4a5b      	ldr	r2, [pc, #364]	@ (8003564 <main+0xe5c>)
 80033f6:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80033fa:	2014      	movs	r0, #20
 80033fc:	f001 f91e 	bl	800463c <displayDay>
					button_count[3] += 1;
 8003400:	4b59      	ldr	r3, [pc, #356]	@ (8003568 <main+0xe60>)
 8003402:	88db      	ldrh	r3, [r3, #6]
 8003404:	3301      	adds	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	4b57      	ldr	r3, [pc, #348]	@ (8003568 <main+0xe60>)
 800340a:	80da      	strh	r2, [r3, #6]
				break;
 800340c:	e2f4      	b.n	80039f8 <main+0x12f0>
				else if(button_count[7] % 20 == 1)
 800340e:	4b56      	ldr	r3, [pc, #344]	@ (8003568 <main+0xe60>)
 8003410:	89da      	ldrh	r2, [r3, #14]
 8003412:	4b57      	ldr	r3, [pc, #348]	@ (8003570 <main+0xe68>)
 8003414:	fba3 1302 	umull	r1, r3, r3, r2
 8003418:	0919      	lsrs	r1, r3, #4
 800341a:	460b      	mov	r3, r1
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b01      	cmp	r3, #1
 8003428:	f040 82e6 	bne.w	80039f8 <main+0x12f0>
					decreaseDay();
 800342c:	f001 fb2a 	bl	8004a84 <decreaseDay>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, RED);
 8003430:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	2318      	movs	r3, #24
 8003438:	4a4a      	ldr	r2, [pc, #296]	@ (8003564 <main+0xe5c>)
 800343a:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 800343e:	2014      	movs	r0, #20
 8003440:	f001 f8fc 	bl	800463c <displayDay>
					button_count[7] += 1;
 8003444:	4b48      	ldr	r3, [pc, #288]	@ (8003568 <main+0xe60>)
 8003446:	89db      	ldrh	r3, [r3, #14]
 8003448:	3301      	adds	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	4b46      	ldr	r3, [pc, #280]	@ (8003568 <main+0xe60>)
 800344e:	81da      	strh	r2, [r3, #14]
				break;
 8003450:	e2d2      	b.n	80039f8 <main+0x12f0>
			}
			case Mode_config_date:
			{
				if(previous_mode_config != current_mode_config)
 8003452:	4b3c      	ldr	r3, [pc, #240]	@ (8003544 <main+0xe3c>)
 8003454:	781a      	ldrb	r2, [r3, #0]
 8003456:	4b3c      	ldr	r3, [pc, #240]	@ (8003548 <main+0xe40>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d059      	beq.n	8003512 <main+0xe0a>
				{
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f1a3 021e 	sub.w	r2, r3, #30
 8003464:	2300      	movs	r3, #0
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4b38      	ldr	r3, [pc, #224]	@ (800354c <main+0xe44>)
 800346a:	216e      	movs	r1, #110	@ 0x6e
 800346c:	2078      	movs	r0, #120	@ 0x78
 800346e:	f000 fc87 	bl	8003d80 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8003478:	231f      	movs	r3, #31
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	4b34      	ldr	r3, [pc, #208]	@ (8003550 <main+0xe48>)
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	4b32      	ldr	r3, [pc, #200]	@ (800354c <main+0xe44>)
 8003482:	216e      	movs	r1, #110	@ 0x6e
 8003484:	2078      	movs	r0, #120	@ 0x78
 8003486:	f000 fd77 	bl	8003f78 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8003490:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	4b2f      	ldr	r3, [pc, #188]	@ (8003554 <main+0xe4c>)
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	4b2d      	ldr	r3, [pc, #180]	@ (8003550 <main+0xe48>)
 800349c:	216e      	movs	r1, #110	@ 0x6e
 800349e:	2078      	movs	r0, #120	@ 0x78
 80034a0:	f000 fe86 	bl	80041b0 <displayHourClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, BLACK);
 80034a4:	2300      	movs	r3, #0
 80034a6:	9304      	str	r3, [sp, #16]
 80034a8:	2300      	movs	r3, #0
 80034aa:	9303      	str	r3, [sp, #12]
 80034ac:	2300      	movs	r3, #0
 80034ae:	9302      	str	r3, [sp, #8]
 80034b0:	2320      	movs	r3, #32
 80034b2:	9301      	str	r3, [sp, #4]
 80034b4:	4b27      	ldr	r3, [pc, #156]	@ (8003554 <main+0xe4c>)
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4b25      	ldr	r3, [pc, #148]	@ (8003550 <main+0xe48>)
 80034ba:	4a24      	ldr	r2, [pc, #144]	@ (800354c <main+0xe44>)
 80034bc:	21f0      	movs	r1, #240	@ 0xf0
 80034be:	2078      	movs	r0, #120	@ 0x78
 80034c0:	f000 ff9a 	bl	80043f8 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, RED, DARKBLUE, DARKBLUE);
 80034c4:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80034c8:	9304      	str	r3, [sp, #16]
 80034ca:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80034ce:	9303      	str	r3, [sp, #12]
 80034d0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80034d4:	9302      	str	r3, [sp, #8]
 80034d6:	2318      	movs	r3, #24
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	4b1f      	ldr	r3, [pc, #124]	@ (8003558 <main+0xe50>)
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	4b1f      	ldr	r3, [pc, #124]	@ (800355c <main+0xe54>)
 80034e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003560 <main+0xe58>)
 80034e2:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80034e6:	2078      	movs	r0, #120	@ 0x78
 80034e8:	f001 f804 	bl	80044f4 <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 80034ec:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2318      	movs	r3, #24
 80034f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003564 <main+0xe5c>)
 80034f6:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80034fa:	2014      	movs	r0, #20
 80034fc:	f001 f89e 	bl	800463c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8003500:	4a14      	ldr	r2, [pc, #80]	@ (8003554 <main+0xe4c>)
 8003502:	4913      	ldr	r1, [pc, #76]	@ (8003550 <main+0xe48>)
 8003504:	4811      	ldr	r0, [pc, #68]	@ (800354c <main+0xe44>)
 8003506:	f001 f941 	bl	800478c <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 800350a:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <main+0xe40>)
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <main+0xe3c>)
 8003510:	701a      	strb	r2, [r3, #0]
				}

				if(button_count[11] % 30 == 1) // check button is held 1.5 second
 8003512:	4b15      	ldr	r3, [pc, #84]	@ (8003568 <main+0xe60>)
 8003514:	8ada      	ldrh	r2, [r3, #22]
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <main+0xe64>)
 8003518:	fba3 1302 	umull	r1, r3, r3, r2
 800351c:	0919      	lsrs	r1, r3, #4
 800351e:	460b      	mov	r3, r1
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a5b      	subs	r3, r3, r1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d122      	bne.n	8003574 <main+0xe6c>
				{
					current_mode_config = Mode_config_month;
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <main+0xe40>)
 8003530:	2205      	movs	r2, #5
 8003532:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 8003534:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <main+0xe60>)
 8003536:	8adb      	ldrh	r3, [r3, #22]
 8003538:	3301      	adds	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <main+0xe60>)
 800353e:	82da      	strh	r2, [r3, #22]
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, RED, DARKBLUE, DARKBLUE);

					button_count[7] += 1;
				}

				break;
 8003540:	e25c      	b.n	80039fc <main+0x12f4>
 8003542:	bf00      	nop
 8003544:	2000001c 	.word	0x2000001c
 8003548:	20000132 	.word	0x20000132
 800354c:	20000000 	.word	0x20000000
 8003550:	20000001 	.word	0x20000001
 8003554:	20000002 	.word	0x20000002
 8003558:	20000006 	.word	0x20000006
 800355c:	20000005 	.word	0x20000005
 8003560:	20000004 	.word	0x20000004
 8003564:	20000003 	.word	0x20000003
 8003568:	20000048 	.word	0x20000048
 800356c:	88888889 	.word	0x88888889
 8003570:	cccccccd 	.word	0xcccccccd
				else if(button_count[15] % 30 == 1)
 8003574:	4baa      	ldr	r3, [pc, #680]	@ (8003820 <main+0x1118>)
 8003576:	8bda      	ldrh	r2, [r3, #30]
 8003578:	4baa      	ldr	r3, [pc, #680]	@ (8003824 <main+0x111c>)
 800357a:	fba3 1302 	umull	r1, r3, r3, r2
 800357e:	0919      	lsrs	r1, r3, #4
 8003580:	460b      	mov	r3, r1
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a5b      	subs	r3, r3, r1
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d109      	bne.n	80035a4 <main+0xe9c>
					current_mode_config = Mode_config_day;
 8003590:	4ba5      	ldr	r3, [pc, #660]	@ (8003828 <main+0x1120>)
 8003592:	2203      	movs	r2, #3
 8003594:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 8003596:	4ba2      	ldr	r3, [pc, #648]	@ (8003820 <main+0x1118>)
 8003598:	8bdb      	ldrh	r3, [r3, #30]
 800359a:	3301      	adds	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	4ba0      	ldr	r3, [pc, #640]	@ (8003820 <main+0x1118>)
 80035a0:	83da      	strh	r2, [r3, #30]
				break;
 80035a2:	e22b      	b.n	80039fc <main+0x12f4>
				else if(button_count[3] % 20 == 1) // check button is held 1 second
 80035a4:	4b9e      	ldr	r3, [pc, #632]	@ (8003820 <main+0x1118>)
 80035a6:	88da      	ldrh	r2, [r3, #6]
 80035a8:	4ba0      	ldr	r3, [pc, #640]	@ (800382c <main+0x1124>)
 80035aa:	fba3 1302 	umull	r1, r3, r3, r2
 80035ae:	0919      	lsrs	r1, r3, #4
 80035b0:	460b      	mov	r3, r1
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d11c      	bne.n	80035fa <main+0xef2>
					increaseDate();
 80035c0:	f001 fa78 	bl	8004ab4 <increaseDate>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, RED, DARKBLUE, DARKBLUE);
 80035c4:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80035c8:	9304      	str	r3, [sp, #16]
 80035ca:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80035ce:	9303      	str	r3, [sp, #12]
 80035d0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80035d4:	9302      	str	r3, [sp, #8]
 80035d6:	2318      	movs	r3, #24
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	4b95      	ldr	r3, [pc, #596]	@ (8003830 <main+0x1128>)
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	4b95      	ldr	r3, [pc, #596]	@ (8003834 <main+0x112c>)
 80035e0:	4a95      	ldr	r2, [pc, #596]	@ (8003838 <main+0x1130>)
 80035e2:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80035e6:	2078      	movs	r0, #120	@ 0x78
 80035e8:	f000 ff84 	bl	80044f4 <displayDate>
					button_count[3] += 1;
 80035ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003820 <main+0x1118>)
 80035ee:	88db      	ldrh	r3, [r3, #6]
 80035f0:	3301      	adds	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003820 <main+0x1118>)
 80035f6:	80da      	strh	r2, [r3, #6]
				break;
 80035f8:	e200      	b.n	80039fc <main+0x12f4>
				else if(button_count[7] % 20 == 1)
 80035fa:	4b89      	ldr	r3, [pc, #548]	@ (8003820 <main+0x1118>)
 80035fc:	89da      	ldrh	r2, [r3, #14]
 80035fe:	4b8b      	ldr	r3, [pc, #556]	@ (800382c <main+0x1124>)
 8003600:	fba3 1302 	umull	r1, r3, r3, r2
 8003604:	0919      	lsrs	r1, r3, #4
 8003606:	460b      	mov	r3, r1
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	f040 81f2 	bne.w	80039fc <main+0x12f4>
					decreaseDate();
 8003618:	f001 fa84 	bl	8004b24 <decreaseDate>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, RED, DARKBLUE, DARKBLUE);
 800361c:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003620:	9304      	str	r3, [sp, #16]
 8003622:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003626:	9303      	str	r3, [sp, #12]
 8003628:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800362c:	9302      	str	r3, [sp, #8]
 800362e:	2318      	movs	r3, #24
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	4b7f      	ldr	r3, [pc, #508]	@ (8003830 <main+0x1128>)
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	4b7f      	ldr	r3, [pc, #508]	@ (8003834 <main+0x112c>)
 8003638:	4a7f      	ldr	r2, [pc, #508]	@ (8003838 <main+0x1130>)
 800363a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800363e:	2078      	movs	r0, #120	@ 0x78
 8003640:	f000 ff58 	bl	80044f4 <displayDate>
					button_count[7] += 1;
 8003644:	4b76      	ldr	r3, [pc, #472]	@ (8003820 <main+0x1118>)
 8003646:	89db      	ldrh	r3, [r3, #14]
 8003648:	3301      	adds	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	4b74      	ldr	r3, [pc, #464]	@ (8003820 <main+0x1118>)
 800364e:	81da      	strh	r2, [r3, #14]
				break;
 8003650:	e1d4      	b.n	80039fc <main+0x12f4>
			}
			case Mode_config_month:
			{
				if(previous_mode_config != current_mode_config)
 8003652:	4b7a      	ldr	r3, [pc, #488]	@ (800383c <main+0x1134>)
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	4b74      	ldr	r3, [pc, #464]	@ (8003828 <main+0x1120>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d059      	beq.n	8003712 <main+0x100a>
				{
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f1a3 021e 	sub.w	r2, r3, #30
 8003664:	2300      	movs	r3, #0
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	4b75      	ldr	r3, [pc, #468]	@ (8003840 <main+0x1138>)
 800366a:	216e      	movs	r1, #110	@ 0x6e
 800366c:	2078      	movs	r0, #120	@ 0x78
 800366e:	f000 fb87 	bl	8003d80 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8003678:	231f      	movs	r3, #31
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	4b71      	ldr	r3, [pc, #452]	@ (8003844 <main+0x113c>)
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	4b6f      	ldr	r3, [pc, #444]	@ (8003840 <main+0x1138>)
 8003682:	216e      	movs	r1, #110	@ 0x6e
 8003684:	2078      	movs	r0, #120	@ 0x78
 8003686:	f000 fc77 	bl	8003f78 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 8003690:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	4b6c      	ldr	r3, [pc, #432]	@ (8003848 <main+0x1140>)
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	4b6a      	ldr	r3, [pc, #424]	@ (8003844 <main+0x113c>)
 800369c:	216e      	movs	r1, #110	@ 0x6e
 800369e:	2078      	movs	r0, #120	@ 0x78
 80036a0:	f000 fd86 	bl	80041b0 <displayHourClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, BLACK);
 80036a4:	2300      	movs	r3, #0
 80036a6:	9304      	str	r3, [sp, #16]
 80036a8:	2300      	movs	r3, #0
 80036aa:	9303      	str	r3, [sp, #12]
 80036ac:	2300      	movs	r3, #0
 80036ae:	9302      	str	r3, [sp, #8]
 80036b0:	2320      	movs	r3, #32
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	4b64      	ldr	r3, [pc, #400]	@ (8003848 <main+0x1140>)
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	4b62      	ldr	r3, [pc, #392]	@ (8003844 <main+0x113c>)
 80036ba:	4a61      	ldr	r2, [pc, #388]	@ (8003840 <main+0x1138>)
 80036bc:	21f0      	movs	r1, #240	@ 0xf0
 80036be:	2078      	movs	r0, #120	@ 0x78
 80036c0:	f000 fe9a 	bl	80043f8 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, RED, DARKBLUE);
 80036c4:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80036ce:	9303      	str	r3, [sp, #12]
 80036d0:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80036d4:	9302      	str	r3, [sp, #8]
 80036d6:	2318      	movs	r3, #24
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	4b55      	ldr	r3, [pc, #340]	@ (8003830 <main+0x1128>)
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	4b55      	ldr	r3, [pc, #340]	@ (8003834 <main+0x112c>)
 80036e0:	4a55      	ldr	r2, [pc, #340]	@ (8003838 <main+0x1130>)
 80036e2:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80036e6:	2078      	movs	r0, #120	@ 0x78
 80036e8:	f000 ff04 	bl	80044f4 <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 80036ec:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2318      	movs	r3, #24
 80036f4:	4a55      	ldr	r2, [pc, #340]	@ (800384c <main+0x1144>)
 80036f6:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80036fa:	2014      	movs	r0, #20
 80036fc:	f000 ff9e 	bl	800463c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 8003700:	4a51      	ldr	r2, [pc, #324]	@ (8003848 <main+0x1140>)
 8003702:	4950      	ldr	r1, [pc, #320]	@ (8003844 <main+0x113c>)
 8003704:	484e      	ldr	r0, [pc, #312]	@ (8003840 <main+0x1138>)
 8003706:	f001 f841 	bl	800478c <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 800370a:	4b47      	ldr	r3, [pc, #284]	@ (8003828 <main+0x1120>)
 800370c:	781a      	ldrb	r2, [r3, #0]
 800370e:	4b4b      	ldr	r3, [pc, #300]	@ (800383c <main+0x1134>)
 8003710:	701a      	strb	r2, [r3, #0]
				}

				if(button_count[11] % 30 == 1) // check button is held 1.5 second
 8003712:	4b43      	ldr	r3, [pc, #268]	@ (8003820 <main+0x1118>)
 8003714:	8ada      	ldrh	r2, [r3, #22]
 8003716:	4b43      	ldr	r3, [pc, #268]	@ (8003824 <main+0x111c>)
 8003718:	fba3 1302 	umull	r1, r3, r3, r2
 800371c:	0919      	lsrs	r1, r3, #4
 800371e:	460b      	mov	r3, r1
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a5b      	subs	r3, r3, r1
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d109      	bne.n	8003742 <main+0x103a>
				{
					current_mode_config = Mode_config_year;
 800372e:	4b3e      	ldr	r3, [pc, #248]	@ (8003828 <main+0x1120>)
 8003730:	2206      	movs	r2, #6
 8003732:	701a      	strb	r2, [r3, #0]
					button_count[11] += 1;
 8003734:	4b3a      	ldr	r3, [pc, #232]	@ (8003820 <main+0x1118>)
 8003736:	8adb      	ldrh	r3, [r3, #22]
 8003738:	3301      	adds	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	4b38      	ldr	r3, [pc, #224]	@ (8003820 <main+0x1118>)
 800373e:	82da      	strh	r2, [r3, #22]
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, RED, DARKBLUE);

					button_count[7] += 1;
				}

				break;
 8003740:	e15e      	b.n	8003a00 <main+0x12f8>
				else if(button_count[15] % 30 == 1)
 8003742:	4b37      	ldr	r3, [pc, #220]	@ (8003820 <main+0x1118>)
 8003744:	8bda      	ldrh	r2, [r3, #30]
 8003746:	4b37      	ldr	r3, [pc, #220]	@ (8003824 <main+0x111c>)
 8003748:	fba3 1302 	umull	r1, r3, r3, r2
 800374c:	0919      	lsrs	r1, r3, #4
 800374e:	460b      	mov	r3, r1
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	1a5b      	subs	r3, r3, r1
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b01      	cmp	r3, #1
 800375c:	d109      	bne.n	8003772 <main+0x106a>
					current_mode_config = Mode_config_date;
 800375e:	4b32      	ldr	r3, [pc, #200]	@ (8003828 <main+0x1120>)
 8003760:	2204      	movs	r2, #4
 8003762:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 8003764:	4b2e      	ldr	r3, [pc, #184]	@ (8003820 <main+0x1118>)
 8003766:	8bdb      	ldrh	r3, [r3, #30]
 8003768:	3301      	adds	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	4b2c      	ldr	r3, [pc, #176]	@ (8003820 <main+0x1118>)
 800376e:	83da      	strh	r2, [r3, #30]
				break;
 8003770:	e146      	b.n	8003a00 <main+0x12f8>
				else if(button_count[3] % 20 == 1) // check button is held 1 second
 8003772:	4b2b      	ldr	r3, [pc, #172]	@ (8003820 <main+0x1118>)
 8003774:	88da      	ldrh	r2, [r3, #6]
 8003776:	4b2d      	ldr	r3, [pc, #180]	@ (800382c <main+0x1124>)
 8003778:	fba3 1302 	umull	r1, r3, r3, r2
 800377c:	0919      	lsrs	r1, r3, #4
 800377e:	460b      	mov	r3, r1
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d11c      	bne.n	80037c8 <main+0x10c0>
					increaseMonth();
 800378e:	f001 f9fb 	bl	8004b88 <increaseMonth>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, RED, DARKBLUE);
 8003792:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003796:	9304      	str	r3, [sp, #16]
 8003798:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800379c:	9303      	str	r3, [sp, #12]
 800379e:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80037a2:	9302      	str	r3, [sp, #8]
 80037a4:	2318      	movs	r3, #24
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	4b21      	ldr	r3, [pc, #132]	@ (8003830 <main+0x1128>)
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <main+0x112c>)
 80037ae:	4a22      	ldr	r2, [pc, #136]	@ (8003838 <main+0x1130>)
 80037b0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80037b4:	2078      	movs	r0, #120	@ 0x78
 80037b6:	f000 fe9d 	bl	80044f4 <displayDate>
					button_count[3] += 1;
 80037ba:	4b19      	ldr	r3, [pc, #100]	@ (8003820 <main+0x1118>)
 80037bc:	88db      	ldrh	r3, [r3, #6]
 80037be:	3301      	adds	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	4b17      	ldr	r3, [pc, #92]	@ (8003820 <main+0x1118>)
 80037c4:	80da      	strh	r2, [r3, #6]
				break;
 80037c6:	e11b      	b.n	8003a00 <main+0x12f8>
				else if(button_count[7] % 20 == 1)
 80037c8:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <main+0x1118>)
 80037ca:	89da      	ldrh	r2, [r3, #14]
 80037cc:	4b17      	ldr	r3, [pc, #92]	@ (800382c <main+0x1124>)
 80037ce:	fba3 1302 	umull	r1, r3, r3, r2
 80037d2:	0919      	lsrs	r1, r3, #4
 80037d4:	460b      	mov	r3, r1
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	f040 810d 	bne.w	8003a00 <main+0x12f8>
					decreaseMonth();
 80037e6:	f001 fa05 	bl	8004bf4 <decreaseMonth>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, RED, DARKBLUE);
 80037ea:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80037ee:	9304      	str	r3, [sp, #16]
 80037f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80037f4:	9303      	str	r3, [sp, #12]
 80037f6:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80037fa:	9302      	str	r3, [sp, #8]
 80037fc:	2318      	movs	r3, #24
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <main+0x1128>)
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <main+0x112c>)
 8003806:	4a0c      	ldr	r2, [pc, #48]	@ (8003838 <main+0x1130>)
 8003808:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800380c:	2078      	movs	r0, #120	@ 0x78
 800380e:	f000 fe71 	bl	80044f4 <displayDate>
					button_count[7] += 1;
 8003812:	4b03      	ldr	r3, [pc, #12]	@ (8003820 <main+0x1118>)
 8003814:	89db      	ldrh	r3, [r3, #14]
 8003816:	3301      	adds	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	4b01      	ldr	r3, [pc, #4]	@ (8003820 <main+0x1118>)
 800381c:	81da      	strh	r2, [r3, #14]
				break;
 800381e:	e0ef      	b.n	8003a00 <main+0x12f8>
 8003820:	20000048 	.word	0x20000048
 8003824:	88888889 	.word	0x88888889
 8003828:	20000132 	.word	0x20000132
 800382c:	cccccccd 	.word	0xcccccccd
 8003830:	20000006 	.word	0x20000006
 8003834:	20000005 	.word	0x20000005
 8003838:	20000004 	.word	0x20000004
 800383c:	2000001c 	.word	0x2000001c
 8003840:	20000000 	.word	0x20000000
 8003844:	20000001 	.word	0x20000001
 8003848:	20000002 	.word	0x20000002
 800384c:	20000003 	.word	0x20000003
			}
			case Mode_config_year:
			{
				if(previous_mode_config != current_mode_config)
 8003850:	4b88      	ldr	r3, [pc, #544]	@ (8003a74 <main+0x136c>)
 8003852:	781a      	ldrb	r2, [r3, #0]
 8003854:	4b88      	ldr	r3, [pc, #544]	@ (8003a78 <main+0x1370>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d059      	beq.n	8003910 <main+0x1208>
				{
					(void)displaySecClockwise(LCD_WIDTH / 2, 110, clock_radius - 30, &set_time.second, BLACK);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1a3 021e 	sub.w	r2, r3, #30
 8003862:	2300      	movs	r3, #0
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	4b85      	ldr	r3, [pc, #532]	@ (8003a7c <main+0x1374>)
 8003868:	216e      	movs	r1, #110	@ 0x6e
 800386a:	2078      	movs	r0, #120	@ 0x78
 800386c:	f000 fa88 	bl	8003d80 <displaySecClockwise>
					(void)displayMinClockwise(LCD_WIDTH / 2, 110, clock_radius - 40, &set_time.second, &set_time.minute, BLUE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8003876:	231f      	movs	r3, #31
 8003878:	9301      	str	r3, [sp, #4]
 800387a:	4b81      	ldr	r3, [pc, #516]	@ (8003a80 <main+0x1378>)
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a7c <main+0x1374>)
 8003880:	216e      	movs	r1, #110	@ 0x6e
 8003882:	2078      	movs	r0, #120	@ 0x78
 8003884:	f000 fb78 	bl	8003f78 <displayMinClockwise>
					(void)displayHourClockwise(LCD_WIDTH / 2, 110, clock_radius - 50, &set_time.minute, &set_time.hour, RED);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
 800388e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	4b7b      	ldr	r3, [pc, #492]	@ (8003a84 <main+0x137c>)
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	4b79      	ldr	r3, [pc, #484]	@ (8003a80 <main+0x1378>)
 800389a:	216e      	movs	r1, #110	@ 0x6e
 800389c:	2078      	movs	r0, #120	@ 0x78
 800389e:	f000 fc87 	bl	80041b0 <displayHourClockwise>

					displayTime(LCD_WIDTH / 2, 240, &set_time.second, &set_time.minute, &set_time.hour, 32, BLACK, BLACK, BLACK);
 80038a2:	2300      	movs	r3, #0
 80038a4:	9304      	str	r3, [sp, #16]
 80038a6:	2300      	movs	r3, #0
 80038a8:	9303      	str	r3, [sp, #12]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9302      	str	r3, [sp, #8]
 80038ae:	2320      	movs	r3, #32
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	4b74      	ldr	r3, [pc, #464]	@ (8003a84 <main+0x137c>)
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	4b72      	ldr	r3, [pc, #456]	@ (8003a80 <main+0x1378>)
 80038b8:	4a70      	ldr	r2, [pc, #448]	@ (8003a7c <main+0x1374>)
 80038ba:	21f0      	movs	r1, #240	@ 0xf0
 80038bc:	2078      	movs	r0, #120	@ 0x78
 80038be:	f000 fd9b 	bl	80043f8 <displayTime>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, RED);
 80038c2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80038c6:	9304      	str	r3, [sp, #16]
 80038c8:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80038cc:	9303      	str	r3, [sp, #12]
 80038ce:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80038d2:	9302      	str	r3, [sp, #8]
 80038d4:	2318      	movs	r3, #24
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003a88 <main+0x1380>)
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	4b6b      	ldr	r3, [pc, #428]	@ (8003a8c <main+0x1384>)
 80038de:	4a6c      	ldr	r2, [pc, #432]	@ (8003a90 <main+0x1388>)
 80038e0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80038e4:	2078      	movs	r0, #120	@ 0x78
 80038e6:	f000 fe05 	bl	80044f4 <displayDate>
					displayDay(20, 320 - 10 - 24, &set_time.day, 24, DARKBLUE);
 80038ea:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	2318      	movs	r3, #24
 80038f2:	4a68      	ldr	r2, [pc, #416]	@ (8003a94 <main+0x138c>)
 80038f4:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80038f8:	2014      	movs	r0, #20
 80038fa:	f000 fe9f 	bl	800463c <displayDay>

					displayTimeLed7Seg(&set_time.second, &set_time.minute, &set_time.hour);
 80038fe:	4a61      	ldr	r2, [pc, #388]	@ (8003a84 <main+0x137c>)
 8003900:	495f      	ldr	r1, [pc, #380]	@ (8003a80 <main+0x1378>)
 8003902:	485e      	ldr	r0, [pc, #376]	@ (8003a7c <main+0x1374>)
 8003904:	f000 ff42 	bl	800478c <displayTimeLed7Seg>

					previous_mode_config = current_mode_config;
 8003908:	4b5b      	ldr	r3, [pc, #364]	@ (8003a78 <main+0x1370>)
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	4b59      	ldr	r3, [pc, #356]	@ (8003a74 <main+0x136c>)
 800390e:	701a      	strb	r2, [r3, #0]
				}

				if(button_count[15] % 30 == 1)
 8003910:	4b61      	ldr	r3, [pc, #388]	@ (8003a98 <main+0x1390>)
 8003912:	8bda      	ldrh	r2, [r3, #30]
 8003914:	4b61      	ldr	r3, [pc, #388]	@ (8003a9c <main+0x1394>)
 8003916:	fba3 1302 	umull	r1, r3, r3, r2
 800391a:	0919      	lsrs	r1, r3, #4
 800391c:	460b      	mov	r3, r1
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a5b      	subs	r3, r3, r1
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d109      	bne.n	8003940 <main+0x1238>
				{
					current_mode_config = Mode_config_month;
 800392c:	4b52      	ldr	r3, [pc, #328]	@ (8003a78 <main+0x1370>)
 800392e:	2205      	movs	r2, #5
 8003930:	701a      	strb	r2, [r3, #0]
					button_count[15] += 1;
 8003932:	4b59      	ldr	r3, [pc, #356]	@ (8003a98 <main+0x1390>)
 8003934:	8bdb      	ldrh	r3, [r3, #30]
 8003936:	3301      	adds	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	4b57      	ldr	r3, [pc, #348]	@ (8003a98 <main+0x1390>)
 800393c:	83da      	strh	r2, [r3, #30]
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, RED);

					button_count[7] += 1;
				}

				break;
 800393e:	e061      	b.n	8003a04 <main+0x12fc>
				else if(button_count[3] % 20 == 1) // check button is held 1 second
 8003940:	4b55      	ldr	r3, [pc, #340]	@ (8003a98 <main+0x1390>)
 8003942:	88da      	ldrh	r2, [r3, #6]
 8003944:	4b56      	ldr	r3, [pc, #344]	@ (8003aa0 <main+0x1398>)
 8003946:	fba3 1302 	umull	r1, r3, r3, r2
 800394a:	0919      	lsrs	r1, r3, #4
 800394c:	460b      	mov	r3, r1
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d11c      	bne.n	8003996 <main+0x128e>
					increaseYear();
 800395c:	f001 f980 	bl	8004c60 <increaseYear>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, RED);
 8003960:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003964:	9304      	str	r3, [sp, #16]
 8003966:	f240 13cf 	movw	r3, #463	@ 0x1cf
 800396a:	9303      	str	r3, [sp, #12]
 800396c:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8003970:	9302      	str	r3, [sp, #8]
 8003972:	2318      	movs	r3, #24
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	4b44      	ldr	r3, [pc, #272]	@ (8003a88 <main+0x1380>)
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	4b44      	ldr	r3, [pc, #272]	@ (8003a8c <main+0x1384>)
 800397c:	4a44      	ldr	r2, [pc, #272]	@ (8003a90 <main+0x1388>)
 800397e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8003982:	2078      	movs	r0, #120	@ 0x78
 8003984:	f000 fdb6 	bl	80044f4 <displayDate>
					button_count[3] += 1;
 8003988:	4b43      	ldr	r3, [pc, #268]	@ (8003a98 <main+0x1390>)
 800398a:	88db      	ldrh	r3, [r3, #6]
 800398c:	3301      	adds	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	4b41      	ldr	r3, [pc, #260]	@ (8003a98 <main+0x1390>)
 8003992:	80da      	strh	r2, [r3, #6]
				break;
 8003994:	e036      	b.n	8003a04 <main+0x12fc>
				else if(button_count[7] % 20 == 1)
 8003996:	4b40      	ldr	r3, [pc, #256]	@ (8003a98 <main+0x1390>)
 8003998:	89da      	ldrh	r2, [r3, #14]
 800399a:	4b41      	ldr	r3, [pc, #260]	@ (8003aa0 <main+0x1398>)
 800399c:	fba3 1302 	umull	r1, r3, r3, r2
 80039a0:	0919      	lsrs	r1, r3, #4
 80039a2:	460b      	mov	r3, r1
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d128      	bne.n	8003a04 <main+0x12fc>
					decreaseYear();
 80039b2:	f001 f97d 	bl	8004cb0 <decreaseYear>
					displayDate(LCD_WIDTH / 2, 240 + 32, &set_time.date, &set_time.month, &set_time.year, 24, DARKBLUE, DARKBLUE, RED);
 80039b6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80039ba:	9304      	str	r3, [sp, #16]
 80039bc:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80039c0:	9303      	str	r3, [sp, #12]
 80039c2:	f240 13cf 	movw	r3, #463	@ 0x1cf
 80039c6:	9302      	str	r3, [sp, #8]
 80039c8:	2318      	movs	r3, #24
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003a88 <main+0x1380>)
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	4b2e      	ldr	r3, [pc, #184]	@ (8003a8c <main+0x1384>)
 80039d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003a90 <main+0x1388>)
 80039d4:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80039d8:	2078      	movs	r0, #120	@ 0x78
 80039da:	f000 fd8b 	bl	80044f4 <displayDate>
					button_count[7] += 1;
 80039de:	4b2e      	ldr	r3, [pc, #184]	@ (8003a98 <main+0x1390>)
 80039e0:	89db      	ldrh	r3, [r3, #14]
 80039e2:	3301      	adds	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a98 <main+0x1390>)
 80039e8:	81da      	strh	r2, [r3, #14]
				break;
 80039ea:	e00b      	b.n	8003a04 <main+0x12fc>
				break;
 80039ec:	bf00      	nop
 80039ee:	e00a      	b.n	8003a06 <main+0x12fe>
				break;
 80039f0:	bf00      	nop
 80039f2:	e008      	b.n	8003a06 <main+0x12fe>
				break;
 80039f4:	bf00      	nop
 80039f6:	e006      	b.n	8003a06 <main+0x12fe>
				break;
 80039f8:	bf00      	nop
 80039fa:	e004      	b.n	8003a06 <main+0x12fe>
				break;
 80039fc:	bf00      	nop
 80039fe:	e002      	b.n	8003a06 <main+0x12fe>
				break;
 8003a00:	bf00      	nop
 8003a02:	e000      	b.n	8003a06 <main+0x12fe>
				break;
 8003a04:	bf00      	nop
			}
		}

		if(button_count[12] == 1)
 8003a06:	4b24      	ldr	r3, [pc, #144]	@ (8003a98 <main+0x1390>)
 8003a08:	8b1b      	ldrh	r3, [r3, #24]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d115      	bne.n	8003a3a <main+0x1332>
		{
		  setTime(&set_time.second, &set_time.minute, &set_time.hour, &set_time.day, &set_time.date, &set_time.month, &set_time.year);
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a88 <main+0x1380>)
 8003a10:	9302      	str	r3, [sp, #8]
 8003a12:	4b1e      	ldr	r3, [pc, #120]	@ (8003a8c <main+0x1384>)
 8003a14:	9301      	str	r3, [sp, #4]
 8003a16:	4b1e      	ldr	r3, [pc, #120]	@ (8003a90 <main+0x1388>)
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a94 <main+0x138c>)
 8003a1c:	4a19      	ldr	r2, [pc, #100]	@ (8003a84 <main+0x137c>)
 8003a1e:	4918      	ldr	r1, [pc, #96]	@ (8003a80 <main+0x1378>)
 8003a20:	4816      	ldr	r0, [pc, #88]	@ (8003a7c <main+0x1374>)
 8003a22:	f000 f8c5 	bl	8003bb0 <setTime>
		  current_mode = Mode_word_clock;
 8003a26:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa4 <main+0x139c>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
		  button_count[12] += 1;
 8003a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003a98 <main+0x1390>)
 8003a2e:	8b1b      	ldrh	r3, [r3, #24]
 8003a30:	3301      	adds	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	4b18      	ldr	r3, [pc, #96]	@ (8003a98 <main+0x1390>)
 8003a36:	831a      	strh	r2, [r3, #24]
		{
		  current_mode = Mode_word_clock;
		  button_count[14] += 1;
		}

		break;
 8003a38:	e018      	b.n	8003a6c <main+0x1364>
		else if(button_count[14] == 1)
 8003a3a:	4b17      	ldr	r3, [pc, #92]	@ (8003a98 <main+0x1390>)
 8003a3c:	8b9b      	ldrh	r3, [r3, #28]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d114      	bne.n	8003a6c <main+0x1364>
		  current_mode = Mode_word_clock;
 8003a42:	4b18      	ldr	r3, [pc, #96]	@ (8003aa4 <main+0x139c>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
		  button_count[14] += 1;
 8003a48:	4b13      	ldr	r3, [pc, #76]	@ (8003a98 <main+0x1390>)
 8003a4a:	8b9b      	ldrh	r3, [r3, #28]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	4b11      	ldr	r3, [pc, #68]	@ (8003a98 <main+0x1390>)
 8003a52:	839a      	strh	r2, [r3, #28]
		break;
 8003a54:	e00a      	b.n	8003a6c <main+0x1364>
	  {
		  break;
	  }
	  default:
	  {
		  current_mode = Mode_init;
 8003a56:	4b13      	ldr	r3, [pc, #76]	@ (8003aa4 <main+0x139c>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	f7fe be75 	b.w	800274a <main+0x42>
		  break;
 8003a60:	bf00      	nop
 8003a62:	f7fe be72 	b.w	800274a <main+0x42>
		  break;
 8003a66:	bf00      	nop
 8003a68:	f7fe be6f 	b.w	800274a <main+0x42>
		break;
 8003a6c:	bf00      	nop
	  if(sTimer4GetFlag())
 8003a6e:	f7fe be6c 	b.w	800274a <main+0x42>
 8003a72:	bf00      	nop
 8003a74:	2000001c 	.word	0x2000001c
 8003a78:	20000132 	.word	0x20000132
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	20000001 	.word	0x20000001
 8003a84:	20000002 	.word	0x20000002
 8003a88:	20000006 	.word	0x20000006
 8003a8c:	20000005 	.word	0x20000005
 8003a90:	20000004 	.word	0x20000004
 8003a94:	20000003 	.word	0x20000003
 8003a98:	20000048 	.word	0x20000048
 8003a9c:	88888889 	.word	0x88888889
 8003aa0:	cccccccd 	.word	0xcccccccd
 8003aa4:	20000130 	.word	0x20000130

08003aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b094      	sub	sp, #80	@ 0x50
 8003aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aae:	f107 0320 	add.w	r3, r7, #32
 8003ab2:	2230      	movs	r2, #48	@ 0x30
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f005 f94e 	bl	8008d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003abc:	f107 030c 	add.w	r3, r7, #12
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003acc:	2300      	movs	r3, #0
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	4b28      	ldr	r3, [pc, #160]	@ (8003b74 <SystemClock_Config+0xcc>)
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	4a27      	ldr	r2, [pc, #156]	@ (8003b74 <SystemClock_Config+0xcc>)
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ada:	6413      	str	r3, [r2, #64]	@ 0x40
 8003adc:	4b25      	ldr	r3, [pc, #148]	@ (8003b74 <SystemClock_Config+0xcc>)
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	4b22      	ldr	r3, [pc, #136]	@ (8003b78 <SystemClock_Config+0xd0>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a21      	ldr	r2, [pc, #132]	@ (8003b78 <SystemClock_Config+0xd0>)
 8003af2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b78 <SystemClock_Config+0xd0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b04:	2302      	movs	r3, #2
 8003b06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b10:	2302      	movs	r3, #2
 8003b12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b14:	2300      	movs	r3, #0
 8003b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003b18:	2308      	movs	r3, #8
 8003b1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003b1c:	23a8      	movs	r3, #168	@ 0xa8
 8003b1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b20:	2302      	movs	r3, #2
 8003b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003b24:	2304      	movs	r3, #4
 8003b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b28:	f107 0320 	add.w	r3, r7, #32
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f003 f923 	bl	8006d78 <HAL_RCC_OscConfig>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003b38:	f001 f944 	bl	8004dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b3c:	230f      	movs	r3, #15
 8003b3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b40:	2302      	movs	r3, #2
 8003b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b48:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003b4e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	2105      	movs	r1, #5
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f003 fb84 	bl	8007268 <HAL_RCC_ClockConfig>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003b66:	f001 f92d 	bl	8004dc4 <Error_Handler>
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3750      	adds	r7, #80	@ 0x50
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40007000 	.word	0x40007000

08003b7c <debugSystem>:

/* USER CODE BEGIN 4 */
void debugSystem()
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOE, LED_DEBUG_Pin);
 8003b80:	2110      	movs	r1, #16
 8003b82:	4802      	ldr	r0, [pc, #8]	@ (8003b8c <debugSystem+0x10>)
 8003b84:	f001 ff8b 	bl	8005a9e <HAL_GPIO_TogglePin>
}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000

08003b90 <initSystem>:
void initSystem()
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
	initTimer2();
 8003b94:	f001 f91c 	bl	8004dd0 <initTimer2>
	initTimer4();
 8003b98:	f001 f924 	bl	8004de4 <initTimer4>
	initLCD();
 8003b9c:	f7fe f978 	bl	8001e90 <initLCD>
	initLed7Seg();
 8003ba0:	f7fe fc82 	bl	80024a8 <initLed7Seg>
	initds3231();
 8003ba4:	f7fd f9ee 	bl	8000f84 <initds3231>
	initButton();
 8003ba8:	f7fd f974 	bl	8000e94 <initButton>
}
 8003bac:	bf00      	nop
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <setTime>:
void setTime(uint8_t *second, uint8_t *minute, uint8_t *hour, uint8_t *day, uint8_t *date, uint8_t *month, uint16_t *year)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
	ds3231SetSec(*second);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fd fa8a 	bl	80010dc <ds3231SetSec>
	ds3231SetMin(*minute);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd fa93 	bl	80010f8 <ds3231SetMin>
	ds3231SetHour(*hour);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd fa9c 	bl	8001114 <ds3231SetHour>
	ds3231SetDay(*day);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fd fab9 	bl	8001158 <ds3231SetDay>
	ds3231SetDate(*date);
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fd fac2 	bl	8001174 <ds3231SetDate>
	ds3231SetMonth(*month);
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fd facb 	bl	8001190 <ds3231SetMonth>
	ds3231SetYear(*year);
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd fb00 	bl	8001204 <ds3231SetYear>
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	0000      	movs	r0, r0
	...

08003c10 <displayClock>:

void displayClock(int x_coor, int y_coor, int radius)
{
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b08e      	sub	sp, #56	@ 0x38
 8003c16:	af04      	add	r7, sp, #16
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
    const uint8_t char_size = 24;
 8003c1e:	2318      	movs	r3, #24
 8003c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    lcdDrawCircle(x_coor, y_coor, DARKBLUE, radius + 2, 1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3302      	adds	r3, #2
 8003c28:	2201      	movs	r2, #1
 8003c2a:	9200      	str	r2, [sp, #0]
 8003c2c:	f240 12cf 	movw	r2, #463	@ 0x1cf
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7fe fb17 	bl	8002266 <lcdDrawCircle>
	lcdDrawCircle(x_coor, y_coor, WHITE, radius, 1);
 8003c38:	2301      	movs	r3, #1
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7fe fb0e 	bl	8002266 <lcdDrawCircle>

    for (int i = 0; i < 12; i++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c4e:	e086      	b.n	8003d5e <displayClock+0x14e>
    {
        float angle = (i * 30) * (PI / 180); // Convert angle to radians
 8003c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fc fc06 	bl	800046c <__aeabi_i2d>
 8003c60:	a345      	add	r3, pc, #276	@ (adr r3, 8003d78 <displayClock+0x168>)
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	f7fc fc6b 	bl	8000540 <__aeabi_dmul>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	f7fc ff47 	bl	8000b04 <__aeabi_d2f>
 8003c76:	4603      	mov	r3, r0
 8003c78:	61fb      	str	r3, [r7, #28]
        int x = x_coor + (radius - 15) * sin(angle);
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7fc fbf6 	bl	800046c <__aeabi_i2d>
 8003c80:	4680      	mov	r8, r0
 8003c82:	4689      	mov	r9, r1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3b0f      	subs	r3, #15
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fc fbef 	bl	800046c <__aeabi_i2d>
 8003c8e:	4682      	mov	sl, r0
 8003c90:	468b      	mov	fp, r1
 8003c92:	69f8      	ldr	r0, [r7, #28]
 8003c94:	f7fc fbfc 	bl	8000490 <__aeabi_f2d>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	ec43 2b10 	vmov	d0, r2, r3
 8003ca0:	f005 f8da 	bl	8008e58 <sin>
 8003ca4:	ec53 2b10 	vmov	r2, r3, d0
 8003ca8:	4650      	mov	r0, sl
 8003caa:	4659      	mov	r1, fp
 8003cac:	f7fc fc48 	bl	8000540 <__aeabi_dmul>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4640      	mov	r0, r8
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	f7fc fa8c 	bl	80001d4 <__adddf3>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f7fc fed6 	bl	8000a74 <__aeabi_d2iz>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	61bb      	str	r3, [r7, #24]
        int y = y_coor + (radius - 15) * -cos(angle);
 8003ccc:	68b8      	ldr	r0, [r7, #8]
 8003cce:	f7fc fbcd 	bl	800046c <__aeabi_i2d>
 8003cd2:	4680      	mov	r8, r0
 8003cd4:	4689      	mov	r9, r1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3b0f      	subs	r3, #15
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fbc6 	bl	800046c <__aeabi_i2d>
 8003ce0:	4682      	mov	sl, r0
 8003ce2:	468b      	mov	fp, r1
 8003ce4:	69f8      	ldr	r0, [r7, #28]
 8003ce6:	f7fc fbd3 	bl	8000490 <__aeabi_f2d>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	ec43 2b10 	vmov	d0, r2, r3
 8003cf2:	f005 f85d 	bl	8008db0 <cos>
 8003cf6:	ec53 2b10 	vmov	r2, r3, d0
 8003cfa:	4614      	mov	r4, r2
 8003cfc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003d00:	4622      	mov	r2, r4
 8003d02:	462b      	mov	r3, r5
 8003d04:	4650      	mov	r0, sl
 8003d06:	4659      	mov	r1, fp
 8003d08:	f7fc fc1a 	bl	8000540 <__aeabi_dmul>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4640      	mov	r0, r8
 8003d12:	4649      	mov	r1, r9
 8003d14:	f7fc fa5e 	bl	80001d4 <__adddf3>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f7fc fea8 	bl	8000a74 <__aeabi_d2iz>
 8003d24:	4603      	mov	r3, r0
 8003d26:	617b      	str	r3, [r7, #20]

        lcdShowIntNumCenter(x, y, ((i == 0) ? 12 : i), 2, BLACK, WHITE, char_size, 1);
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	b298      	uxth	r0, r3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	b299      	uxth	r1, r3
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <displayClock+0x12c>
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	e000      	b.n	8003d3e <displayClock+0x12e>
 8003d3c:	220c      	movs	r2, #12
 8003d3e:	2301      	movs	r3, #1
 8003d40:	9303      	str	r3, [sp, #12]
 8003d42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d46:	9302      	str	r3, [sp, #8]
 8003d48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	2302      	movs	r3, #2
 8003d54:	f7fd ffe4 	bl	8001d20 <lcdShowIntNumCenter>
    for (int i = 0; i < 12; i++)
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	2b0b      	cmp	r3, #11
 8003d62:	f77f af75 	ble.w	8003c50 <displayClock+0x40>
    }
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	3728      	adds	r7, #40	@ 0x28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
 8003d74:	f3af 8000 	nop.w
 8003d78:	a2529d39 	.word	0xa2529d39
 8003d7c:	3f91df46 	.word	0x3f91df46

08003d80 <displaySecClockwise>:
 * @param *second, *minute a pointer to variable store time value
 * @param color color of clockwise
 * @return float angle of clockwise
 */
float displaySecClockwise(int x_coor, int y_coor, int length, const uint8_t *second, uint16_t color)
{
 8003d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d84:	b08b      	sub	sp, #44	@ 0x2c
 8003d86:	af02      	add	r7, sp, #8
 8003d88:	6178      	str	r0, [r7, #20]
 8003d8a:	6139      	str	r1, [r7, #16]
 8003d8c:	60fa      	str	r2, [r7, #12]
 8003d8e:	60bb      	str	r3, [r7, #8]
	static float angle_sec;
	int x, y;

    x = x_coor + (length) * sin(angle_sec);
 8003d90:	6978      	ldr	r0, [r7, #20]
 8003d92:	f7fc fb6b 	bl	800046c <__aeabi_i2d>
 8003d96:	4682      	mov	sl, r0
 8003d98:	468b      	mov	fp, r1
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7fc fb66 	bl	800046c <__aeabi_i2d>
 8003da0:	e9c7 0100 	strd	r0, r1, [r7]
 8003da4:	4b72      	ldr	r3, [pc, #456]	@ (8003f70 <displaySecClockwise+0x1f0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fc fb71 	bl	8000490 <__aeabi_f2d>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	ec43 2b10 	vmov	d0, r2, r3
 8003db6:	f005 f84f 	bl	8008e58 <sin>
 8003dba:	ec53 2b10 	vmov	r2, r3, d0
 8003dbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003dc2:	f7fc fbbd 	bl	8000540 <__aeabi_dmul>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4650      	mov	r0, sl
 8003dcc:	4659      	mov	r1, fp
 8003dce:	f7fc fa01 	bl	80001d4 <__adddf3>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f7fc fe4b 	bl	8000a74 <__aeabi_d2iz>
 8003dde:	4603      	mov	r3, r0
 8003de0:	61fb      	str	r3, [r7, #28]
    y = y_coor + (length) * -cos(angle_sec);
 8003de2:	6938      	ldr	r0, [r7, #16]
 8003de4:	f7fc fb42 	bl	800046c <__aeabi_i2d>
 8003de8:	4682      	mov	sl, r0
 8003dea:	468b      	mov	fp, r1
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7fc fb3d 	bl	800046c <__aeabi_i2d>
 8003df2:	e9c7 0100 	strd	r0, r1, [r7]
 8003df6:	4b5e      	ldr	r3, [pc, #376]	@ (8003f70 <displaySecClockwise+0x1f0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fc fb48 	bl	8000490 <__aeabi_f2d>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	ec43 2b10 	vmov	d0, r2, r3
 8003e08:	f004 ffd2 	bl	8008db0 <cos>
 8003e0c:	ec53 2b10 	vmov	r2, r3, d0
 8003e10:	4690      	mov	r8, r2
 8003e12:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8003e16:	4642      	mov	r2, r8
 8003e18:	464b      	mov	r3, r9
 8003e1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e1e:	f7fc fb8f 	bl	8000540 <__aeabi_dmul>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4650      	mov	r0, sl
 8003e28:	4659      	mov	r1, fp
 8003e2a:	f7fc f9d3 	bl	80001d4 <__adddf3>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	f7fc fe1d 	bl	8000a74 <__aeabi_d2iz>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	61bb      	str	r3, [r7, #24]
    lcdDrawLine(x_coor, y_coor, x, y, WHITE);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	b298      	uxth	r0, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	b299      	uxth	r1, r3
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8003e52:	9600      	str	r6, [sp, #0]
 8003e54:	f7fd fdf3 	bl	8001a3e <lcdDrawLine>

    angle_sec = (*second * 6) * (PI / 180);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4613      	mov	r3, r2
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	4413      	add	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fc fb00 	bl	800046c <__aeabi_i2d>
 8003e6c:	a33e      	add	r3, pc, #248	@ (adr r3, 8003f68 <displaySecClockwise+0x1e8>)
 8003e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e72:	f7fc fb65 	bl	8000540 <__aeabi_dmul>
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f7fc fe41 	bl	8000b04 <__aeabi_d2f>
 8003e82:	4603      	mov	r3, r0
 8003e84:	4a3a      	ldr	r2, [pc, #232]	@ (8003f70 <displaySecClockwise+0x1f0>)
 8003e86:	6013      	str	r3, [r2, #0]
    x = x_coor + (length) * sin(angle_sec);
 8003e88:	6978      	ldr	r0, [r7, #20]
 8003e8a:	f7fc faef 	bl	800046c <__aeabi_i2d>
 8003e8e:	4680      	mov	r8, r0
 8003e90:	4689      	mov	r9, r1
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7fc faea 	bl	800046c <__aeabi_i2d>
 8003e98:	4682      	mov	sl, r0
 8003e9a:	468b      	mov	fp, r1
 8003e9c:	4b34      	ldr	r3, [pc, #208]	@ (8003f70 <displaySecClockwise+0x1f0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fc faf5 	bl	8000490 <__aeabi_f2d>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	ec43 2b10 	vmov	d0, r2, r3
 8003eae:	f004 ffd3 	bl	8008e58 <sin>
 8003eb2:	ec53 2b10 	vmov	r2, r3, d0
 8003eb6:	4650      	mov	r0, sl
 8003eb8:	4659      	mov	r1, fp
 8003eba:	f7fc fb41 	bl	8000540 <__aeabi_dmul>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4640      	mov	r0, r8
 8003ec4:	4649      	mov	r1, r9
 8003ec6:	f7fc f985 	bl	80001d4 <__adddf3>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4610      	mov	r0, r2
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f7fc fdcf 	bl	8000a74 <__aeabi_d2iz>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	61fb      	str	r3, [r7, #28]
    y = y_coor + (length) * -cos(angle_sec);
 8003eda:	6938      	ldr	r0, [r7, #16]
 8003edc:	f7fc fac6 	bl	800046c <__aeabi_i2d>
 8003ee0:	4680      	mov	r8, r0
 8003ee2:	4689      	mov	r9, r1
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7fc fac1 	bl	800046c <__aeabi_i2d>
 8003eea:	4682      	mov	sl, r0
 8003eec:	468b      	mov	fp, r1
 8003eee:	4b20      	ldr	r3, [pc, #128]	@ (8003f70 <displaySecClockwise+0x1f0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fc facc 	bl	8000490 <__aeabi_f2d>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	ec43 2b10 	vmov	d0, r2, r3
 8003f00:	f004 ff56 	bl	8008db0 <cos>
 8003f04:	ec53 2b10 	vmov	r2, r3, d0
 8003f08:	4614      	mov	r4, r2
 8003f0a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003f0e:	4622      	mov	r2, r4
 8003f10:	462b      	mov	r3, r5
 8003f12:	4650      	mov	r0, sl
 8003f14:	4659      	mov	r1, fp
 8003f16:	f7fc fb13 	bl	8000540 <__aeabi_dmul>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4640      	mov	r0, r8
 8003f20:	4649      	mov	r1, r9
 8003f22:	f7fc f957 	bl	80001d4 <__adddf3>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f7fc fda1 	bl	8000a74 <__aeabi_d2iz>
 8003f32:	4603      	mov	r3, r0
 8003f34:	61bb      	str	r3, [r7, #24]
    lcdDrawLine(x_coor, y_coor, x, y, color);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	b298      	uxth	r0, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	b299      	uxth	r1, r3
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	b29c      	uxth	r4, r3
 8003f46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	f7fd fd76 	bl	8001a3e <lcdDrawLine>

	return angle_sec;
 8003f52:	4b07      	ldr	r3, [pc, #28]	@ (8003f70 <displaySecClockwise+0x1f0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	ee07 3a90 	vmov	s15, r3
}
 8003f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5e:	3724      	adds	r7, #36	@ 0x24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f66:	bf00      	nop
 8003f68:	a2529d39 	.word	0xa2529d39
 8003f6c:	3f91df46 	.word	0x3f91df46
 8003f70:	20000140 	.word	0x20000140
 8003f74:	00000000 	.word	0x00000000

08003f78 <displayMinClockwise>:
float displayMinClockwise(int x_coor, int y_coor, int length, const uint8_t *second, const uint8_t *minute, uint16_t color)
{
 8003f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7c:	b08b      	sub	sp, #44	@ 0x2c
 8003f7e:	af02      	add	r7, sp, #8
 8003f80:	6178      	str	r0, [r7, #20]
 8003f82:	6139      	str	r1, [r7, #16]
 8003f84:	60fa      	str	r2, [r7, #12]
 8003f86:	60bb      	str	r3, [r7, #8]
	static float angle_min;
	int x, y;

	x = x_coor + (length) * sin(angle_min);
 8003f88:	6978      	ldr	r0, [r7, #20]
 8003f8a:	f7fc fa6f 	bl	800046c <__aeabi_i2d>
 8003f8e:	4682      	mov	sl, r0
 8003f90:	468b      	mov	fp, r1
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f7fc fa6a 	bl	800046c <__aeabi_i2d>
 8003f98:	e9c7 0100 	strd	r0, r1, [r7]
 8003f9c:	4b80      	ldr	r3, [pc, #512]	@ (80041a0 <displayMinClockwise+0x228>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fc fa75 	bl	8000490 <__aeabi_f2d>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	ec43 2b10 	vmov	d0, r2, r3
 8003fae:	f004 ff53 	bl	8008e58 <sin>
 8003fb2:	ec53 2b10 	vmov	r2, r3, d0
 8003fb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fba:	f7fc fac1 	bl	8000540 <__aeabi_dmul>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4650      	mov	r0, sl
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	f7fc f905 	bl	80001d4 <__adddf3>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4610      	mov	r0, r2
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f7fc fd4f 	bl	8000a74 <__aeabi_d2iz>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	61fb      	str	r3, [r7, #28]
	y = y_coor + (length) * -cos(angle_min);
 8003fda:	6938      	ldr	r0, [r7, #16]
 8003fdc:	f7fc fa46 	bl	800046c <__aeabi_i2d>
 8003fe0:	4682      	mov	sl, r0
 8003fe2:	468b      	mov	fp, r1
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7fc fa41 	bl	800046c <__aeabi_i2d>
 8003fea:	e9c7 0100 	strd	r0, r1, [r7]
 8003fee:	4b6c      	ldr	r3, [pc, #432]	@ (80041a0 <displayMinClockwise+0x228>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc fa4c 	bl	8000490 <__aeabi_f2d>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	ec43 2b10 	vmov	d0, r2, r3
 8004000:	f004 fed6 	bl	8008db0 <cos>
 8004004:	ec53 2b10 	vmov	r2, r3, d0
 8004008:	4690      	mov	r8, r2
 800400a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 800400e:	4642      	mov	r2, r8
 8004010:	464b      	mov	r3, r9
 8004012:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004016:	f7fc fa93 	bl	8000540 <__aeabi_dmul>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4650      	mov	r0, sl
 8004020:	4659      	mov	r1, fp
 8004022:	f7fc f8d7 	bl	80001d4 <__adddf3>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	f7fc fd21 	bl	8000a74 <__aeabi_d2iz>
 8004032:	4603      	mov	r3, r0
 8004034:	61bb      	str	r3, [r7, #24]
	lcdDrawLine(x_coor, y_coor, x, y, WHITE);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	b298      	uxth	r0, r3
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	b299      	uxth	r1, r3
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	b29a      	uxth	r2, r3
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	b29b      	uxth	r3, r3
 8004046:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800404a:	9600      	str	r6, [sp, #0]
 800404c:	f7fd fcf7 	bl	8001a3e <lcdDrawLine>

    angle_min = ((*minute + *second / 60.0) * 6) * (PI / 180);
 8004050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7fc fa09 	bl	800046c <__aeabi_i2d>
 800405a:	4680      	mov	r8, r0
 800405c:	4689      	mov	r9, r1
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fc fa02 	bl	800046c <__aeabi_i2d>
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	4b4d      	ldr	r3, [pc, #308]	@ (80041a4 <displayMinClockwise+0x22c>)
 800406e:	f7fc fb91 	bl	8000794 <__aeabi_ddiv>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4640      	mov	r0, r8
 8004078:	4649      	mov	r1, r9
 800407a:	f7fc f8ab 	bl	80001d4 <__adddf3>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	4b47      	ldr	r3, [pc, #284]	@ (80041a8 <displayMinClockwise+0x230>)
 800408c:	f7fc fa58 	bl	8000540 <__aeabi_dmul>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4610      	mov	r0, r2
 8004096:	4619      	mov	r1, r3
 8004098:	a33f      	add	r3, pc, #252	@ (adr r3, 8004198 <displayMinClockwise+0x220>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	f7fc fa4f 	bl	8000540 <__aeabi_dmul>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	f7fc fd2b 	bl	8000b04 <__aeabi_d2f>
 80040ae:	4603      	mov	r3, r0
 80040b0:	4a3b      	ldr	r2, [pc, #236]	@ (80041a0 <displayMinClockwise+0x228>)
 80040b2:	6013      	str	r3, [r2, #0]
    x = x_coor + (length) * sin(angle_min);
 80040b4:	6978      	ldr	r0, [r7, #20]
 80040b6:	f7fc f9d9 	bl	800046c <__aeabi_i2d>
 80040ba:	4680      	mov	r8, r0
 80040bc:	4689      	mov	r9, r1
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f7fc f9d4 	bl	800046c <__aeabi_i2d>
 80040c4:	4682      	mov	sl, r0
 80040c6:	468b      	mov	fp, r1
 80040c8:	4b35      	ldr	r3, [pc, #212]	@ (80041a0 <displayMinClockwise+0x228>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fc f9df 	bl	8000490 <__aeabi_f2d>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	ec43 2b10 	vmov	d0, r2, r3
 80040da:	f004 febd 	bl	8008e58 <sin>
 80040de:	ec53 2b10 	vmov	r2, r3, d0
 80040e2:	4650      	mov	r0, sl
 80040e4:	4659      	mov	r1, fp
 80040e6:	f7fc fa2b 	bl	8000540 <__aeabi_dmul>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4640      	mov	r0, r8
 80040f0:	4649      	mov	r1, r9
 80040f2:	f7fc f86f 	bl	80001d4 <__adddf3>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	f7fc fcb9 	bl	8000a74 <__aeabi_d2iz>
 8004102:	4603      	mov	r3, r0
 8004104:	61fb      	str	r3, [r7, #28]
    y = y_coor + (length) * -cos(angle_min);
 8004106:	6938      	ldr	r0, [r7, #16]
 8004108:	f7fc f9b0 	bl	800046c <__aeabi_i2d>
 800410c:	4680      	mov	r8, r0
 800410e:	4689      	mov	r9, r1
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f7fc f9ab 	bl	800046c <__aeabi_i2d>
 8004116:	4682      	mov	sl, r0
 8004118:	468b      	mov	fp, r1
 800411a:	4b21      	ldr	r3, [pc, #132]	@ (80041a0 <displayMinClockwise+0x228>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc f9b6 	bl	8000490 <__aeabi_f2d>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	ec43 2b10 	vmov	d0, r2, r3
 800412c:	f004 fe40 	bl	8008db0 <cos>
 8004130:	ec53 2b10 	vmov	r2, r3, d0
 8004134:	4614      	mov	r4, r2
 8004136:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800413a:	4622      	mov	r2, r4
 800413c:	462b      	mov	r3, r5
 800413e:	4650      	mov	r0, sl
 8004140:	4659      	mov	r1, fp
 8004142:	f7fc f9fd 	bl	8000540 <__aeabi_dmul>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4640      	mov	r0, r8
 800414c:	4649      	mov	r1, r9
 800414e:	f7fc f841 	bl	80001d4 <__adddf3>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	f7fc fc8b 	bl	8000a74 <__aeabi_d2iz>
 800415e:	4603      	mov	r3, r0
 8004160:	61bb      	str	r3, [r7, #24]
    lcdDrawLine(x_coor, y_coor, x, y, color);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	b298      	uxth	r0, r3
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	b299      	uxth	r1, r3
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	b29a      	uxth	r2, r3
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	b29c      	uxth	r4, r3
 8004172:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	4623      	mov	r3, r4
 800417a:	f7fd fc60 	bl	8001a3e <lcdDrawLine>

    return angle_min;
 800417e:	4b08      	ldr	r3, [pc, #32]	@ (80041a0 <displayMinClockwise+0x228>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	ee07 3a90 	vmov	s15, r3
}
 8004186:	eeb0 0a67 	vmov.f32	s0, s15
 800418a:	3724      	adds	r7, #36	@ 0x24
 800418c:	46bd      	mov	sp, r7
 800418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004192:	bf00      	nop
 8004194:	f3af 8000 	nop.w
 8004198:	a2529d39 	.word	0xa2529d39
 800419c:	3f91df46 	.word	0x3f91df46
 80041a0:	20000144 	.word	0x20000144
 80041a4:	404e0000 	.word	0x404e0000
 80041a8:	40180000 	.word	0x40180000
 80041ac:	00000000 	.word	0x00000000

080041b0 <displayHourClockwise>:
float displayHourClockwise(int x_coor, int y_coor, int length, const uint8_t *minute, const uint8_t *hour, uint16_t color)
{
 80041b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	b08b      	sub	sp, #44	@ 0x2c
 80041b6:	af02      	add	r7, sp, #8
 80041b8:	6178      	str	r0, [r7, #20]
 80041ba:	6139      	str	r1, [r7, #16]
 80041bc:	60fa      	str	r2, [r7, #12]
 80041be:	60bb      	str	r3, [r7, #8]
	static float angle_hour;
	int x, y;

	x = x_coor + (length) * sin(angle_hour);
 80041c0:	6978      	ldr	r0, [r7, #20]
 80041c2:	f7fc f953 	bl	800046c <__aeabi_i2d>
 80041c6:	4682      	mov	sl, r0
 80041c8:	468b      	mov	fp, r1
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7fc f94e 	bl	800046c <__aeabi_i2d>
 80041d0:	e9c7 0100 	strd	r0, r1, [r7]
 80041d4:	4b84      	ldr	r3, [pc, #528]	@ (80043e8 <displayHourClockwise+0x238>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fc f959 	bl	8000490 <__aeabi_f2d>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	ec43 2b10 	vmov	d0, r2, r3
 80041e6:	f004 fe37 	bl	8008e58 <sin>
 80041ea:	ec53 2b10 	vmov	r2, r3, d0
 80041ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041f2:	f7fc f9a5 	bl	8000540 <__aeabi_dmul>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4650      	mov	r0, sl
 80041fc:	4659      	mov	r1, fp
 80041fe:	f7fb ffe9 	bl	80001d4 <__adddf3>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	f7fc fc33 	bl	8000a74 <__aeabi_d2iz>
 800420e:	4603      	mov	r3, r0
 8004210:	61fb      	str	r3, [r7, #28]
	y = y_coor + (length) * -cos(angle_hour);
 8004212:	6938      	ldr	r0, [r7, #16]
 8004214:	f7fc f92a 	bl	800046c <__aeabi_i2d>
 8004218:	4682      	mov	sl, r0
 800421a:	468b      	mov	fp, r1
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7fc f925 	bl	800046c <__aeabi_i2d>
 8004222:	e9c7 0100 	strd	r0, r1, [r7]
 8004226:	4b70      	ldr	r3, [pc, #448]	@ (80043e8 <displayHourClockwise+0x238>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fc f930 	bl	8000490 <__aeabi_f2d>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	ec43 2b10 	vmov	d0, r2, r3
 8004238:	f004 fdba 	bl	8008db0 <cos>
 800423c:	ec53 2b10 	vmov	r2, r3, d0
 8004240:	4690      	mov	r8, r2
 8004242:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8004246:	4642      	mov	r2, r8
 8004248:	464b      	mov	r3, r9
 800424a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800424e:	f7fc f977 	bl	8000540 <__aeabi_dmul>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4650      	mov	r0, sl
 8004258:	4659      	mov	r1, fp
 800425a:	f7fb ffbb 	bl	80001d4 <__adddf3>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	f7fc fc05 	bl	8000a74 <__aeabi_d2iz>
 800426a:	4603      	mov	r3, r0
 800426c:	61bb      	str	r3, [r7, #24]
	lcdDrawLine(x_coor, y_coor, x, y, WHITE);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	b298      	uxth	r0, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	b299      	uxth	r1, r3
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	b29a      	uxth	r2, r3
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8004282:	9600      	str	r6, [sp, #0]
 8004284:	f7fd fbdb 	bl	8001a3e <lcdDrawLine>

    angle_hour = ((*hour % 12 + *minute / 60.0) * 30) * (PI / 180); // 360 degrees / 12 hours = 30 degrees per hour
 8004288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800428a:	781a      	ldrb	r2, [r3, #0]
 800428c:	4b57      	ldr	r3, [pc, #348]	@ (80043ec <displayHourClockwise+0x23c>)
 800428e:	fba3 1302 	umull	r1, r3, r3, r2
 8004292:	08d9      	lsrs	r1, r3, #3
 8004294:	460b      	mov	r3, r1
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	440b      	add	r3, r1
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fc f8e3 	bl	800046c <__aeabi_i2d>
 80042a6:	4680      	mov	r8, r0
 80042a8:	4689      	mov	r9, r1
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fc f8dc 	bl	800046c <__aeabi_i2d>
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	4b4d      	ldr	r3, [pc, #308]	@ (80043f0 <displayHourClockwise+0x240>)
 80042ba:	f7fc fa6b 	bl	8000794 <__aeabi_ddiv>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4640      	mov	r0, r8
 80042c4:	4649      	mov	r1, r9
 80042c6:	f7fb ff85 	bl	80001d4 <__adddf3>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4610      	mov	r0, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	4b47      	ldr	r3, [pc, #284]	@ (80043f4 <displayHourClockwise+0x244>)
 80042d8:	f7fc f932 	bl	8000540 <__aeabi_dmul>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4610      	mov	r0, r2
 80042e2:	4619      	mov	r1, r3
 80042e4:	a33e      	add	r3, pc, #248	@ (adr r3, 80043e0 <displayHourClockwise+0x230>)
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	f7fc f929 	bl	8000540 <__aeabi_dmul>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4610      	mov	r0, r2
 80042f4:	4619      	mov	r1, r3
 80042f6:	f7fc fc05 	bl	8000b04 <__aeabi_d2f>
 80042fa:	4603      	mov	r3, r0
 80042fc:	4a3a      	ldr	r2, [pc, #232]	@ (80043e8 <displayHourClockwise+0x238>)
 80042fe:	6013      	str	r3, [r2, #0]
    x = x_coor + (length) * sin(angle_hour);
 8004300:	6978      	ldr	r0, [r7, #20]
 8004302:	f7fc f8b3 	bl	800046c <__aeabi_i2d>
 8004306:	4680      	mov	r8, r0
 8004308:	4689      	mov	r9, r1
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f7fc f8ae 	bl	800046c <__aeabi_i2d>
 8004310:	4682      	mov	sl, r0
 8004312:	468b      	mov	fp, r1
 8004314:	4b34      	ldr	r3, [pc, #208]	@ (80043e8 <displayHourClockwise+0x238>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7fc f8b9 	bl	8000490 <__aeabi_f2d>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	ec43 2b10 	vmov	d0, r2, r3
 8004326:	f004 fd97 	bl	8008e58 <sin>
 800432a:	ec53 2b10 	vmov	r2, r3, d0
 800432e:	4650      	mov	r0, sl
 8004330:	4659      	mov	r1, fp
 8004332:	f7fc f905 	bl	8000540 <__aeabi_dmul>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4640      	mov	r0, r8
 800433c:	4649      	mov	r1, r9
 800433e:	f7fb ff49 	bl	80001d4 <__adddf3>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4610      	mov	r0, r2
 8004348:	4619      	mov	r1, r3
 800434a:	f7fc fb93 	bl	8000a74 <__aeabi_d2iz>
 800434e:	4603      	mov	r3, r0
 8004350:	61fb      	str	r3, [r7, #28]
    y = y_coor + (length) * -cos(angle_hour);
 8004352:	6938      	ldr	r0, [r7, #16]
 8004354:	f7fc f88a 	bl	800046c <__aeabi_i2d>
 8004358:	4680      	mov	r8, r0
 800435a:	4689      	mov	r9, r1
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7fc f885 	bl	800046c <__aeabi_i2d>
 8004362:	4682      	mov	sl, r0
 8004364:	468b      	mov	fp, r1
 8004366:	4b20      	ldr	r3, [pc, #128]	@ (80043e8 <displayHourClockwise+0x238>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fc f890 	bl	8000490 <__aeabi_f2d>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	ec43 2b10 	vmov	d0, r2, r3
 8004378:	f004 fd1a 	bl	8008db0 <cos>
 800437c:	ec53 2b10 	vmov	r2, r3, d0
 8004380:	4614      	mov	r4, r2
 8004382:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8004386:	4622      	mov	r2, r4
 8004388:	462b      	mov	r3, r5
 800438a:	4650      	mov	r0, sl
 800438c:	4659      	mov	r1, fp
 800438e:	f7fc f8d7 	bl	8000540 <__aeabi_dmul>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4640      	mov	r0, r8
 8004398:	4649      	mov	r1, r9
 800439a:	f7fb ff1b 	bl	80001d4 <__adddf3>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	f7fc fb65 	bl	8000a74 <__aeabi_d2iz>
 80043aa:	4603      	mov	r3, r0
 80043ac:	61bb      	str	r3, [r7, #24]
    lcdDrawLine(x_coor, y_coor, x, y, color);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	b298      	uxth	r0, r3
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	b299      	uxth	r1, r3
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	b29c      	uxth	r4, r3
 80043be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	4623      	mov	r3, r4
 80043c6:	f7fd fb3a 	bl	8001a3e <lcdDrawLine>

    return angle_hour;
 80043ca:	4b07      	ldr	r3, [pc, #28]	@ (80043e8 <displayHourClockwise+0x238>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	ee07 3a90 	vmov	s15, r3
}
 80043d2:	eeb0 0a67 	vmov.f32	s0, s15
 80043d6:	3724      	adds	r7, #36	@ 0x24
 80043d8:	46bd      	mov	sp, r7
 80043da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043de:	bf00      	nop
 80043e0:	a2529d39 	.word	0xa2529d39
 80043e4:	3f91df46 	.word	0x3f91df46
 80043e8:	20000148 	.word	0x20000148
 80043ec:	aaaaaaab 	.word	0xaaaaaaab
 80043f0:	404e0000 	.word	0x404e0000
 80043f4:	403e0000 	.word	0x403e0000

080043f8 <displayTime>:

void displayTime(int x_coor, int y_coor, const uint8_t *second, const uint8_t *minute, const uint8_t *hour,
		uint8_t char_size, uint16_t color_sec, uint16_t color_min, uint16_t color_hour)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af04      	add	r7, sp, #16
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
	lcdShowIntNumCenter(x_coor - char_size * 2, y_coor, *hour, 2, color_hour, WHITE, char_size, 0);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	b29a      	uxth	r2, r3
 800440a:	7f3b      	ldrb	r3, [r7, #28]
 800440c:	b29b      	uxth	r3, r3
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	b29b      	uxth	r3, r3
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	b298      	uxth	r0, r3
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	b299      	uxth	r1, r3
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	2300      	movs	r3, #0
 8004422:	9303      	str	r3, [sp, #12]
 8004424:	7f3b      	ldrb	r3, [r7, #28]
 8004426:	9302      	str	r3, [sp, #8]
 8004428:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800442c:	9301      	str	r3, [sp, #4]
 800442e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	2302      	movs	r3, #2
 8004434:	f7fd fc74 	bl	8001d20 <lcdShowIntNumCenter>
	lcdShowIntNumCenter(x_coor, y_coor, *minute, 2, color_min, WHITE, char_size, 0);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	b298      	uxth	r0, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	b299      	uxth	r1, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	2300      	movs	r3, #0
 8004448:	9303      	str	r3, [sp, #12]
 800444a:	7f3b      	ldrb	r3, [r7, #28]
 800444c:	9302      	str	r3, [sp, #8]
 800444e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	2302      	movs	r3, #2
 800445a:	f7fd fc61 	bl	8001d20 <lcdShowIntNumCenter>
	lcdShowIntNumCenter(x_coor + char_size * 2 , y_coor, *second, 2, color_sec, WHITE, char_size, 0);
 800445e:	7f3b      	ldrb	r3, [r7, #28]
 8004460:	b29b      	uxth	r3, r3
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	b29b      	uxth	r3, r3
 800446a:	4413      	add	r3, r2
 800446c:	b298      	uxth	r0, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	b299      	uxth	r1, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	2300      	movs	r3, #0
 800447a:	9303      	str	r3, [sp, #12]
 800447c:	7f3b      	ldrb	r3, [r7, #28]
 800447e:	9302      	str	r3, [sp, #8]
 8004480:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	8c3b      	ldrh	r3, [r7, #32]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	2302      	movs	r3, #2
 800448c:	f7fd fc48 	bl	8001d20 <lcdShowIntNumCenter>

	lcdShowStringCenter(x_coor + char_size, y_coor, ":", BLACK, WHITE, char_size, 1);
 8004490:	7f3b      	ldrb	r3, [r7, #28]
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	b29b      	uxth	r3, r3
 8004498:	4413      	add	r3, r2
 800449a:	b298      	uxth	r0, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	b299      	uxth	r1, r3
 80044a0:	2301      	movs	r3, #1
 80044a2:	9302      	str	r3, [sp, #8]
 80044a4:	7f3b      	ldrb	r3, [r7, #28]
 80044a6:	9301      	str	r3, [sp, #4]
 80044a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	2300      	movs	r3, #0
 80044b0:	4a0f      	ldr	r2, [pc, #60]	@ (80044f0 <displayTime+0xf8>)
 80044b2:	f7fd ffa9 	bl	8002408 <lcdShowStringCenter>
	lcdShowStringCenter(x_coor - (char_size * 2) + char_size, y_coor, ":", BLACK, WHITE, char_size, 1);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	7f3b      	ldrb	r3, [r7, #28]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	7f3b      	ldrb	r3, [r7, #28]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	b298      	uxth	r0, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	b299      	uxth	r1, r3
 80044d2:	2301      	movs	r3, #1
 80044d4:	9302      	str	r3, [sp, #8]
 80044d6:	7f3b      	ldrb	r3, [r7, #28]
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2300      	movs	r3, #0
 80044e2:	4a03      	ldr	r2, [pc, #12]	@ (80044f0 <displayTime+0xf8>)
 80044e4:	f7fd ff90 	bl	8002408 <lcdShowStringCenter>
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	08009ed0 	.word	0x08009ed0

080044f4 <displayDate>:

void displayDate(int x_coor, int y_coor, const uint8_t *date, const uint8_t *month, const uint16_t *year,
		uint8_t char_size, uint16_t color_date, uint16_t color_month, uint16_t color_year)
{
 80044f4:	b5b0      	push	{r4, r5, r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af04      	add	r7, sp, #16
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
	lcdShowIntNumCenter(x_coor - char_size * 2, y_coor, *date, 2, color_date, WHITE, char_size, 0);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	b29a      	uxth	r2, r3
 8004506:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800450a:	b29b      	uxth	r3, r3
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	b298      	uxth	r0, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	b299      	uxth	r1, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	2300      	movs	r3, #0
 8004520:	9303      	str	r3, [sp, #12]
 8004522:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004526:	9302      	str	r3, [sp, #8]
 8004528:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2302      	movs	r3, #2
 8004534:	f7fd fbf4 	bl	8001d20 <lcdShowIntNumCenter>
	lcdShowIntNumCenter(x_coor, y_coor, *month, 2, color_month, WHITE, char_size, 0);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	b298      	uxth	r0, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	b299      	uxth	r1, r3
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	2300      	movs	r3, #0
 8004548:	9303      	str	r3, [sp, #12]
 800454a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800454e:	9302      	str	r3, [sp, #8]
 8004550:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	2302      	movs	r3, #2
 800455c:	f7fd fbe0 	bl	8001d20 <lcdShowIntNumCenter>
	lcdShowIntNumCenter(x_coor + char_size * 2 + char_size / 2.0, y_coor, *year, 4, color_year, WHITE, char_size, 0);
 8004560:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004564:	005a      	lsls	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f7fb ff7e 	bl	800046c <__aeabi_i2d>
 8004570:	4604      	mov	r4, r0
 8004572:	460d      	mov	r5, r1
 8004574:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004578:	4618      	mov	r0, r3
 800457a:	f7fb ff77 	bl	800046c <__aeabi_i2d>
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004586:	f7fc f905 	bl	8000794 <__aeabi_ddiv>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4620      	mov	r0, r4
 8004590:	4629      	mov	r1, r5
 8004592:	f7fb fe1f 	bl	80001d4 <__adddf3>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4610      	mov	r0, r2
 800459c:	4619      	mov	r1, r3
 800459e:	f7fc fa91 	bl	8000ac4 <__aeabi_d2uiz>
 80045a2:	4603      	mov	r3, r0
 80045a4:	b298      	uxth	r0, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	b299      	uxth	r1, r3
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	881a      	ldrh	r2, [r3, #0]
 80045ae:	2300      	movs	r3, #0
 80045b0:	9303      	str	r3, [sp, #12]
 80045b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045b6:	9302      	str	r3, [sp, #8]
 80045b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	2304      	movs	r3, #4
 80045c4:	f7fd fbac 	bl	8001d20 <lcdShowIntNumCenter>

	lcdShowStringCenter(x_coor + char_size, y_coor, "/", color_month, WHITE, char_size, 1);
 80045c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	4413      	add	r3, r2
 80045d4:	b298      	uxth	r0, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	b299      	uxth	r1, r3
 80045da:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80045dc:	2301      	movs	r3, #1
 80045de:	9302      	str	r3, [sp, #8]
 80045e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	4a12      	ldr	r2, [pc, #72]	@ (8004638 <displayDate+0x144>)
 80045f0:	f7fd ff0a 	bl	8002408 <lcdShowStringCenter>
	lcdShowStringCenter(x_coor - (char_size * 2) + char_size, y_coor, "/", color_month, WHITE, char_size, 1);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	b29b      	uxth	r3, r3
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	b29a      	uxth	r2, r3
 8004606:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800460a:	b29b      	uxth	r3, r3
 800460c:	4413      	add	r3, r2
 800460e:	b298      	uxth	r0, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	b299      	uxth	r1, r3
 8004614:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004616:	2301      	movs	r3, #1
 8004618:	9302      	str	r3, [sp, #8]
 800461a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	4613      	mov	r3, r2
 8004628:	4a03      	ldr	r2, [pc, #12]	@ (8004638 <displayDate+0x144>)
 800462a:	f7fd feed 	bl	8002408 <lcdShowStringCenter>
}
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bdb0      	pop	{r4, r5, r7, pc}
 8004636:	bf00      	nop
 8004638:	08009ed4 	.word	0x08009ed4

0800463c <displayDay>:
{
	lcdShowFloatNum(x_coor, y_coor, temperature, 4, color_temp, WHITE, char_size, 0);
	return;
}
void displayDay(int x_coor, int y_coor, const uint8_t *day, uint8_t char_size, uint16_t color_day)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af04      	add	r7, sp, #16
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	70fb      	strb	r3, [r7, #3]
	switch (*day)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	3b01      	subs	r3, #1
 8004650:	2b06      	cmp	r3, #6
 8004652:	f200 8089 	bhi.w	8004768 <displayDay+0x12c>
 8004656:	a201      	add	r2, pc, #4	@ (adr r2, 800465c <displayDay+0x20>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	08004679 	.word	0x08004679
 8004660:	0800469b 	.word	0x0800469b
 8004664:	080046bd 	.word	0x080046bd
 8004668:	080046df 	.word	0x080046df
 800466c:	08004701 	.word	0x08004701
 8004670:	08004723 	.word	0x08004723
 8004674:	08004745 	.word	0x08004745
	{
		case 1:
		{
			lcdShowString(x_coor, y_coor, "Sunday   ", color_day, WHITE, char_size, 0);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	b298      	uxth	r0, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	b299      	uxth	r1, r3
 8004680:	8b3a      	ldrh	r2, [r7, #24]
 8004682:	2300      	movs	r3, #0
 8004684:	9302      	str	r3, [sp, #8]
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	9301      	str	r3, [sp, #4]
 800468a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	4a37      	ldr	r2, [pc, #220]	@ (8004770 <displayDay+0x134>)
 8004694:	f7fd fe54 	bl	8002340 <lcdShowString>
			break;
 8004698:	e065      	b.n	8004766 <displayDay+0x12a>
		}
		case 2:
		{
			lcdShowString(x_coor, y_coor, "Monday   ", color_day, WHITE, char_size, 0);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	b298      	uxth	r0, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	b299      	uxth	r1, r3
 80046a2:	8b3a      	ldrh	r2, [r7, #24]
 80046a4:	2300      	movs	r3, #0
 80046a6:	9302      	str	r3, [sp, #8]
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	4a2f      	ldr	r2, [pc, #188]	@ (8004774 <displayDay+0x138>)
 80046b6:	f7fd fe43 	bl	8002340 <lcdShowString>
			break;
 80046ba:	e054      	b.n	8004766 <displayDay+0x12a>
		}
		case 3:
		{
			lcdShowString(x_coor, y_coor, "Tuesday  ", color_day, WHITE, char_size, 0);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	b298      	uxth	r0, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	b299      	uxth	r1, r3
 80046c4:	8b3a      	ldrh	r2, [r7, #24]
 80046c6:	2300      	movs	r3, #0
 80046c8:	9302      	str	r3, [sp, #8]
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	4613      	mov	r3, r2
 80046d6:	4a28      	ldr	r2, [pc, #160]	@ (8004778 <displayDay+0x13c>)
 80046d8:	f7fd fe32 	bl	8002340 <lcdShowString>
			break;
 80046dc:	e043      	b.n	8004766 <displayDay+0x12a>
		}
		case 4:
		{
			lcdShowString(x_coor, y_coor, "Wednesday", color_day, WHITE, char_size, 0);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	b298      	uxth	r0, r3
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	b299      	uxth	r1, r3
 80046e6:	8b3a      	ldrh	r2, [r7, #24]
 80046e8:	2300      	movs	r3, #0
 80046ea:	9302      	str	r3, [sp, #8]
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	4613      	mov	r3, r2
 80046f8:	4a20      	ldr	r2, [pc, #128]	@ (800477c <displayDay+0x140>)
 80046fa:	f7fd fe21 	bl	8002340 <lcdShowString>
			break;
 80046fe:	e032      	b.n	8004766 <displayDay+0x12a>
		}
		case 5:
		{
			lcdShowString(x_coor, y_coor, "Thursday ", color_day, WHITE, char_size, 0);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	b298      	uxth	r0, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	b299      	uxth	r1, r3
 8004708:	8b3a      	ldrh	r2, [r7, #24]
 800470a:	2300      	movs	r3, #0
 800470c:	9302      	str	r3, [sp, #8]
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	4a19      	ldr	r2, [pc, #100]	@ (8004780 <displayDay+0x144>)
 800471c:	f7fd fe10 	bl	8002340 <lcdShowString>
			break;
 8004720:	e021      	b.n	8004766 <displayDay+0x12a>
		}
		case 6:
		{
			lcdShowString(x_coor, y_coor, "Friday", color_day, WHITE, char_size, 0);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	b298      	uxth	r0, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	b299      	uxth	r1, r3
 800472a:	8b3a      	ldrh	r2, [r7, #24]
 800472c:	2300      	movs	r3, #0
 800472e:	9302      	str	r3, [sp, #8]
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	4a11      	ldr	r2, [pc, #68]	@ (8004784 <displayDay+0x148>)
 800473e:	f7fd fdff 	bl	8002340 <lcdShowString>
			break;
 8004742:	e010      	b.n	8004766 <displayDay+0x12a>
		}
		case 7:
		{
			lcdShowString(x_coor, y_coor, "Saturday", color_day, WHITE, char_size, 0);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	b298      	uxth	r0, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	b299      	uxth	r1, r3
 800474c:	8b3a      	ldrh	r2, [r7, #24]
 800474e:	2300      	movs	r3, #0
 8004750:	9302      	str	r3, [sp, #8]
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	4a0a      	ldr	r2, [pc, #40]	@ (8004788 <displayDay+0x14c>)
 8004760:	f7fd fdee 	bl	8002340 <lcdShowString>
			break;
 8004764:	bf00      	nop
		}
	}
	return;
 8004766:	bf00      	nop
 8004768:	bf00      	nop
}
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	08009ed8 	.word	0x08009ed8
 8004774:	08009ee4 	.word	0x08009ee4
 8004778:	08009ef0 	.word	0x08009ef0
 800477c:	08009efc 	.word	0x08009efc
 8004780:	08009f08 	.word	0x08009f08
 8004784:	08009f14 	.word	0x08009f14
 8004788:	08009f1c 	.word	0x08009f1c

0800478c <displayTimeLed7Seg>:

void displayTimeLed7Seg(const uint8_t *second, const uint8_t *minute, const uint8_t *hour)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
	if(((*second / 10) >> 0) & 0x01)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	4a3a      	ldr	r2, [pc, #232]	@ (8004888 <displayTimeLed7Seg+0xfc>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	08db      	lsrs	r3, r3, #3
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <displayTimeLed7Seg+0x2a>
	{
		led7SegDebugTurnOn(6);
 80047ae:	2006      	movs	r0, #6
 80047b0:	f7fd ff64 	bl	800267c <led7SegDebugTurnOn>
 80047b4:	e002      	b.n	80047bc <displayTimeLed7Seg+0x30>
	}
	else
	{
		led7SegDebugTurnOff(6);
 80047b6:	2006      	movs	r0, #6
 80047b8:	f7fd ff82 	bl	80026c0 <led7SegDebugTurnOff>
	}
	if(((*second / 10) >> 1) & 0x01)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	4a31      	ldr	r2, [pc, #196]	@ (8004888 <displayTimeLed7Seg+0xfc>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	08db      	lsrs	r3, r3, #3
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <displayTimeLed7Seg+0x52>
	{
		led7SegDebugTurnOn(7);
 80047d6:	2007      	movs	r0, #7
 80047d8:	f7fd ff50 	bl	800267c <led7SegDebugTurnOn>
 80047dc:	e002      	b.n	80047e4 <displayTimeLed7Seg+0x58>
	}
	else
	{
		led7SegDebugTurnOff(7);
 80047de:	2007      	movs	r0, #7
 80047e0:	f7fd ff6e 	bl	80026c0 <led7SegDebugTurnOff>
	}
	if(((*second / 10) >> 2) & 0x01)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	4a27      	ldr	r2, [pc, #156]	@ (8004888 <displayTimeLed7Seg+0xfc>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	08db      	lsrs	r3, r3, #3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <displayTimeLed7Seg+0x7a>
	{
		led7SegDebugTurnOn(8);
 80047fe:	2008      	movs	r0, #8
 8004800:	f7fd ff3c 	bl	800267c <led7SegDebugTurnOn>
 8004804:	e002      	b.n	800480c <displayTimeLed7Seg+0x80>
	}
	else
	{
		led7SegDebugTurnOff(8);
 8004806:	2008      	movs	r0, #8
 8004808:	f7fd ff5a 	bl	80026c0 <led7SegDebugTurnOff>
	}

	led7SegSetDigit(*hour / 10, 0, 0);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	4a1d      	ldr	r2, [pc, #116]	@ (8004888 <displayTimeLed7Seg+0xfc>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	08db      	lsrs	r3, r3, #3
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2200      	movs	r2, #0
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f7fd feda 	bl	80025d8 <led7SegSetDigit>
	led7SegSetDigit(*hour % 10, 1, 0);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	781a      	ldrb	r2, [r3, #0]
 8004828:	4b17      	ldr	r3, [pc, #92]	@ (8004888 <displayTimeLed7Seg+0xfc>)
 800482a:	fba3 1302 	umull	r1, r3, r3, r2
 800482e:	08d9      	lsrs	r1, r3, #3
 8004830:	460b      	mov	r3, r1
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2200      	movs	r2, #0
 800483e:	2101      	movs	r1, #1
 8004840:	4618      	mov	r0, r3
 8004842:	f7fd fec9 	bl	80025d8 <led7SegSetDigit>

	led7SegSetDigit(*minute / 10, 2, 0);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	4a0f      	ldr	r2, [pc, #60]	@ (8004888 <displayTimeLed7Seg+0xfc>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	08db      	lsrs	r3, r3, #3
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2200      	movs	r2, #0
 8004856:	2102      	movs	r1, #2
 8004858:	4618      	mov	r0, r3
 800485a:	f7fd febd 	bl	80025d8 <led7SegSetDigit>
	led7SegSetDigit(*minute % 10, 3, 0);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	781a      	ldrb	r2, [r3, #0]
 8004862:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <displayTimeLed7Seg+0xfc>)
 8004864:	fba3 1302 	umull	r1, r3, r3, r2
 8004868:	08d9      	lsrs	r1, r3, #3
 800486a:	460b      	mov	r3, r1
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2200      	movs	r2, #0
 8004878:	2103      	movs	r1, #3
 800487a:	4618      	mov	r0, r3
 800487c:	f7fd feac 	bl	80025d8 <led7SegSetDigit>

	return;
 8004880:	bf00      	nop
}
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	cccccccd 	.word	0xcccccccd

0800488c <increaseSec>:

void increaseSec()
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
    if (set_time.second < 59)
 8004890:	4b17      	ldr	r3, [pc, #92]	@ (80048f0 <increaseSec+0x64>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b3a      	cmp	r3, #58	@ 0x3a
 8004896:	d806      	bhi.n	80048a6 <increaseSec+0x1a>
    {
        set_time.second += 1;
 8004898:	4b15      	ldr	r3, [pc, #84]	@ (80048f0 <increaseSec+0x64>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	3301      	adds	r3, #1
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	4b13      	ldr	r3, [pc, #76]	@ (80048f0 <increaseSec+0x64>)
 80048a2:	701a      	strb	r2, [r3, #0]
            {
                set_time.hour = 0;
            }
        }
    }
}
 80048a4:	e01e      	b.n	80048e4 <increaseSec+0x58>
        set_time.second = 0;
 80048a6:	4b12      	ldr	r3, [pc, #72]	@ (80048f0 <increaseSec+0x64>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
        if (set_time.minute < 59)
 80048ac:	4b10      	ldr	r3, [pc, #64]	@ (80048f0 <increaseSec+0x64>)
 80048ae:	785b      	ldrb	r3, [r3, #1]
 80048b0:	2b3a      	cmp	r3, #58	@ 0x3a
 80048b2:	d806      	bhi.n	80048c2 <increaseSec+0x36>
            set_time.minute += 1;
 80048b4:	4b0e      	ldr	r3, [pc, #56]	@ (80048f0 <increaseSec+0x64>)
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	3301      	adds	r3, #1
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <increaseSec+0x64>)
 80048be:	705a      	strb	r2, [r3, #1]
}
 80048c0:	e010      	b.n	80048e4 <increaseSec+0x58>
            set_time.minute = 0;
 80048c2:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <increaseSec+0x64>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	705a      	strb	r2, [r3, #1]
            if (set_time.hour < 23)
 80048c8:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <increaseSec+0x64>)
 80048ca:	789b      	ldrb	r3, [r3, #2]
 80048cc:	2b16      	cmp	r3, #22
 80048ce:	d806      	bhi.n	80048de <increaseSec+0x52>
                set_time.hour += 1;
 80048d0:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <increaseSec+0x64>)
 80048d2:	789b      	ldrb	r3, [r3, #2]
 80048d4:	3301      	adds	r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	4b05      	ldr	r3, [pc, #20]	@ (80048f0 <increaseSec+0x64>)
 80048da:	709a      	strb	r2, [r3, #2]
}
 80048dc:	e002      	b.n	80048e4 <increaseSec+0x58>
                set_time.hour = 0;
 80048de:	4b04      	ldr	r3, [pc, #16]	@ (80048f0 <increaseSec+0x64>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	709a      	strb	r2, [r3, #2]
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000000 	.word	0x20000000

080048f4 <decreaseSec>:
void decreaseSec()
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
    if (set_time.second > 0)
 80048f8:	4b17      	ldr	r3, [pc, #92]	@ (8004958 <decreaseSec+0x64>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d006      	beq.n	800490e <decreaseSec+0x1a>
    {
        set_time.second -= 1;
 8004900:	4b15      	ldr	r3, [pc, #84]	@ (8004958 <decreaseSec+0x64>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	3b01      	subs	r3, #1
 8004906:	b2da      	uxtb	r2, r3
 8004908:	4b13      	ldr	r3, [pc, #76]	@ (8004958 <decreaseSec+0x64>)
 800490a:	701a      	strb	r2, [r3, #0]
            {
                set_time.hour = 23;
            }
        }
    }
}
 800490c:	e01e      	b.n	800494c <decreaseSec+0x58>
        set_time.second = 59;
 800490e:	4b12      	ldr	r3, [pc, #72]	@ (8004958 <decreaseSec+0x64>)
 8004910:	223b      	movs	r2, #59	@ 0x3b
 8004912:	701a      	strb	r2, [r3, #0]
        if (set_time.minute > 0)
 8004914:	4b10      	ldr	r3, [pc, #64]	@ (8004958 <decreaseSec+0x64>)
 8004916:	785b      	ldrb	r3, [r3, #1]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d006      	beq.n	800492a <decreaseSec+0x36>
            set_time.minute -= 1;
 800491c:	4b0e      	ldr	r3, [pc, #56]	@ (8004958 <decreaseSec+0x64>)
 800491e:	785b      	ldrb	r3, [r3, #1]
 8004920:	3b01      	subs	r3, #1
 8004922:	b2da      	uxtb	r2, r3
 8004924:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <decreaseSec+0x64>)
 8004926:	705a      	strb	r2, [r3, #1]
}
 8004928:	e010      	b.n	800494c <decreaseSec+0x58>
            set_time.minute = 59;
 800492a:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <decreaseSec+0x64>)
 800492c:	223b      	movs	r2, #59	@ 0x3b
 800492e:	705a      	strb	r2, [r3, #1]
            if (set_time.hour > 0)
 8004930:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <decreaseSec+0x64>)
 8004932:	789b      	ldrb	r3, [r3, #2]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d006      	beq.n	8004946 <decreaseSec+0x52>
                set_time.hour -= 1;
 8004938:	4b07      	ldr	r3, [pc, #28]	@ (8004958 <decreaseSec+0x64>)
 800493a:	789b      	ldrb	r3, [r3, #2]
 800493c:	3b01      	subs	r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <decreaseSec+0x64>)
 8004942:	709a      	strb	r2, [r3, #2]
}
 8004944:	e002      	b.n	800494c <decreaseSec+0x58>
                set_time.hour = 23;
 8004946:	4b04      	ldr	r3, [pc, #16]	@ (8004958 <decreaseSec+0x64>)
 8004948:	2217      	movs	r2, #23
 800494a:	709a      	strb	r2, [r3, #2]
}
 800494c:	bf00      	nop
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000000 	.word	0x20000000

0800495c <increaseMin>:
void increaseMin()
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
    if (set_time.minute < 59)
 8004960:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <increaseMin+0x48>)
 8004962:	785b      	ldrb	r3, [r3, #1]
 8004964:	2b3a      	cmp	r3, #58	@ 0x3a
 8004966:	d806      	bhi.n	8004976 <increaseMin+0x1a>
    {
        set_time.minute += 1;
 8004968:	4b0e      	ldr	r3, [pc, #56]	@ (80049a4 <increaseMin+0x48>)
 800496a:	785b      	ldrb	r3, [r3, #1]
 800496c:	3301      	adds	r3, #1
 800496e:	b2da      	uxtb	r2, r3
 8004970:	4b0c      	ldr	r3, [pc, #48]	@ (80049a4 <increaseMin+0x48>)
 8004972:	705a      	strb	r2, [r3, #1]
        else
        {
            set_time.hour = 0;
        }
    }
}
 8004974:	e010      	b.n	8004998 <increaseMin+0x3c>
        set_time.minute = 0;
 8004976:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <increaseMin+0x48>)
 8004978:	2200      	movs	r2, #0
 800497a:	705a      	strb	r2, [r3, #1]
        if (set_time.hour < 23)
 800497c:	4b09      	ldr	r3, [pc, #36]	@ (80049a4 <increaseMin+0x48>)
 800497e:	789b      	ldrb	r3, [r3, #2]
 8004980:	2b16      	cmp	r3, #22
 8004982:	d806      	bhi.n	8004992 <increaseMin+0x36>
            set_time.hour += 1;
 8004984:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <increaseMin+0x48>)
 8004986:	789b      	ldrb	r3, [r3, #2]
 8004988:	3301      	adds	r3, #1
 800498a:	b2da      	uxtb	r2, r3
 800498c:	4b05      	ldr	r3, [pc, #20]	@ (80049a4 <increaseMin+0x48>)
 800498e:	709a      	strb	r2, [r3, #2]
}
 8004990:	e002      	b.n	8004998 <increaseMin+0x3c>
            set_time.hour = 0;
 8004992:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <increaseMin+0x48>)
 8004994:	2200      	movs	r2, #0
 8004996:	709a      	strb	r2, [r3, #2]
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000000 	.word	0x20000000

080049a8 <decreaseMin>:

void decreaseMin()
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
    if (set_time.minute > 0)
 80049ac:	4b10      	ldr	r3, [pc, #64]	@ (80049f0 <decreaseMin+0x48>)
 80049ae:	785b      	ldrb	r3, [r3, #1]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d006      	beq.n	80049c2 <decreaseMin+0x1a>
    {
        set_time.minute -= 1;
 80049b4:	4b0e      	ldr	r3, [pc, #56]	@ (80049f0 <decreaseMin+0x48>)
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <decreaseMin+0x48>)
 80049be:	705a      	strb	r2, [r3, #1]
        else
        {
            set_time.hour = 23;
        }
    }
}
 80049c0:	e010      	b.n	80049e4 <decreaseMin+0x3c>
        set_time.minute = 59;
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <decreaseMin+0x48>)
 80049c4:	223b      	movs	r2, #59	@ 0x3b
 80049c6:	705a      	strb	r2, [r3, #1]
        if (set_time.hour > 0)
 80049c8:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <decreaseMin+0x48>)
 80049ca:	789b      	ldrb	r3, [r3, #2]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d006      	beq.n	80049de <decreaseMin+0x36>
            set_time.hour -= 1;
 80049d0:	4b07      	ldr	r3, [pc, #28]	@ (80049f0 <decreaseMin+0x48>)
 80049d2:	789b      	ldrb	r3, [r3, #2]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <decreaseMin+0x48>)
 80049da:	709a      	strb	r2, [r3, #2]
}
 80049dc:	e002      	b.n	80049e4 <decreaseMin+0x3c>
            set_time.hour = 23;
 80049de:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <decreaseMin+0x48>)
 80049e0:	2217      	movs	r2, #23
 80049e2:	709a      	strb	r2, [r3, #2]
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20000000 	.word	0x20000000

080049f4 <increaseHour>:

void increaseHour()
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
    if (set_time.hour < 23)
 80049f8:	4b09      	ldr	r3, [pc, #36]	@ (8004a20 <increaseHour+0x2c>)
 80049fa:	789b      	ldrb	r3, [r3, #2]
 80049fc:	2b16      	cmp	r3, #22
 80049fe:	d806      	bhi.n	8004a0e <increaseHour+0x1a>
    {
        set_time.hour += 1;
 8004a00:	4b07      	ldr	r3, [pc, #28]	@ (8004a20 <increaseHour+0x2c>)
 8004a02:	789b      	ldrb	r3, [r3, #2]
 8004a04:	3301      	adds	r3, #1
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <increaseHour+0x2c>)
 8004a0a:	709a      	strb	r2, [r3, #2]
    }
    else
    {
        set_time.hour = 0;
    }
}
 8004a0c:	e002      	b.n	8004a14 <increaseHour+0x20>
        set_time.hour = 0;
 8004a0e:	4b04      	ldr	r3, [pc, #16]	@ (8004a20 <increaseHour+0x2c>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	709a      	strb	r2, [r3, #2]
}
 8004a14:	bf00      	nop
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20000000 	.word	0x20000000

08004a24 <decreaseHour>:

void decreaseHour()
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
    if (set_time.hour > 0)
 8004a28:	4b09      	ldr	r3, [pc, #36]	@ (8004a50 <decreaseHour+0x2c>)
 8004a2a:	789b      	ldrb	r3, [r3, #2]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d006      	beq.n	8004a3e <decreaseHour+0x1a>
    {
        set_time.hour -= 1;
 8004a30:	4b07      	ldr	r3, [pc, #28]	@ (8004a50 <decreaseHour+0x2c>)
 8004a32:	789b      	ldrb	r3, [r3, #2]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <decreaseHour+0x2c>)
 8004a3a:	709a      	strb	r2, [r3, #2]
    }
    else
    {
        set_time.hour = 23;
    }
}
 8004a3c:	e002      	b.n	8004a44 <decreaseHour+0x20>
        set_time.hour = 23;
 8004a3e:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <decreaseHour+0x2c>)
 8004a40:	2217      	movs	r2, #23
 8004a42:	709a      	strb	r2, [r3, #2]
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000000 	.word	0x20000000

08004a54 <increaseDay>:

void increaseDay()
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
    if (set_time.day < 7)
 8004a58:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <increaseDay+0x2c>)
 8004a5a:	78db      	ldrb	r3, [r3, #3]
 8004a5c:	2b06      	cmp	r3, #6
 8004a5e:	d806      	bhi.n	8004a6e <increaseDay+0x1a>
    {
        set_time.day += 1;
 8004a60:	4b07      	ldr	r3, [pc, #28]	@ (8004a80 <increaseDay+0x2c>)
 8004a62:	78db      	ldrb	r3, [r3, #3]
 8004a64:	3301      	adds	r3, #1
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <increaseDay+0x2c>)
 8004a6a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        set_time.day = 1;
    }
}
 8004a6c:	e002      	b.n	8004a74 <increaseDay+0x20>
        set_time.day = 1;
 8004a6e:	4b04      	ldr	r3, [pc, #16]	@ (8004a80 <increaseDay+0x2c>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	70da      	strb	r2, [r3, #3]
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000000 	.word	0x20000000

08004a84 <decreaseDay>:

void decreaseDay()
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
    if (set_time.day > 1)
 8004a88:	4b09      	ldr	r3, [pc, #36]	@ (8004ab0 <decreaseDay+0x2c>)
 8004a8a:	78db      	ldrb	r3, [r3, #3]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d906      	bls.n	8004a9e <decreaseDay+0x1a>
    {
        set_time.day -= 1;
 8004a90:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <decreaseDay+0x2c>)
 8004a92:	78db      	ldrb	r3, [r3, #3]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	4b05      	ldr	r3, [pc, #20]	@ (8004ab0 <decreaseDay+0x2c>)
 8004a9a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
        set_time.day = 7;
    }
}
 8004a9c:	e002      	b.n	8004aa4 <decreaseDay+0x20>
        set_time.day = 7;
 8004a9e:	4b04      	ldr	r3, [pc, #16]	@ (8004ab0 <decreaseDay+0x2c>)
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	70da      	strb	r2, [r3, #3]
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	20000000 	.word	0x20000000

08004ab4 <increaseDate>:
void increaseDate()
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
    int daysInMonth = getDaysInMonth(set_time.month, set_time.year);
 8004aba:	4b19      	ldr	r3, [pc, #100]	@ (8004b20 <increaseDate+0x6c>)
 8004abc:	795b      	ldrb	r3, [r3, #5]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	4b17      	ldr	r3, [pc, #92]	@ (8004b20 <increaseDate+0x6c>)
 8004ac2:	88db      	ldrh	r3, [r3, #6]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f000 f91e 	bl	8004d08 <getDaysInMonth>
 8004acc:	6078      	str	r0, [r7, #4]
    if (set_time.date < daysInMonth)
 8004ace:	4b14      	ldr	r3, [pc, #80]	@ (8004b20 <increaseDate+0x6c>)
 8004ad0:	791b      	ldrb	r3, [r3, #4]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	dd06      	ble.n	8004ae8 <increaseDate+0x34>
    {
        set_time.date += 1;
 8004ada:	4b11      	ldr	r3, [pc, #68]	@ (8004b20 <increaseDate+0x6c>)
 8004adc:	791b      	ldrb	r3, [r3, #4]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8004b20 <increaseDate+0x6c>)
 8004ae4:	711a      	strb	r2, [r3, #4]
        {
            set_time.month = 1;
            set_time.year += 1;
        }
    }
}
 8004ae6:	e016      	b.n	8004b16 <increaseDate+0x62>
        set_time.date = 1;
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <increaseDate+0x6c>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	711a      	strb	r2, [r3, #4]
        if (set_time.month < 12)
 8004aee:	4b0c      	ldr	r3, [pc, #48]	@ (8004b20 <increaseDate+0x6c>)
 8004af0:	795b      	ldrb	r3, [r3, #5]
 8004af2:	2b0b      	cmp	r3, #11
 8004af4:	d806      	bhi.n	8004b04 <increaseDate+0x50>
            set_time.month += 1;
 8004af6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <increaseDate+0x6c>)
 8004af8:	795b      	ldrb	r3, [r3, #5]
 8004afa:	3301      	adds	r3, #1
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	4b08      	ldr	r3, [pc, #32]	@ (8004b20 <increaseDate+0x6c>)
 8004b00:	715a      	strb	r2, [r3, #5]
}
 8004b02:	e008      	b.n	8004b16 <increaseDate+0x62>
            set_time.month = 1;
 8004b04:	4b06      	ldr	r3, [pc, #24]	@ (8004b20 <increaseDate+0x6c>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	715a      	strb	r2, [r3, #5]
            set_time.year += 1;
 8004b0a:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <increaseDate+0x6c>)
 8004b0c:	88db      	ldrh	r3, [r3, #6]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	4b03      	ldr	r3, [pc, #12]	@ (8004b20 <increaseDate+0x6c>)
 8004b14:	80da      	strh	r2, [r3, #6]
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000000 	.word	0x20000000

08004b24 <decreaseDate>:

void decreaseDate()
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
    if (set_time.date > 1)
 8004b28:	4b16      	ldr	r3, [pc, #88]	@ (8004b84 <decreaseDate+0x60>)
 8004b2a:	791b      	ldrb	r3, [r3, #4]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d906      	bls.n	8004b3e <decreaseDate+0x1a>
    {
        set_time.date -= 1;
 8004b30:	4b14      	ldr	r3, [pc, #80]	@ (8004b84 <decreaseDate+0x60>)
 8004b32:	791b      	ldrb	r3, [r3, #4]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	4b12      	ldr	r3, [pc, #72]	@ (8004b84 <decreaseDate+0x60>)
 8004b3a:	711a      	strb	r2, [r3, #4]
            set_time.month = 12;
            set_time.year -= 1;
        }
        set_time.date = getDaysInMonth(set_time.month, set_time.year);
    }
}
 8004b3c:	e020      	b.n	8004b80 <decreaseDate+0x5c>
        if (set_time.month > 1)
 8004b3e:	4b11      	ldr	r3, [pc, #68]	@ (8004b84 <decreaseDate+0x60>)
 8004b40:	795b      	ldrb	r3, [r3, #5]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d906      	bls.n	8004b54 <decreaseDate+0x30>
            set_time.month -= 1;
 8004b46:	4b0f      	ldr	r3, [pc, #60]	@ (8004b84 <decreaseDate+0x60>)
 8004b48:	795b      	ldrb	r3, [r3, #5]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <decreaseDate+0x60>)
 8004b50:	715a      	strb	r2, [r3, #5]
 8004b52:	e008      	b.n	8004b66 <decreaseDate+0x42>
            set_time.month = 12;
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <decreaseDate+0x60>)
 8004b56:	220c      	movs	r2, #12
 8004b58:	715a      	strb	r2, [r3, #5]
            set_time.year -= 1;
 8004b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b84 <decreaseDate+0x60>)
 8004b5c:	88db      	ldrh	r3, [r3, #6]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <decreaseDate+0x60>)
 8004b64:	80da      	strh	r2, [r3, #6]
        set_time.date = getDaysInMonth(set_time.month, set_time.year);
 8004b66:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <decreaseDate+0x60>)
 8004b68:	795b      	ldrb	r3, [r3, #5]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <decreaseDate+0x60>)
 8004b6e:	88db      	ldrh	r3, [r3, #6]
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 f8c8 	bl	8004d08 <getDaysInMonth>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	4b01      	ldr	r3, [pc, #4]	@ (8004b84 <decreaseDate+0x60>)
 8004b7e:	711a      	strb	r2, [r3, #4]
}
 8004b80:	bf00      	nop
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000000 	.word	0x20000000

08004b88 <increaseMonth>:

void increaseMonth()
{
 8004b88:	b598      	push	{r3, r4, r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
    if (set_time.month < 12)
 8004b8c:	4b18      	ldr	r3, [pc, #96]	@ (8004bf0 <increaseMonth+0x68>)
 8004b8e:	795b      	ldrb	r3, [r3, #5]
 8004b90:	2b0b      	cmp	r3, #11
 8004b92:	d806      	bhi.n	8004ba2 <increaseMonth+0x1a>
    {
        set_time.month += 1;
 8004b94:	4b16      	ldr	r3, [pc, #88]	@ (8004bf0 <increaseMonth+0x68>)
 8004b96:	795b      	ldrb	r3, [r3, #5]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	4b14      	ldr	r3, [pc, #80]	@ (8004bf0 <increaseMonth+0x68>)
 8004b9e:	715a      	strb	r2, [r3, #5]
 8004ba0:	e008      	b.n	8004bb4 <increaseMonth+0x2c>
    }
    else
    {
        set_time.month = 1;
 8004ba2:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <increaseMonth+0x68>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	715a      	strb	r2, [r3, #5]
        set_time.year += 1;
 8004ba8:	4b11      	ldr	r3, [pc, #68]	@ (8004bf0 <increaseMonth+0x68>)
 8004baa:	88db      	ldrh	r3, [r3, #6]
 8004bac:	3301      	adds	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf0 <increaseMonth+0x68>)
 8004bb2:	80da      	strh	r2, [r3, #6]
    }

    if(set_time.day > (uint8_t)(getDaysInMonth(set_time.month, set_time.year)))
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf0 <increaseMonth+0x68>)
 8004bb6:	78dc      	ldrb	r4, [r3, #3]
 8004bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <increaseMonth+0x68>)
 8004bba:	795b      	ldrb	r3, [r3, #5]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf0 <increaseMonth+0x68>)
 8004bc0:	88db      	ldrh	r3, [r3, #6]
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f000 f89f 	bl	8004d08 <getDaysInMonth>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	429c      	cmp	r4, r3
 8004bd0:	d90c      	bls.n	8004bec <increaseMonth+0x64>
	{
		set_time.day = (uint8_t)(getDaysInMonth(set_time.month, set_time.year));
 8004bd2:	4b07      	ldr	r3, [pc, #28]	@ (8004bf0 <increaseMonth+0x68>)
 8004bd4:	795b      	ldrb	r3, [r3, #5]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4b05      	ldr	r3, [pc, #20]	@ (8004bf0 <increaseMonth+0x68>)
 8004bda:	88db      	ldrh	r3, [r3, #6]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4610      	mov	r0, r2
 8004be0:	f000 f892 	bl	8004d08 <getDaysInMonth>
 8004be4:	4603      	mov	r3, r0
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	4b01      	ldr	r3, [pc, #4]	@ (8004bf0 <increaseMonth+0x68>)
 8004bea:	70da      	strb	r2, [r3, #3]
	}
}
 8004bec:	bf00      	nop
 8004bee:	bd98      	pop	{r3, r4, r7, pc}
 8004bf0:	20000000 	.word	0x20000000

08004bf4 <decreaseMonth>:

void decreaseMonth()
{
 8004bf4:	b598      	push	{r3, r4, r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
    if (set_time.month > 1)
 8004bf8:	4b18      	ldr	r3, [pc, #96]	@ (8004c5c <decreaseMonth+0x68>)
 8004bfa:	795b      	ldrb	r3, [r3, #5]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d906      	bls.n	8004c0e <decreaseMonth+0x1a>
    {
        set_time.month -= 1;
 8004c00:	4b16      	ldr	r3, [pc, #88]	@ (8004c5c <decreaseMonth+0x68>)
 8004c02:	795b      	ldrb	r3, [r3, #5]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	4b14      	ldr	r3, [pc, #80]	@ (8004c5c <decreaseMonth+0x68>)
 8004c0a:	715a      	strb	r2, [r3, #5]
 8004c0c:	e008      	b.n	8004c20 <decreaseMonth+0x2c>
    }
    else
    {
        set_time.month = 12;
 8004c0e:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <decreaseMonth+0x68>)
 8004c10:	220c      	movs	r2, #12
 8004c12:	715a      	strb	r2, [r3, #5]
        set_time.year -= 1;
 8004c14:	4b11      	ldr	r3, [pc, #68]	@ (8004c5c <decreaseMonth+0x68>)
 8004c16:	88db      	ldrh	r3, [r3, #6]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c5c <decreaseMonth+0x68>)
 8004c1e:	80da      	strh	r2, [r3, #6]
    }

    if(set_time.day > (uint8_t)(getDaysInMonth(set_time.month, set_time.year)))
 8004c20:	4b0e      	ldr	r3, [pc, #56]	@ (8004c5c <decreaseMonth+0x68>)
 8004c22:	78dc      	ldrb	r4, [r3, #3]
 8004c24:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <decreaseMonth+0x68>)
 8004c26:	795b      	ldrb	r3, [r3, #5]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <decreaseMonth+0x68>)
 8004c2c:	88db      	ldrh	r3, [r3, #6]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f000 f869 	bl	8004d08 <getDaysInMonth>
 8004c36:	4603      	mov	r3, r0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	429c      	cmp	r4, r3
 8004c3c:	d90c      	bls.n	8004c58 <decreaseMonth+0x64>
	{
		set_time.day = (uint8_t)(getDaysInMonth(set_time.month, set_time.year));
 8004c3e:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <decreaseMonth+0x68>)
 8004c40:	795b      	ldrb	r3, [r3, #5]
 8004c42:	461a      	mov	r2, r3
 8004c44:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <decreaseMonth+0x68>)
 8004c46:	88db      	ldrh	r3, [r3, #6]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 f85c 	bl	8004d08 <getDaysInMonth>
 8004c50:	4603      	mov	r3, r0
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	4b01      	ldr	r3, [pc, #4]	@ (8004c5c <decreaseMonth+0x68>)
 8004c56:	70da      	strb	r2, [r3, #3]
	}
}
 8004c58:	bf00      	nop
 8004c5a:	bd98      	pop	{r3, r4, r7, pc}
 8004c5c:	20000000 	.word	0x20000000

08004c60 <increaseYear>:

void increaseYear()
{
 8004c60:	b598      	push	{r3, r4, r7, lr}
 8004c62:	af00      	add	r7, sp, #0
    set_time.year += 1;
 8004c64:	4b11      	ldr	r3, [pc, #68]	@ (8004cac <increaseYear+0x4c>)
 8004c66:	88db      	ldrh	r3, [r3, #6]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004cac <increaseYear+0x4c>)
 8004c6e:	80da      	strh	r2, [r3, #6]

    if(set_time.day > (uint8_t)(getDaysInMonth(set_time.month, set_time.year)))
 8004c70:	4b0e      	ldr	r3, [pc, #56]	@ (8004cac <increaseYear+0x4c>)
 8004c72:	78dc      	ldrb	r4, [r3, #3]
 8004c74:	4b0d      	ldr	r3, [pc, #52]	@ (8004cac <increaseYear+0x4c>)
 8004c76:	795b      	ldrb	r3, [r3, #5]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cac <increaseYear+0x4c>)
 8004c7c:	88db      	ldrh	r3, [r3, #6]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4610      	mov	r0, r2
 8004c82:	f000 f841 	bl	8004d08 <getDaysInMonth>
 8004c86:	4603      	mov	r3, r0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	429c      	cmp	r4, r3
 8004c8c:	d90c      	bls.n	8004ca8 <increaseYear+0x48>
	{
		set_time.day = (uint8_t)(getDaysInMonth(set_time.month, set_time.year));
 8004c8e:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <increaseYear+0x4c>)
 8004c90:	795b      	ldrb	r3, [r3, #5]
 8004c92:	461a      	mov	r2, r3
 8004c94:	4b05      	ldr	r3, [pc, #20]	@ (8004cac <increaseYear+0x4c>)
 8004c96:	88db      	ldrh	r3, [r3, #6]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f000 f834 	bl	8004d08 <getDaysInMonth>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	4b01      	ldr	r3, [pc, #4]	@ (8004cac <increaseYear+0x4c>)
 8004ca6:	70da      	strb	r2, [r3, #3]
	}
}
 8004ca8:	bf00      	nop
 8004caa:	bd98      	pop	{r3, r4, r7, pc}
 8004cac:	20000000 	.word	0x20000000

08004cb0 <decreaseYear>:

void decreaseYear()
{
 8004cb0:	b598      	push	{r3, r4, r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
    if (set_time.year > 0) // Assuming year 0 is a valid boundary
 8004cb4:	4b13      	ldr	r3, [pc, #76]	@ (8004d04 <decreaseYear+0x54>)
 8004cb6:	88db      	ldrh	r3, [r3, #6]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <decreaseYear+0x18>
    {
        set_time.year -= 1;
 8004cbc:	4b11      	ldr	r3, [pc, #68]	@ (8004d04 <decreaseYear+0x54>)
 8004cbe:	88db      	ldrh	r3, [r3, #6]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004d04 <decreaseYear+0x54>)
 8004cc6:	80da      	strh	r2, [r3, #6]
    }

    if(set_time.day > (uint8_t)(getDaysInMonth(set_time.month, set_time.year)))
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004d04 <decreaseYear+0x54>)
 8004cca:	78dc      	ldrb	r4, [r3, #3]
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <decreaseYear+0x54>)
 8004cce:	795b      	ldrb	r3, [r3, #5]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004d04 <decreaseYear+0x54>)
 8004cd4:	88db      	ldrh	r3, [r3, #6]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f000 f815 	bl	8004d08 <getDaysInMonth>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	429c      	cmp	r4, r3
 8004ce4:	d90c      	bls.n	8004d00 <decreaseYear+0x50>
    {
        set_time.day = (uint8_t)(getDaysInMonth(set_time.month, set_time.year));
 8004ce6:	4b07      	ldr	r3, [pc, #28]	@ (8004d04 <decreaseYear+0x54>)
 8004ce8:	795b      	ldrb	r3, [r3, #5]
 8004cea:	461a      	mov	r2, r3
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <decreaseYear+0x54>)
 8004cee:	88db      	ldrh	r3, [r3, #6]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f000 f808 	bl	8004d08 <getDaysInMonth>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	4b01      	ldr	r3, [pc, #4]	@ (8004d04 <decreaseYear+0x54>)
 8004cfe:	70da      	strb	r2, [r3, #3]
    }
}
 8004d00:	bf00      	nop
 8004d02:	bd98      	pop	{r3, r4, r7, pc}
 8004d04:	20000000 	.word	0x20000000

08004d08 <getDaysInMonth>:

// Helper function to get the number of days in a month
int getDaysInMonth(int month, int year)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
    switch (month)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b0c      	cmp	r3, #12
 8004d16:	bf8c      	ite	hi
 8004d18:	2201      	movhi	r2, #1
 8004d1a:	2200      	movls	r2, #0
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	2a00      	cmp	r2, #0
 8004d20:	d147      	bne.n	8004db2 <getDaysInMonth+0xaa>
 8004d22:	2201      	movs	r2, #1
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	f241 52aa 	movw	r2, #5546	@ 0x15aa
 8004d2c:	401a      	ands	r2, r3
 8004d2e:	2a00      	cmp	r2, #0
 8004d30:	bf14      	ite	ne
 8004d32:	2201      	movne	r2, #1
 8004d34:	2200      	moveq	r2, #0
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	2a00      	cmp	r2, #0
 8004d3a:	d112      	bne.n	8004d62 <getDaysInMonth+0x5a>
 8004d3c:	f403 6225 	and.w	r2, r3, #2640	@ 0xa50
 8004d40:	2a00      	cmp	r2, #0
 8004d42:	bf14      	ite	ne
 8004d44:	2201      	movne	r2, #1
 8004d46:	2200      	moveq	r2, #0
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	2a00      	cmp	r2, #0
 8004d4c:	d10b      	bne.n	8004d66 <getDaysInMonth+0x5e>
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf14      	ite	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	2300      	moveq	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <getDaysInMonth+0x62>
 8004d60:	e027      	b.n	8004db2 <getDaysInMonth+0xaa>
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
        {
            return 31;
 8004d62:	231f      	movs	r3, #31
 8004d64:	e026      	b.n	8004db4 <getDaysInMonth+0xac>
        }
        case 4: case 6: case 9: case 11:
        {
            return 30;
 8004d66:	231e      	movs	r3, #30
 8004d68:	e024      	b.n	8004db4 <getDaysInMonth+0xac>
        }
        case 2:
        {
            if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	f003 0303 	and.w	r3, r3, #3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10c      	bne.n	8004d8e <getDaysInMonth+0x86>
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	4b12      	ldr	r3, [pc, #72]	@ (8004dc0 <getDaysInMonth+0xb8>)
 8004d78:	fb83 1302 	smull	r1, r3, r3, r2
 8004d7c:	1159      	asrs	r1, r3, #5
 8004d7e:	17d3      	asrs	r3, r2, #31
 8004d80:	1acb      	subs	r3, r1, r3
 8004d82:	2164      	movs	r1, #100	@ 0x64
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10d      	bne.n	8004daa <getDaysInMonth+0xa2>
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc0 <getDaysInMonth+0xb8>)
 8004d92:	fb83 1302 	smull	r1, r3, r3, r2
 8004d96:	11d9      	asrs	r1, r3, #7
 8004d98:	17d3      	asrs	r3, r2, #31
 8004d9a:	1acb      	subs	r3, r1, r3
 8004d9c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <getDaysInMonth+0xa6>
                return 29; // Leap year
 8004daa:	231d      	movs	r3, #29
 8004dac:	e002      	b.n	8004db4 <getDaysInMonth+0xac>
            else
                return 28;
 8004dae:	231c      	movs	r3, #28
 8004db0:	e000      	b.n	8004db4 <getDaysInMonth+0xac>
        }
        default:
            return 30; // Default case, should not happen
 8004db2:	231e      	movs	r3, #30
    }
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	51eb851f 	.word	0x51eb851f

08004dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004dc8:	b672      	cpsid	i
}
 8004dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004dcc:	bf00      	nop
 8004dce:	e7fd      	b.n	8004dcc <Error_Handler+0x8>

08004dd0 <initTimer2>:

/**
 * @brief	init timer function
 */
void initTimer2()
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004dd4:	4802      	ldr	r0, [pc, #8]	@ (8004de0 <initTimer2+0x10>)
 8004dd6:	f003 fac1 	bl	800835c <HAL_TIM_Base_Start_IT>
}
 8004dda:	bf00      	nop
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	200001b0 	.word	0x200001b0

08004de4 <initTimer4>:

void initTimer4()
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8004de8:	4802      	ldr	r0, [pc, #8]	@ (8004df4 <initTimer4+0x10>)
 8004dea:	f003 fab7 	bl	800835c <HAL_TIM_Base_Start_IT>
}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	200001f8 	.word	0x200001f8

08004df8 <sTimer2Set>:
/**
 * @brief	set timer duration(ms)
 * @param	duration(ms)
 */
void sTimer2Set(uint16_t delay, uint16_t period)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	460a      	mov	r2, r1
 8004e02:	80fb      	strh	r3, [r7, #6]
 8004e04:	4613      	mov	r3, r2
 8004e06:	80bb      	strh	r3, [r7, #4]
	timer_2_mul = period / TIMER_2_CYCLES;
 8004e08:	4a07      	ldr	r2, [pc, #28]	@ (8004e28 <sTimer2Set+0x30>)
 8004e0a:	88bb      	ldrh	r3, [r7, #4]
 8004e0c:	8013      	strh	r3, [r2, #0]
	timer_2_counter = delay / TIMER_2_CYCLES;
 8004e0e:	4a07      	ldr	r2, [pc, #28]	@ (8004e2c <sTimer2Set+0x34>)
 8004e10:	88fb      	ldrh	r3, [r7, #6]
 8004e12:	8013      	strh	r3, [r2, #0]
	timer_2_flag = 0;
 8004e14:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <sTimer2Set+0x38>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	701a      	strb	r2, [r3, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000150 	.word	0x20000150
 8004e2c:	2000014e 	.word	0x2000014e
 8004e30:	2000014c 	.word	0x2000014c

08004e34 <sTimer4Set>:

void sTimer4Set(uint16_t delay, uint16_t period)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	460a      	mov	r2, r1
 8004e3e:	80fb      	strh	r3, [r7, #6]
 8004e40:	4613      	mov	r3, r2
 8004e42:	80bb      	strh	r3, [r7, #4]
	timer_4_mul = period / TIMER_4_CYCLES;
 8004e44:	4a07      	ldr	r2, [pc, #28]	@ (8004e64 <sTimer4Set+0x30>)
 8004e46:	88bb      	ldrh	r3, [r7, #4]
 8004e48:	8013      	strh	r3, [r2, #0]
	timer_4_counter = delay / TIMER_4_CYCLES;
 8004e4a:	4a07      	ldr	r2, [pc, #28]	@ (8004e68 <sTimer4Set+0x34>)
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	8013      	strh	r3, [r2, #0]
	timer_4_flag = 0;
 8004e50:	4b06      	ldr	r3, [pc, #24]	@ (8004e6c <sTimer4Set+0x38>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000156 	.word	0x20000156
 8004e68:	20000154 	.word	0x20000154
 8004e6c:	20000152 	.word	0x20000152

08004e70 <sTimer2GetFlag>:
/**
 * @brief	get flag timer fuction and auto reset flags and timer counter
 * @return	timer flag
 */
uint8_t sTimer2GetFlag()
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
	if(timer_2_flag)
 8004e74:	4b09      	ldr	r3, [pc, #36]	@ (8004e9c <sTimer2GetFlag+0x2c>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <sTimer2GetFlag+0x1e>
	{
		timer_2_flag = 0;
 8004e7c:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <sTimer2GetFlag+0x2c>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
		timer_2_counter = timer_2_mul;
 8004e82:	4b07      	ldr	r3, [pc, #28]	@ (8004ea0 <sTimer2GetFlag+0x30>)
 8004e84:	881a      	ldrh	r2, [r3, #0]
 8004e86:	4b07      	ldr	r3, [pc, #28]	@ (8004ea4 <sTimer2GetFlag+0x34>)
 8004e88:	801a      	strh	r2, [r3, #0]
		return 1;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <sTimer2GetFlag+0x20>
	}
	return 0;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	2000014c 	.word	0x2000014c
 8004ea0:	20000150 	.word	0x20000150
 8004ea4:	2000014e 	.word	0x2000014e

08004ea8 <sTimer4GetFlag>:

uint8_t sTimer4GetFlag()
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
	if(timer_4_flag)
 8004eac:	4b09      	ldr	r3, [pc, #36]	@ (8004ed4 <sTimer4GetFlag+0x2c>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <sTimer4GetFlag+0x1e>
	{
		timer_4_flag = 0;
 8004eb4:	4b07      	ldr	r3, [pc, #28]	@ (8004ed4 <sTimer4GetFlag+0x2c>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	701a      	strb	r2, [r3, #0]
		timer_4_counter = timer_4_mul;
 8004eba:	4b07      	ldr	r3, [pc, #28]	@ (8004ed8 <sTimer4GetFlag+0x30>)
 8004ebc:	881a      	ldrh	r2, [r3, #0]
 8004ebe:	4b07      	ldr	r3, [pc, #28]	@ (8004edc <sTimer4GetFlag+0x34>)
 8004ec0:	801a      	strh	r2, [r3, #0]
		return 1;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <sTimer4GetFlag+0x20>
	}
	return 0;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000152 	.word	0x20000152
 8004ed8:	20000156 	.word	0x20000156
 8004edc:	20000154 	.word	0x20000154

08004ee0 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief	callback function call every 1ms
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef0:	d110      	bne.n	8004f14 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		if (timer_2_counter > 0)
 8004ef2:	4b16      	ldr	r3, [pc, #88]	@ (8004f4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			--timer_2_counter;
 8004efa:	4b14      	ldr	r3, [pc, #80]	@ (8004f4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004f04:	801a      	strh	r2, [r3, #0]
		}
		if (timer_2_counter <= 0)
 8004f06:	4b11      	ldr	r3, [pc, #68]	@ (8004f4c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d102      	bne.n	8004f14 <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			timer_2_flag = 1;
 8004f0e:	4b10      	ldr	r3, [pc, #64]	@ (8004f50 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (htim->Instance == TIM4)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a0e      	ldr	r2, [pc, #56]	@ (8004f54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d112      	bne.n	8004f44 <HAL_TIM_PeriodElapsedCallback+0x64>
	{
		if (timer_4_counter > 0)
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			--timer_4_counter;
 8004f26:	4b0c      	ldr	r3, [pc, #48]	@ (8004f58 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f58 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004f30:	801a      	strh	r2, [r3, #0]
		}
		if (timer_4_counter <= 0)
 8004f32:	4b09      	ldr	r3, [pc, #36]	@ (8004f58 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <HAL_TIM_PeriodElapsedCallback+0x60>
		{
			timer_4_flag = 1;
 8004f3a:	4b08      	ldr	r3, [pc, #32]	@ (8004f5c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	701a      	strb	r2, [r3, #0]
		}
		led7SegDisplay();
 8004f40:	f7fd fabe 	bl	80024c0 <led7SegDisplay>
	}
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	2000014e 	.word	0x2000014e
 8004f50:	2000014c 	.word	0x2000014c
 8004f54:	40000800 	.word	0x40000800
 8004f58:	20000154 	.word	0x20000154
 8004f5c:	20000152 	.word	0x20000152

08004f60 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004f64:	4b17      	ldr	r3, [pc, #92]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004f66:	4a18      	ldr	r2, [pc, #96]	@ (8004fc8 <MX_SPI1_Init+0x68>)
 8004f68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f6a:	4b16      	ldr	r3, [pc, #88]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004f6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004f70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f72:	4b14      	ldr	r3, [pc, #80]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f78:	4b12      	ldr	r3, [pc, #72]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f7e:	4b11      	ldr	r3, [pc, #68]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f84:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f92:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f98:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f9e:	4b09      	ldr	r3, [pc, #36]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa4:	4b07      	ldr	r3, [pc, #28]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004faa:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004fac:	220a      	movs	r2, #10
 8004fae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004fb0:	4804      	ldr	r0, [pc, #16]	@ (8004fc4 <MX_SPI1_Init+0x64>)
 8004fb2:	f002 fb65 	bl	8007680 <HAL_SPI_Init>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004fbc:	f7ff ff02 	bl	8004dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004fc0:	bf00      	nop
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000158 	.word	0x20000158
 8004fc8:	40013000 	.word	0x40013000

08004fcc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	@ 0x28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd4:	f107 0314 	add.w	r3, r7, #20
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	609a      	str	r2, [r3, #8]
 8004fe0:	60da      	str	r2, [r3, #12]
 8004fe2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a19      	ldr	r2, [pc, #100]	@ (8005050 <HAL_SPI_MspInit+0x84>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d12b      	bne.n	8005046 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	4b18      	ldr	r3, [pc, #96]	@ (8005054 <HAL_SPI_MspInit+0x88>)
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff6:	4a17      	ldr	r2, [pc, #92]	@ (8005054 <HAL_SPI_MspInit+0x88>)
 8004ff8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ffe:	4b15      	ldr	r3, [pc, #84]	@ (8005054 <HAL_SPI_MspInit+0x88>)
 8005000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005002:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	4b11      	ldr	r3, [pc, #68]	@ (8005054 <HAL_SPI_MspInit+0x88>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005012:	4a10      	ldr	r2, [pc, #64]	@ (8005054 <HAL_SPI_MspInit+0x88>)
 8005014:	f043 0302 	orr.w	r3, r3, #2
 8005018:	6313      	str	r3, [r2, #48]	@ 0x30
 800501a:	4b0e      	ldr	r3, [pc, #56]	@ (8005054 <HAL_SPI_MspInit+0x88>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005026:	2338      	movs	r3, #56	@ 0x38
 8005028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502a:	2302      	movs	r3, #2
 800502c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502e:	2300      	movs	r3, #0
 8005030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005032:	2303      	movs	r3, #3
 8005034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005036:	2305      	movs	r3, #5
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800503a:	f107 0314 	add.w	r3, r7, #20
 800503e:	4619      	mov	r1, r3
 8005040:	4805      	ldr	r0, [pc, #20]	@ (8005058 <HAL_SPI_MspInit+0x8c>)
 8005042:	f000 fb77 	bl	8005734 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005046:	bf00      	nop
 8005048:	3728      	adds	r7, #40	@ 0x28
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40013000 	.word	0x40013000
 8005054:	40023800 	.word	0x40023800
 8005058:	40020400 	.word	0x40020400

0800505c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005062:	2300      	movs	r3, #0
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	4b10      	ldr	r3, [pc, #64]	@ (80050a8 <HAL_MspInit+0x4c>)
 8005068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506a:	4a0f      	ldr	r2, [pc, #60]	@ (80050a8 <HAL_MspInit+0x4c>)
 800506c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005070:	6453      	str	r3, [r2, #68]	@ 0x44
 8005072:	4b0d      	ldr	r3, [pc, #52]	@ (80050a8 <HAL_MspInit+0x4c>)
 8005074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800507e:	2300      	movs	r3, #0
 8005080:	603b      	str	r3, [r7, #0]
 8005082:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <HAL_MspInit+0x4c>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	4a08      	ldr	r2, [pc, #32]	@ (80050a8 <HAL_MspInit+0x4c>)
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800508c:	6413      	str	r3, [r2, #64]	@ 0x40
 800508e:	4b06      	ldr	r3, [pc, #24]	@ (80050a8 <HAL_MspInit+0x4c>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800

080050ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80050b0:	bf00      	nop
 80050b2:	e7fd      	b.n	80050b0 <NMI_Handler+0x4>

080050b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050b8:	bf00      	nop
 80050ba:	e7fd      	b.n	80050b8 <HardFault_Handler+0x4>

080050bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <MemManage_Handler+0x4>

080050c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050c8:	bf00      	nop
 80050ca:	e7fd      	b.n	80050c8 <BusFault_Handler+0x4>

080050cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <UsageFault_Handler+0x4>

080050d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050d8:	bf00      	nop
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050e2:	b480      	push	{r7}
 80050e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050e6:	bf00      	nop
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005102:	f000 f9c1 	bl	8005488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005106:	bf00      	nop
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005110:	4802      	ldr	r0, [pc, #8]	@ (800511c <TIM2_IRQHandler+0x10>)
 8005112:	f003 f993 	bl	800843c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	200001b0 	.word	0x200001b0

08005120 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005124:	4802      	ldr	r0, [pc, #8]	@ (8005130 <TIM4_IRQHandler+0x10>)
 8005126:	f003 f989 	bl	800843c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	200001f8 	.word	0x200001f8

08005134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005138:	4b06      	ldr	r3, [pc, #24]	@ (8005154 <SystemInit+0x20>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513e:	4a05      	ldr	r2, [pc, #20]	@ (8005154 <SystemInit+0x20>)
 8005140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005148:	bf00      	nop
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	e000ed00 	.word	0xe000ed00

08005158 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800515e:	f107 0308 	add.w	r3, r7, #8
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	605a      	str	r2, [r3, #4]
 8005168:	609a      	str	r2, [r3, #8]
 800516a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800516c:	463b      	mov	r3, r7
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005174:	4b1d      	ldr	r3, [pc, #116]	@ (80051ec <MX_TIM2_Init+0x94>)
 8005176:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800517a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 800517c:	4b1b      	ldr	r3, [pc, #108]	@ (80051ec <MX_TIM2_Init+0x94>)
 800517e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8005182:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005184:	4b19      	ldr	r3, [pc, #100]	@ (80051ec <MX_TIM2_Init+0x94>)
 8005186:	2200      	movs	r2, #0
 8005188:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800518a:	4b18      	ldr	r3, [pc, #96]	@ (80051ec <MX_TIM2_Init+0x94>)
 800518c:	2209      	movs	r2, #9
 800518e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005190:	4b16      	ldr	r3, [pc, #88]	@ (80051ec <MX_TIM2_Init+0x94>)
 8005192:	2200      	movs	r2, #0
 8005194:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005196:	4b15      	ldr	r3, [pc, #84]	@ (80051ec <MX_TIM2_Init+0x94>)
 8005198:	2200      	movs	r2, #0
 800519a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800519c:	4813      	ldr	r0, [pc, #76]	@ (80051ec <MX_TIM2_Init+0x94>)
 800519e:	f003 f88d 	bl	80082bc <HAL_TIM_Base_Init>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80051a8:	f7ff fe0c 	bl	8004dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80051b2:	f107 0308 	add.w	r3, r7, #8
 80051b6:	4619      	mov	r1, r3
 80051b8:	480c      	ldr	r0, [pc, #48]	@ (80051ec <MX_TIM2_Init+0x94>)
 80051ba:	f003 fa2f 	bl	800861c <HAL_TIM_ConfigClockSource>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80051c4:	f7ff fdfe 	bl	8004dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051c8:	2300      	movs	r3, #0
 80051ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80051d0:	463b      	mov	r3, r7
 80051d2:	4619      	mov	r1, r3
 80051d4:	4805      	ldr	r0, [pc, #20]	@ (80051ec <MX_TIM2_Init+0x94>)
 80051d6:	f003 fc57 	bl	8008a88 <HAL_TIMEx_MasterConfigSynchronization>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80051e0:	f7ff fdf0 	bl	8004dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80051e4:	bf00      	nop
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	200001b0 	.word	0x200001b0

080051f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051f6:	f107 0308 	add.w	r3, r7, #8
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	609a      	str	r2, [r3, #8]
 8005202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005204:	463b      	mov	r3, r7
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800520c:	4b1d      	ldr	r3, [pc, #116]	@ (8005284 <MX_TIM4_Init+0x94>)
 800520e:	4a1e      	ldr	r2, [pc, #120]	@ (8005288 <MX_TIM4_Init+0x98>)
 8005210:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 8005212:	4b1c      	ldr	r3, [pc, #112]	@ (8005284 <MX_TIM4_Init+0x94>)
 8005214:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8005218:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800521a:	4b1a      	ldr	r3, [pc, #104]	@ (8005284 <MX_TIM4_Init+0x94>)
 800521c:	2200      	movs	r2, #0
 800521e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8005220:	4b18      	ldr	r3, [pc, #96]	@ (8005284 <MX_TIM4_Init+0x94>)
 8005222:	2209      	movs	r2, #9
 8005224:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005226:	4b17      	ldr	r3, [pc, #92]	@ (8005284 <MX_TIM4_Init+0x94>)
 8005228:	2200      	movs	r2, #0
 800522a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800522c:	4b15      	ldr	r3, [pc, #84]	@ (8005284 <MX_TIM4_Init+0x94>)
 800522e:	2200      	movs	r2, #0
 8005230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005232:	4814      	ldr	r0, [pc, #80]	@ (8005284 <MX_TIM4_Init+0x94>)
 8005234:	f003 f842 	bl	80082bc <HAL_TIM_Base_Init>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800523e:	f7ff fdc1 	bl	8004dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005246:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005248:	f107 0308 	add.w	r3, r7, #8
 800524c:	4619      	mov	r1, r3
 800524e:	480d      	ldr	r0, [pc, #52]	@ (8005284 <MX_TIM4_Init+0x94>)
 8005250:	f003 f9e4 	bl	800861c <HAL_TIM_ConfigClockSource>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800525a:	f7ff fdb3 	bl	8004dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800525e:	2300      	movs	r3, #0
 8005260:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005262:	2300      	movs	r3, #0
 8005264:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005266:	463b      	mov	r3, r7
 8005268:	4619      	mov	r1, r3
 800526a:	4806      	ldr	r0, [pc, #24]	@ (8005284 <MX_TIM4_Init+0x94>)
 800526c:	f003 fc0c 	bl	8008a88 <HAL_TIMEx_MasterConfigSynchronization>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8005276:	f7ff fda5 	bl	8004dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800527a:	bf00      	nop
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200001f8 	.word	0x200001f8
 8005288:	40000800 	.word	0x40000800

0800528c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800529c:	d116      	bne.n	80052cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	4b1a      	ldr	r3, [pc, #104]	@ (800530c <HAL_TIM_Base_MspInit+0x80>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	4a19      	ldr	r2, [pc, #100]	@ (800530c <HAL_TIM_Base_MspInit+0x80>)
 80052a8:	f043 0301 	orr.w	r3, r3, #1
 80052ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80052ae:	4b17      	ldr	r3, [pc, #92]	@ (800530c <HAL_TIM_Base_MspInit+0x80>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80052ba:	2200      	movs	r2, #0
 80052bc:	2100      	movs	r1, #0
 80052be:	201c      	movs	r0, #28
 80052c0:	f000 fa01 	bl	80056c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80052c4:	201c      	movs	r0, #28
 80052c6:	f000 fa1a 	bl	80056fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80052ca:	e01a      	b.n	8005302 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a0f      	ldr	r2, [pc, #60]	@ (8005310 <HAL_TIM_Base_MspInit+0x84>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d115      	bne.n	8005302 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]
 80052da:	4b0c      	ldr	r3, [pc, #48]	@ (800530c <HAL_TIM_Base_MspInit+0x80>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	4a0b      	ldr	r2, [pc, #44]	@ (800530c <HAL_TIM_Base_MspInit+0x80>)
 80052e0:	f043 0304 	orr.w	r3, r3, #4
 80052e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80052e6:	4b09      	ldr	r3, [pc, #36]	@ (800530c <HAL_TIM_Base_MspInit+0x80>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80052f2:	2200      	movs	r2, #0
 80052f4:	2100      	movs	r1, #0
 80052f6:	201e      	movs	r0, #30
 80052f8:	f000 f9e5 	bl	80056c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80052fc:	201e      	movs	r0, #30
 80052fe:	f000 f9fe 	bl	80056fe <HAL_NVIC_EnableIRQ>
}
 8005302:	bf00      	nop
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
 8005310:	40000800 	.word	0x40000800

08005314 <BCD2DEC>:
/**
 * @brief: transform splited 8 bit (4 bit MSB represent tens and 4 bit LSB represent units) to decimal
 * @param: splited 8 bit
 */
uint8_t BCD2DEC(uint8_t data)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	091b      	lsrs	r3, r3, #4
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	0092      	lsls	r2, r2, #2
 8005328:	4413      	add	r3, r2
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	b2da      	uxtb	r2, r3
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	b2db      	uxtb	r3, r3
 8005336:	4413      	add	r3, r2
 8005338:	b2db      	uxtb	r3, r3
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
	...

08005348 <DEC2BCD>:
/**
 * brief: transform decimal to splited 8 bit (4 bit MSB represent tens and 4 bit LSB represent units)
 * @param: decimal
 */
uint8_t DEC2BCD(uint8_t data)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	4a0d      	ldr	r2, [pc, #52]	@ (800538c <DEC2BCD+0x44>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	08db      	lsrs	r3, r3, #3
 800535c:	b2db      	uxtb	r3, r3
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	b258      	sxtb	r0, r3
 8005362:	79fa      	ldrb	r2, [r7, #7]
 8005364:	4b09      	ldr	r3, [pc, #36]	@ (800538c <DEC2BCD+0x44>)
 8005366:	fba3 1302 	umull	r1, r3, r3, r2
 800536a:	08d9      	lsrs	r1, r3, #3
 800536c:	460b      	mov	r3, r1
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	b2db      	uxtb	r3, r3
 8005378:	b25b      	sxtb	r3, r3
 800537a:	4303      	orrs	r3, r0
 800537c:	b25b      	sxtb	r3, r3
 800537e:	b2db      	uxtb	r3, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	cccccccd 	.word	0xcccccccd

08005390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005390:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80053c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005394:	f7ff fece 	bl	8005134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005398:	480c      	ldr	r0, [pc, #48]	@ (80053cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800539a:	490d      	ldr	r1, [pc, #52]	@ (80053d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800539c:	4a0d      	ldr	r2, [pc, #52]	@ (80053d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800539e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053a0:	e002      	b.n	80053a8 <LoopCopyDataInit>

080053a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053a6:	3304      	adds	r3, #4

080053a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053ac:	d3f9      	bcc.n	80053a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053ae:	4a0a      	ldr	r2, [pc, #40]	@ (80053d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80053b0:	4c0a      	ldr	r4, [pc, #40]	@ (80053dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80053b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053b4:	e001      	b.n	80053ba <LoopFillZerobss>

080053b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053b8:	3204      	adds	r2, #4

080053ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053bc:	d3fb      	bcc.n	80053b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80053be:	f003 fcd3 	bl	8008d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053c2:	f7fd f9a1 	bl	8002708 <main>
  bx  lr    
 80053c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80053c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80053cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053d0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80053d4:	0800d0a8 	.word	0x0800d0a8
  ldr r2, =_sbss
 80053d8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80053dc:	20000244 	.word	0x20000244

080053e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053e0:	e7fe      	b.n	80053e0 <ADC_IRQHandler>
	...

080053e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80053e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005424 <HAL_Init+0x40>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005424 <HAL_Init+0x40>)
 80053ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80053f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005424 <HAL_Init+0x40>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005424 <HAL_Init+0x40>)
 80053fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005400:	4b08      	ldr	r3, [pc, #32]	@ (8005424 <HAL_Init+0x40>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a07      	ldr	r2, [pc, #28]	@ (8005424 <HAL_Init+0x40>)
 8005406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800540a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800540c:	2003      	movs	r0, #3
 800540e:	f000 f94f 	bl	80056b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005412:	200f      	movs	r0, #15
 8005414:	f000 f808 	bl	8005428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005418:	f7ff fe20 	bl	800505c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40023c00 	.word	0x40023c00

08005428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005430:	4b12      	ldr	r3, [pc, #72]	@ (800547c <HAL_InitTick+0x54>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b12      	ldr	r3, [pc, #72]	@ (8005480 <HAL_InitTick+0x58>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	4619      	mov	r1, r3
 800543a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800543e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005442:	fbb2 f3f3 	udiv	r3, r2, r3
 8005446:	4618      	mov	r0, r3
 8005448:	f000 f967 	bl	800571a <HAL_SYSTICK_Config>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e00e      	b.n	8005474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b0f      	cmp	r3, #15
 800545a:	d80a      	bhi.n	8005472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800545c:	2200      	movs	r2, #0
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	f04f 30ff 	mov.w	r0, #4294967295
 8005464:	f000 f92f 	bl	80056c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005468:	4a06      	ldr	r2, [pc, #24]	@ (8005484 <HAL_InitTick+0x5c>)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	e000      	b.n	8005474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
}
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20000020 	.word	0x20000020
 8005480:	20000028 	.word	0x20000028
 8005484:	20000024 	.word	0x20000024

08005488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800548c:	4b06      	ldr	r3, [pc, #24]	@ (80054a8 <HAL_IncTick+0x20>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	4b06      	ldr	r3, [pc, #24]	@ (80054ac <HAL_IncTick+0x24>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4413      	add	r3, r2
 8005498:	4a04      	ldr	r2, [pc, #16]	@ (80054ac <HAL_IncTick+0x24>)
 800549a:	6013      	str	r3, [r2, #0]
}
 800549c:	bf00      	nop
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20000028 	.word	0x20000028
 80054ac:	20000240 	.word	0x20000240

080054b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  return uwTick;
 80054b4:	4b03      	ldr	r3, [pc, #12]	@ (80054c4 <HAL_GetTick+0x14>)
 80054b6:	681b      	ldr	r3, [r3, #0]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	20000240 	.word	0x20000240

080054c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054d0:	f7ff ffee 	bl	80054b0 <HAL_GetTick>
 80054d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e0:	d005      	beq.n	80054ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054e2:	4b0a      	ldr	r3, [pc, #40]	@ (800550c <HAL_Delay+0x44>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054ee:	bf00      	nop
 80054f0:	f7ff ffde 	bl	80054b0 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d8f7      	bhi.n	80054f0 <HAL_Delay+0x28>
  {
  }
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000028 	.word	0x20000028

08005510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005520:	4b0c      	ldr	r3, [pc, #48]	@ (8005554 <__NVIC_SetPriorityGrouping+0x44>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800552c:	4013      	ands	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005538:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800553c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005542:	4a04      	ldr	r2, [pc, #16]	@ (8005554 <__NVIC_SetPriorityGrouping+0x44>)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	60d3      	str	r3, [r2, #12]
}
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr
 8005554:	e000ed00 	.word	0xe000ed00

08005558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800555c:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <__NVIC_GetPriorityGrouping+0x18>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	f003 0307 	and.w	r3, r3, #7
}
 8005566:	4618      	mov	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	e000ed00 	.word	0xe000ed00

08005574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800557e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005582:	2b00      	cmp	r3, #0
 8005584:	db0b      	blt.n	800559e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	f003 021f 	and.w	r2, r3, #31
 800558c:	4907      	ldr	r1, [pc, #28]	@ (80055ac <__NVIC_EnableIRQ+0x38>)
 800558e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	2001      	movs	r0, #1
 8005596:	fa00 f202 	lsl.w	r2, r0, r2
 800559a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	e000e100 	.word	0xe000e100

080055b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	6039      	str	r1, [r7, #0]
 80055ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	db0a      	blt.n	80055da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	490c      	ldr	r1, [pc, #48]	@ (80055fc <__NVIC_SetPriority+0x4c>)
 80055ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ce:	0112      	lsls	r2, r2, #4
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	440b      	add	r3, r1
 80055d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055d8:	e00a      	b.n	80055f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	4908      	ldr	r1, [pc, #32]	@ (8005600 <__NVIC_SetPriority+0x50>)
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	3b04      	subs	r3, #4
 80055e8:	0112      	lsls	r2, r2, #4
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	440b      	add	r3, r1
 80055ee:	761a      	strb	r2, [r3, #24]
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	e000e100 	.word	0xe000e100
 8005600:	e000ed00 	.word	0xe000ed00

08005604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005604:	b480      	push	{r7}
 8005606:	b089      	sub	sp, #36	@ 0x24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0307 	and.w	r3, r3, #7
 8005616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f1c3 0307 	rsb	r3, r3, #7
 800561e:	2b04      	cmp	r3, #4
 8005620:	bf28      	it	cs
 8005622:	2304      	movcs	r3, #4
 8005624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	3304      	adds	r3, #4
 800562a:	2b06      	cmp	r3, #6
 800562c:	d902      	bls.n	8005634 <NVIC_EncodePriority+0x30>
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	3b03      	subs	r3, #3
 8005632:	e000      	b.n	8005636 <NVIC_EncodePriority+0x32>
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43da      	mvns	r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	401a      	ands	r2, r3
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800564c:	f04f 31ff 	mov.w	r1, #4294967295
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	fa01 f303 	lsl.w	r3, r1, r3
 8005656:	43d9      	mvns	r1, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800565c:	4313      	orrs	r3, r2
         );
}
 800565e:	4618      	mov	r0, r3
 8005660:	3724      	adds	r7, #36	@ 0x24
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3b01      	subs	r3, #1
 8005678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800567c:	d301      	bcc.n	8005682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800567e:	2301      	movs	r3, #1
 8005680:	e00f      	b.n	80056a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005682:	4a0a      	ldr	r2, [pc, #40]	@ (80056ac <SysTick_Config+0x40>)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3b01      	subs	r3, #1
 8005688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800568a:	210f      	movs	r1, #15
 800568c:	f04f 30ff 	mov.w	r0, #4294967295
 8005690:	f7ff ff8e 	bl	80055b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005694:	4b05      	ldr	r3, [pc, #20]	@ (80056ac <SysTick_Config+0x40>)
 8005696:	2200      	movs	r2, #0
 8005698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800569a:	4b04      	ldr	r3, [pc, #16]	@ (80056ac <SysTick_Config+0x40>)
 800569c:	2207      	movs	r2, #7
 800569e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	e000e010 	.word	0xe000e010

080056b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ff29 	bl	8005510 <__NVIC_SetPriorityGrouping>
}
 80056be:	bf00      	nop
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b086      	sub	sp, #24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	4603      	mov	r3, r0
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056d8:	f7ff ff3e 	bl	8005558 <__NVIC_GetPriorityGrouping>
 80056dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	6978      	ldr	r0, [r7, #20]
 80056e4:	f7ff ff8e 	bl	8005604 <NVIC_EncodePriority>
 80056e8:	4602      	mov	r2, r0
 80056ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ee:	4611      	mov	r1, r2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff ff5d 	bl	80055b0 <__NVIC_SetPriority>
}
 80056f6:	bf00      	nop
 80056f8:	3718      	adds	r7, #24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	4603      	mov	r3, r0
 8005706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff ff31 	bl	8005574 <__NVIC_EnableIRQ>
}
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff ffa2 	bl	800566c <SysTick_Config>
 8005728:	4603      	mov	r3, r0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005734:	b480      	push	{r7}
 8005736:	b089      	sub	sp, #36	@ 0x24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005746:	2300      	movs	r3, #0
 8005748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800574a:	2300      	movs	r3, #0
 800574c:	61fb      	str	r3, [r7, #28]
 800574e:	e16b      	b.n	8005a28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005750:	2201      	movs	r2, #1
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4013      	ands	r3, r2
 8005762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	429a      	cmp	r2, r3
 800576a:	f040 815a 	bne.w	8005a22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d005      	beq.n	8005786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005782:	2b02      	cmp	r3, #2
 8005784:	d130      	bne.n	80057e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	2203      	movs	r2, #3
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43db      	mvns	r3, r3
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	4013      	ands	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057bc:	2201      	movs	r2, #1
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	43db      	mvns	r3, r3
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	4013      	ands	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	091b      	lsrs	r3, r3, #4
 80057d2:	f003 0201 	and.w	r2, r3, #1
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4313      	orrs	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f003 0303 	and.w	r3, r3, #3
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d017      	beq.n	8005824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	2203      	movs	r2, #3
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	43db      	mvns	r3, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4013      	ands	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 0303 	and.w	r3, r3, #3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d123      	bne.n	8005878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	08da      	lsrs	r2, r3, #3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3208      	adds	r2, #8
 8005838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800583c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	220f      	movs	r2, #15
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	43db      	mvns	r3, r3
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	4013      	ands	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	4313      	orrs	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	08da      	lsrs	r2, r3, #3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3208      	adds	r2, #8
 8005872:	69b9      	ldr	r1, [r7, #24]
 8005874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	2203      	movs	r2, #3
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4013      	ands	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f003 0203 	and.w	r2, r3, #3
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	fa02 f303 	lsl.w	r3, r2, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80b4 	beq.w	8005a22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	4b60      	ldr	r3, [pc, #384]	@ (8005a40 <HAL_GPIO_Init+0x30c>)
 80058c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c2:	4a5f      	ldr	r2, [pc, #380]	@ (8005a40 <HAL_GPIO_Init+0x30c>)
 80058c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80058ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005a40 <HAL_GPIO_Init+0x30c>)
 80058cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058d6:	4a5b      	ldr	r2, [pc, #364]	@ (8005a44 <HAL_GPIO_Init+0x310>)
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	089b      	lsrs	r3, r3, #2
 80058dc:	3302      	adds	r3, #2
 80058de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	220f      	movs	r2, #15
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	43db      	mvns	r3, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4013      	ands	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a52      	ldr	r2, [pc, #328]	@ (8005a48 <HAL_GPIO_Init+0x314>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d02b      	beq.n	800595a <HAL_GPIO_Init+0x226>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a51      	ldr	r2, [pc, #324]	@ (8005a4c <HAL_GPIO_Init+0x318>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d025      	beq.n	8005956 <HAL_GPIO_Init+0x222>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a50      	ldr	r2, [pc, #320]	@ (8005a50 <HAL_GPIO_Init+0x31c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d01f      	beq.n	8005952 <HAL_GPIO_Init+0x21e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a4f      	ldr	r2, [pc, #316]	@ (8005a54 <HAL_GPIO_Init+0x320>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d019      	beq.n	800594e <HAL_GPIO_Init+0x21a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a4e      	ldr	r2, [pc, #312]	@ (8005a58 <HAL_GPIO_Init+0x324>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <HAL_GPIO_Init+0x216>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a4d      	ldr	r2, [pc, #308]	@ (8005a5c <HAL_GPIO_Init+0x328>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00d      	beq.n	8005946 <HAL_GPIO_Init+0x212>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a4c      	ldr	r2, [pc, #304]	@ (8005a60 <HAL_GPIO_Init+0x32c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d007      	beq.n	8005942 <HAL_GPIO_Init+0x20e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a4b      	ldr	r2, [pc, #300]	@ (8005a64 <HAL_GPIO_Init+0x330>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d101      	bne.n	800593e <HAL_GPIO_Init+0x20a>
 800593a:	2307      	movs	r3, #7
 800593c:	e00e      	b.n	800595c <HAL_GPIO_Init+0x228>
 800593e:	2308      	movs	r3, #8
 8005940:	e00c      	b.n	800595c <HAL_GPIO_Init+0x228>
 8005942:	2306      	movs	r3, #6
 8005944:	e00a      	b.n	800595c <HAL_GPIO_Init+0x228>
 8005946:	2305      	movs	r3, #5
 8005948:	e008      	b.n	800595c <HAL_GPIO_Init+0x228>
 800594a:	2304      	movs	r3, #4
 800594c:	e006      	b.n	800595c <HAL_GPIO_Init+0x228>
 800594e:	2303      	movs	r3, #3
 8005950:	e004      	b.n	800595c <HAL_GPIO_Init+0x228>
 8005952:	2302      	movs	r3, #2
 8005954:	e002      	b.n	800595c <HAL_GPIO_Init+0x228>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <HAL_GPIO_Init+0x228>
 800595a:	2300      	movs	r3, #0
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	f002 0203 	and.w	r2, r2, #3
 8005962:	0092      	lsls	r2, r2, #2
 8005964:	4093      	lsls	r3, r2
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	4313      	orrs	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800596c:	4935      	ldr	r1, [pc, #212]	@ (8005a44 <HAL_GPIO_Init+0x310>)
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	089b      	lsrs	r3, r3, #2
 8005972:	3302      	adds	r3, #2
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800597a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a68 <HAL_GPIO_Init+0x334>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	43db      	mvns	r3, r3
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	4013      	ands	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800599e:	4a32      	ldr	r2, [pc, #200]	@ (8005a68 <HAL_GPIO_Init+0x334>)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059a4:	4b30      	ldr	r3, [pc, #192]	@ (8005a68 <HAL_GPIO_Init+0x334>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	43db      	mvns	r3, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4013      	ands	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059c8:	4a27      	ldr	r2, [pc, #156]	@ (8005a68 <HAL_GPIO_Init+0x334>)
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059ce:	4b26      	ldr	r3, [pc, #152]	@ (8005a68 <HAL_GPIO_Init+0x334>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	43db      	mvns	r3, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4013      	ands	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005a68 <HAL_GPIO_Init+0x334>)
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <HAL_GPIO_Init+0x334>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	43db      	mvns	r3, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4013      	ands	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a1c:	4a12      	ldr	r2, [pc, #72]	@ (8005a68 <HAL_GPIO_Init+0x334>)
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	3301      	adds	r3, #1
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	2b0f      	cmp	r3, #15
 8005a2c:	f67f ae90 	bls.w	8005750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	3724      	adds	r7, #36	@ 0x24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40023800 	.word	0x40023800
 8005a44:	40013800 	.word	0x40013800
 8005a48:	40020000 	.word	0x40020000
 8005a4c:	40020400 	.word	0x40020400
 8005a50:	40020800 	.word	0x40020800
 8005a54:	40020c00 	.word	0x40020c00
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	40021400 	.word	0x40021400
 8005a60:	40021800 	.word	0x40021800
 8005a64:	40021c00 	.word	0x40021c00
 8005a68:	40013c00 	.word	0x40013c00

08005a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	807b      	strh	r3, [r7, #2]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a7c:	787b      	ldrb	r3, [r7, #1]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a82:	887a      	ldrh	r2, [r7, #2]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a88:	e003      	b.n	8005a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a8a:	887b      	ldrh	r3, [r7, #2]
 8005a8c:	041a      	lsls	r2, r3, #16
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	619a      	str	r2, [r3, #24]
}
 8005a92:	bf00      	nop
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ab0:	887a      	ldrh	r2, [r7, #2]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	041a      	lsls	r2, r3, #16
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	43d9      	mvns	r1, r3
 8005abc:	887b      	ldrh	r3, [r7, #2]
 8005abe:	400b      	ands	r3, r1
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	619a      	str	r2, [r3, #24]
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e12b      	b.n	8005d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d106      	bne.n	8005b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fb fe90 	bl	8001820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2224      	movs	r2, #36	@ 0x24
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0201 	bic.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b38:	f001 fd8e 	bl	8007658 <HAL_RCC_GetPCLK1Freq>
 8005b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4a81      	ldr	r2, [pc, #516]	@ (8005d48 <HAL_I2C_Init+0x274>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d807      	bhi.n	8005b58 <HAL_I2C_Init+0x84>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4a80      	ldr	r2, [pc, #512]	@ (8005d4c <HAL_I2C_Init+0x278>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	bf94      	ite	ls
 8005b50:	2301      	movls	r3, #1
 8005b52:	2300      	movhi	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	e006      	b.n	8005b66 <HAL_I2C_Init+0x92>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a7d      	ldr	r2, [pc, #500]	@ (8005d50 <HAL_I2C_Init+0x27c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	bf94      	ite	ls
 8005b60:	2301      	movls	r3, #1
 8005b62:	2300      	movhi	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e0e7      	b.n	8005d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4a78      	ldr	r2, [pc, #480]	@ (8005d54 <HAL_I2C_Init+0x280>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	0c9b      	lsrs	r3, r3, #18
 8005b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4a6a      	ldr	r2, [pc, #424]	@ (8005d48 <HAL_I2C_Init+0x274>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d802      	bhi.n	8005ba8 <HAL_I2C_Init+0xd4>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	e009      	b.n	8005bbc <HAL_I2C_Init+0xe8>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005bae:	fb02 f303 	mul.w	r3, r2, r3
 8005bb2:	4a69      	ldr	r2, [pc, #420]	@ (8005d58 <HAL_I2C_Init+0x284>)
 8005bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb8:	099b      	lsrs	r3, r3, #6
 8005bba:	3301      	adds	r3, #1
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6812      	ldr	r2, [r2, #0]
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	495c      	ldr	r1, [pc, #368]	@ (8005d48 <HAL_I2C_Init+0x274>)
 8005bd8:	428b      	cmp	r3, r1
 8005bda:	d819      	bhi.n	8005c10 <HAL_I2C_Init+0x13c>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	1e59      	subs	r1, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005bf0:	400b      	ands	r3, r1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <HAL_I2C_Init+0x138>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1e59      	subs	r1, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c04:	3301      	adds	r3, #1
 8005c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0a:	e051      	b.n	8005cb0 <HAL_I2C_Init+0x1dc>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	e04f      	b.n	8005cb0 <HAL_I2C_Init+0x1dc>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d111      	bne.n	8005c3c <HAL_I2C_Init+0x168>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	1e58      	subs	r0, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6859      	ldr	r1, [r3, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	440b      	add	r3, r1
 8005c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	e012      	b.n	8005c62 <HAL_I2C_Init+0x18e>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	1e58      	subs	r0, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6859      	ldr	r1, [r3, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	0099      	lsls	r1, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c52:	3301      	adds	r3, #1
 8005c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <HAL_I2C_Init+0x196>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e022      	b.n	8005cb0 <HAL_I2C_Init+0x1dc>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10e      	bne.n	8005c90 <HAL_I2C_Init+0x1bc>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1e58      	subs	r0, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6859      	ldr	r1, [r3, #4]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	440b      	add	r3, r1
 8005c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c84:	3301      	adds	r3, #1
 8005c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c8e:	e00f      	b.n	8005cb0 <HAL_I2C_Init+0x1dc>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	1e58      	subs	r0, r3, #1
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	0099      	lsls	r1, r3, #2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	6809      	ldr	r1, [r1, #0]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69da      	ldr	r2, [r3, #28]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005cde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	6911      	ldr	r1, [r2, #16]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	68d2      	ldr	r2, [r2, #12]
 8005cea:	4311      	orrs	r1, r2
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6812      	ldr	r2, [r2, #0]
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695a      	ldr	r2, [r3, #20]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	000186a0 	.word	0x000186a0
 8005d4c:	001e847f 	.word	0x001e847f
 8005d50:	003d08ff 	.word	0x003d08ff
 8005d54:	431bde83 	.word	0x431bde83
 8005d58:	10624dd3 	.word	0x10624dd3

08005d5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	4608      	mov	r0, r1
 8005d66:	4611      	mov	r1, r2
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	817b      	strh	r3, [r7, #10]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	813b      	strh	r3, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d76:	f7ff fb9b 	bl	80054b0 <HAL_GetTick>
 8005d7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	f040 80d9 	bne.w	8005f3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	2319      	movs	r3, #25
 8005d90:	2201      	movs	r2, #1
 8005d92:	496d      	ldr	r1, [pc, #436]	@ (8005f48 <HAL_I2C_Mem_Write+0x1ec>)
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 fdb9 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
 8005da2:	e0cc      	b.n	8005f3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_I2C_Mem_Write+0x56>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e0c5      	b.n	8005f3e <HAL_I2C_Mem_Write+0x1e2>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d007      	beq.n	8005dd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005de6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2221      	movs	r2, #33	@ 0x21
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2240      	movs	r2, #64	@ 0x40
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a3a      	ldr	r2, [r7, #32]
 8005e02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4a4d      	ldr	r2, [pc, #308]	@ (8005f4c <HAL_I2C_Mem_Write+0x1f0>)
 8005e18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e1a:	88f8      	ldrh	r0, [r7, #6]
 8005e1c:	893a      	ldrh	r2, [r7, #8]
 8005e1e:	8979      	ldrh	r1, [r7, #10]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	4603      	mov	r3, r0
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fbf0 	bl	8006610 <I2C_RequestMemoryWrite>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d052      	beq.n	8005edc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e081      	b.n	8005f3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 fe7e 	bl	8006b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00d      	beq.n	8005e66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d107      	bne.n	8005e62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e06b      	b.n	8005f3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d11b      	bne.n	8005edc <HAL_I2C_Mem_Write+0x180>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d017      	beq.n	8005edc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1aa      	bne.n	8005e3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fe71 	bl	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00d      	beq.n	8005f10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d107      	bne.n	8005f0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e016      	b.n	8005f3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e000      	b.n	8005f3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f3c:	2302      	movs	r3, #2
  }
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	00100002 	.word	0x00100002
 8005f4c:	ffff0000 	.word	0xffff0000

08005f50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08c      	sub	sp, #48	@ 0x30
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	817b      	strh	r3, [r7, #10]
 8005f62:	460b      	mov	r3, r1
 8005f64:	813b      	strh	r3, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f6a:	f7ff faa1 	bl	80054b0 <HAL_GetTick>
 8005f6e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	f040 8214 	bne.w	80063a6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	2319      	movs	r3, #25
 8005f84:	2201      	movs	r2, #1
 8005f86:	497b      	ldr	r1, [pc, #492]	@ (8006174 <HAL_I2C_Mem_Read+0x224>)
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 fcbf 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
 8005f96:	e207      	b.n	80063a8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_I2C_Mem_Read+0x56>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e200      	b.n	80063a8 <HAL_I2C_Mem_Read+0x458>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d007      	beq.n	8005fcc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2222      	movs	r2, #34	@ 0x22
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2240      	movs	r2, #64	@ 0x40
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4a5b      	ldr	r2, [pc, #364]	@ (8006178 <HAL_I2C_Mem_Read+0x228>)
 800600c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800600e:	88f8      	ldrh	r0, [r7, #6]
 8006010:	893a      	ldrh	r2, [r7, #8]
 8006012:	8979      	ldrh	r1, [r7, #10]
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	4603      	mov	r3, r0
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f000 fb8c 	bl	800673c <I2C_RequestMemoryRead>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e1bc      	b.n	80063a8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006032:	2b00      	cmp	r3, #0
 8006034:	d113      	bne.n	800605e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006036:	2300      	movs	r3, #0
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	623b      	str	r3, [r7, #32]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	623b      	str	r3, [r7, #32]
 800604a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e190      	b.n	8006380 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006062:	2b01      	cmp	r3, #1
 8006064:	d11b      	bne.n	800609e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006074:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006076:	2300      	movs	r3, #0
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	e170      	b.n	8006380 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d11b      	bne.n	80060de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c6:	2300      	movs	r3, #0
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	e150      	b.n	8006380 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80060f4:	e144      	b.n	8006380 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	f200 80f1 	bhi.w	80062e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006104:	2b01      	cmp	r3, #1
 8006106:	d123      	bne.n	8006150 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800610a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 fda7 	bl	8006c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e145      	b.n	80063a8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691a      	ldr	r2, [r3, #16]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800614e:	e117      	b.n	8006380 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006154:	2b02      	cmp	r3, #2
 8006156:	d14e      	bne.n	80061f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615e:	2200      	movs	r2, #0
 8006160:	4906      	ldr	r1, [pc, #24]	@ (800617c <HAL_I2C_Mem_Read+0x22c>)
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fbd2 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d008      	beq.n	8006180 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e11a      	b.n	80063a8 <HAL_I2C_Mem_Read+0x458>
 8006172:	bf00      	nop
 8006174:	00100002 	.word	0x00100002
 8006178:	ffff0000 	.word	0xffff0000
 800617c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800618e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061f4:	e0c4      	b.n	8006380 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fc:	2200      	movs	r2, #0
 80061fe:	496c      	ldr	r1, [pc, #432]	@ (80063b0 <HAL_I2C_Mem_Read+0x460>)
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fb83 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0cb      	b.n	80063a8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800621e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006258:	2200      	movs	r2, #0
 800625a:	4955      	ldr	r1, [pc, #340]	@ (80063b0 <HAL_I2C_Mem_Read+0x460>)
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fb55 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e09d      	b.n	80063a8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800627a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062e0:	e04e      	b.n	8006380 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fcba 	bl	8006c60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e058      	b.n	80063a8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631e:	b29b      	uxth	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	2b04      	cmp	r3, #4
 8006334:	d124      	bne.n	8006380 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633a:	2b03      	cmp	r3, #3
 800633c:	d107      	bne.n	800634e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800634c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006384:	2b00      	cmp	r3, #0
 8006386:	f47f aeb6 	bne.w	80060f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	e000      	b.n	80063a8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80063a6:	2302      	movs	r3, #2
  }
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3728      	adds	r7, #40	@ 0x28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	00010004 	.word	0x00010004

080063b4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08a      	sub	sp, #40	@ 0x28
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	607a      	str	r2, [r7, #4]
 80063be:	603b      	str	r3, [r7, #0]
 80063c0:	460b      	mov	r3, r1
 80063c2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80063c4:	f7ff f874 	bl	80054b0 <HAL_GetTick>
 80063c8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	f040 8111 	bne.w	80065fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	2319      	movs	r3, #25
 80063e2:	2201      	movs	r2, #1
 80063e4:	4988      	ldr	r1, [pc, #544]	@ (8006608 <HAL_I2C_IsDeviceReady+0x254>)
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fa90 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80063f2:	2302      	movs	r3, #2
 80063f4:	e104      	b.n	8006600 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_I2C_IsDeviceReady+0x50>
 8006400:	2302      	movs	r3, #2
 8006402:	e0fd      	b.n	8006600 <HAL_I2C_IsDeviceReady+0x24c>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b01      	cmp	r3, #1
 8006418:	d007      	beq.n	800642a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0201 	orr.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006438:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2224      	movs	r2, #36	@ 0x24
 800643e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4a70      	ldr	r2, [pc, #448]	@ (800660c <HAL_I2C_IsDeviceReady+0x258>)
 800644c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800645c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2200      	movs	r2, #0
 8006466:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fa4e 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00d      	beq.n	8006492 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006480:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006484:	d103      	bne.n	800648e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800648c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e0b6      	b.n	8006600 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006492:	897b      	ldrh	r3, [r7, #10]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	461a      	mov	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80064a2:	f7ff f805 	bl	80054b0 <HAL_GetTick>
 80064a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	bf0c      	ite	eq
 80064b6:	2301      	moveq	r3, #1
 80064b8:	2300      	movne	r3, #0
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064cc:	bf0c      	ite	eq
 80064ce:	2301      	moveq	r3, #1
 80064d0:	2300      	movne	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80064d6:	e025      	b.n	8006524 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064d8:	f7fe ffea 	bl	80054b0 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d302      	bcc.n	80064ee <HAL_I2C_IsDeviceReady+0x13a>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	22a0      	movs	r2, #160	@ 0xa0
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b02      	cmp	r3, #2
 8006502:	bf0c      	ite	eq
 8006504:	2301      	moveq	r3, #1
 8006506:	2300      	movne	r3, #0
 8006508:	b2db      	uxtb	r3, r3
 800650a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800651a:	bf0c      	ite	eq
 800651c:	2301      	moveq	r3, #1
 800651e:	2300      	movne	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2ba0      	cmp	r3, #160	@ 0xa0
 800652e:	d005      	beq.n	800653c <HAL_I2C_IsDeviceReady+0x188>
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d102      	bne.n	800653c <HAL_I2C_IsDeviceReady+0x188>
 8006536:	7dbb      	ldrb	r3, [r7, #22]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0cd      	beq.n	80064d8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b02      	cmp	r3, #2
 8006550:	d129      	bne.n	80065a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006560:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006562:	2300      	movs	r3, #0
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	2319      	movs	r3, #25
 800657e:	2201      	movs	r2, #1
 8006580:	4921      	ldr	r1, [pc, #132]	@ (8006608 <HAL_I2C_IsDeviceReady+0x254>)
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f9c2 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e036      	b.n	8006600 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e02c      	b.n	8006600 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80065be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	2319      	movs	r3, #25
 80065c6:	2201      	movs	r2, #1
 80065c8:	490f      	ldr	r1, [pc, #60]	@ (8006608 <HAL_I2C_IsDeviceReady+0x254>)
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 f99e 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e012      	b.n	8006600 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	3301      	adds	r3, #1
 80065de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	f4ff af32 	bcc.w	800644e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80065fe:	2302      	movs	r3, #2
  }
}
 8006600:	4618      	mov	r0, r3
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	00100002 	.word	0x00100002
 800660c:	ffff0000 	.word	0xffff0000

08006610 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af02      	add	r7, sp, #8
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	4608      	mov	r0, r1
 800661a:	4611      	mov	r1, r2
 800661c:	461a      	mov	r2, r3
 800661e:	4603      	mov	r3, r0
 8006620:	817b      	strh	r3, [r7, #10]
 8006622:	460b      	mov	r3, r1
 8006624:	813b      	strh	r3, [r7, #8]
 8006626:	4613      	mov	r3, r2
 8006628:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006638:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	2200      	movs	r2, #0
 8006642:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f960 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00d      	beq.n	800666e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800665c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006660:	d103      	bne.n	800666a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006668:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e05f      	b.n	800672e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800666e:	897b      	ldrh	r3, [r7, #10]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800667c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	6a3a      	ldr	r2, [r7, #32]
 8006682:	492d      	ldr	r1, [pc, #180]	@ (8006738 <I2C_RequestMemoryWrite+0x128>)
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f9bb 	bl	8006a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e04c      	b.n	800672e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006694:	2300      	movs	r3, #0
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ac:	6a39      	ldr	r1, [r7, #32]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fa46 	bl	8006b40 <I2C_WaitOnTXEFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00d      	beq.n	80066d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d107      	bne.n	80066d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e02b      	b.n	800672e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d105      	bne.n	80066e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066dc:	893b      	ldrh	r3, [r7, #8]
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	611a      	str	r2, [r3, #16]
 80066e6:	e021      	b.n	800672c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066e8:	893b      	ldrh	r3, [r7, #8]
 80066ea:	0a1b      	lsrs	r3, r3, #8
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f8:	6a39      	ldr	r1, [r7, #32]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 fa20 	bl	8006b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00d      	beq.n	8006722 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670a:	2b04      	cmp	r3, #4
 800670c:	d107      	bne.n	800671e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800671c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e005      	b.n	800672e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006722:	893b      	ldrh	r3, [r7, #8]
 8006724:	b2da      	uxtb	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	00010002 	.word	0x00010002

0800673c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	4603      	mov	r3, r0
 800674c:	817b      	strh	r3, [r7, #10]
 800674e:	460b      	mov	r3, r1
 8006750:	813b      	strh	r3, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006764:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006774:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	2200      	movs	r2, #0
 800677e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 f8c2 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00d      	beq.n	80067aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800679c:	d103      	bne.n	80067a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e0aa      	b.n	8006900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067aa:	897b      	ldrh	r3, [r7, #10]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	6a3a      	ldr	r2, [r7, #32]
 80067be:	4952      	ldr	r1, [pc, #328]	@ (8006908 <I2C_RequestMemoryRead+0x1cc>)
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f91d 	bl	8006a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e097      	b.n	8006900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e8:	6a39      	ldr	r1, [r7, #32]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f9a8 	bl	8006b40 <I2C_WaitOnTXEFlagUntilTimeout>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00d      	beq.n	8006812 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d107      	bne.n	800680e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800680c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e076      	b.n	8006900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006812:	88fb      	ldrh	r3, [r7, #6]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d105      	bne.n	8006824 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006818:	893b      	ldrh	r3, [r7, #8]
 800681a:	b2da      	uxtb	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	611a      	str	r2, [r3, #16]
 8006822:	e021      	b.n	8006868 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006824:	893b      	ldrh	r3, [r7, #8]
 8006826:	0a1b      	lsrs	r3, r3, #8
 8006828:	b29b      	uxth	r3, r3
 800682a:	b2da      	uxtb	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006834:	6a39      	ldr	r1, [r7, #32]
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 f982 	bl	8006b40 <I2C_WaitOnTXEFlagUntilTimeout>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00d      	beq.n	800685e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006846:	2b04      	cmp	r3, #4
 8006848:	d107      	bne.n	800685a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006858:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e050      	b.n	8006900 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800685e:	893b      	ldrh	r3, [r7, #8]
 8006860:	b2da      	uxtb	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800686a:	6a39      	ldr	r1, [r7, #32]
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f967 	bl	8006b40 <I2C_WaitOnTXEFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00d      	beq.n	8006894 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800687c:	2b04      	cmp	r3, #4
 800687e:	d107      	bne.n	8006890 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800688e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e035      	b.n	8006900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f82b 	bl	800690c <I2C_WaitOnFlagUntilTimeout>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00d      	beq.n	80068d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ca:	d103      	bne.n	80068d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e013      	b.n	8006900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068d8:	897b      	ldrh	r3, [r7, #10]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f043 0301 	orr.w	r3, r3, #1
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	6a3a      	ldr	r2, [r7, #32]
 80068ec:	4906      	ldr	r1, [pc, #24]	@ (8006908 <I2C_RequestMemoryRead+0x1cc>)
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 f886 	bl	8006a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e000      	b.n	8006900 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	00010002 	.word	0x00010002

0800690c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	4613      	mov	r3, r2
 800691a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800691c:	e048      	b.n	80069b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d044      	beq.n	80069b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006926:	f7fe fdc3 	bl	80054b0 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d302      	bcc.n	800693c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d139      	bne.n	80069b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	0c1b      	lsrs	r3, r3, #16
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b01      	cmp	r3, #1
 8006944:	d10d      	bne.n	8006962 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	43da      	mvns	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4013      	ands	r3, r2
 8006952:	b29b      	uxth	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	bf0c      	ite	eq
 8006958:	2301      	moveq	r3, #1
 800695a:	2300      	movne	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	461a      	mov	r2, r3
 8006960:	e00c      	b.n	800697c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	43da      	mvns	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	4013      	ands	r3, r2
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	429a      	cmp	r2, r3
 8006980:	d116      	bne.n	80069b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699c:	f043 0220 	orr.w	r2, r3, #32
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e023      	b.n	80069f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	0c1b      	lsrs	r3, r3, #16
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d10d      	bne.n	80069d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	43da      	mvns	r2, r3
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	4013      	ands	r3, r2
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bf0c      	ite	eq
 80069cc:	2301      	moveq	r3, #1
 80069ce:	2300      	movne	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	461a      	mov	r2, r3
 80069d4:	e00c      	b.n	80069f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	43da      	mvns	r2, r3
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	4013      	ands	r3, r2
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bf0c      	ite	eq
 80069e8:	2301      	moveq	r3, #1
 80069ea:	2300      	movne	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d093      	beq.n	800691e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a0e:	e071      	b.n	8006af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a1e:	d123      	bne.n	8006a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a54:	f043 0204 	orr.w	r2, r3, #4
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e067      	b.n	8006b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d041      	beq.n	8006af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a70:	f7fe fd1e 	bl	80054b0 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d302      	bcc.n	8006a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d136      	bne.n	8006af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	0c1b      	lsrs	r3, r3, #16
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d10c      	bne.n	8006aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	43da      	mvns	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bf14      	ite	ne
 8006aa2:	2301      	movne	r3, #1
 8006aa4:	2300      	moveq	r3, #0
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	e00b      	b.n	8006ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	43da      	mvns	r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	bf14      	ite	ne
 8006abc:	2301      	movne	r3, #1
 8006abe:	2300      	moveq	r3, #0
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d016      	beq.n	8006af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae0:	f043 0220 	orr.w	r2, r3, #32
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e021      	b.n	8006b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	0c1b      	lsrs	r3, r3, #16
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d10c      	bne.n	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	43da      	mvns	r2, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bf14      	ite	ne
 8006b10:	2301      	movne	r3, #1
 8006b12:	2300      	moveq	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	e00b      	b.n	8006b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	43da      	mvns	r2, r3
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4013      	ands	r3, r2
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bf14      	ite	ne
 8006b2a:	2301      	movne	r3, #1
 8006b2c:	2300      	moveq	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f47f af6d 	bne.w	8006a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b4c:	e034      	b.n	8006bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 f8e3 	bl	8006d1a <I2C_IsAcknowledgeFailed>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e034      	b.n	8006bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b64:	d028      	beq.n	8006bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b66:	f7fe fca3 	bl	80054b0 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d302      	bcc.n	8006b7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d11d      	bne.n	8006bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b86:	2b80      	cmp	r3, #128	@ 0x80
 8006b88:	d016      	beq.n	8006bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba4:	f043 0220 	orr.w	r2, r3, #32
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e007      	b.n	8006bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc2:	2b80      	cmp	r3, #128	@ 0x80
 8006bc4:	d1c3      	bne.n	8006b4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bdc:	e034      	b.n	8006c48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 f89b 	bl	8006d1a <I2C_IsAcknowledgeFailed>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e034      	b.n	8006c58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf4:	d028      	beq.n	8006c48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf6:	f7fe fc5b 	bl	80054b0 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d302      	bcc.n	8006c0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d11d      	bne.n	8006c48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d016      	beq.n	8006c48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c34:	f043 0220 	orr.w	r2, r3, #32
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e007      	b.n	8006c58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d1c3      	bne.n	8006bde <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c6c:	e049      	b.n	8006d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d119      	bne.n	8006cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f06f 0210 	mvn.w	r2, #16
 8006c84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e030      	b.n	8006d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb0:	f7fe fbfe 	bl	80054b0 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d302      	bcc.n	8006cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d11d      	bne.n	8006d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd0:	2b40      	cmp	r3, #64	@ 0x40
 8006cd2:	d016      	beq.n	8006d02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cee:	f043 0220 	orr.w	r2, r3, #32
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e007      	b.n	8006d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d0c:	2b40      	cmp	r3, #64	@ 0x40
 8006d0e:	d1ae      	bne.n	8006c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d30:	d11b      	bne.n	8006d6a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d3a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2220      	movs	r2, #32
 8006d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d56:	f043 0204 	orr.w	r2, r3, #4
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e000      	b.n	8006d6c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e267      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d075      	beq.n	8006e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d96:	4b88      	ldr	r3, [pc, #544]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 030c 	and.w	r3, r3, #12
 8006d9e:	2b04      	cmp	r3, #4
 8006da0:	d00c      	beq.n	8006dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006da2:	4b85      	ldr	r3, [pc, #532]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d112      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dae:	4b82      	ldr	r3, [pc, #520]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006db6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dba:	d10b      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dbc:	4b7e      	ldr	r3, [pc, #504]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d05b      	beq.n	8006e80 <HAL_RCC_OscConfig+0x108>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d157      	bne.n	8006e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e242      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ddc:	d106      	bne.n	8006dec <HAL_RCC_OscConfig+0x74>
 8006dde:	4b76      	ldr	r3, [pc, #472]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a75      	ldr	r2, [pc, #468]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	e01d      	b.n	8006e28 <HAL_RCC_OscConfig+0xb0>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006df4:	d10c      	bne.n	8006e10 <HAL_RCC_OscConfig+0x98>
 8006df6:	4b70      	ldr	r3, [pc, #448]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a6f      	ldr	r2, [pc, #444]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	4b6d      	ldr	r3, [pc, #436]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a6c      	ldr	r2, [pc, #432]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	e00b      	b.n	8006e28 <HAL_RCC_OscConfig+0xb0>
 8006e10:	4b69      	ldr	r3, [pc, #420]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a68      	ldr	r2, [pc, #416]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	4b66      	ldr	r3, [pc, #408]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a65      	ldr	r2, [pc, #404]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d013      	beq.n	8006e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e30:	f7fe fb3e 	bl	80054b0 <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e36:	e008      	b.n	8006e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e38:	f7fe fb3a 	bl	80054b0 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b64      	cmp	r3, #100	@ 0x64
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e207      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0f0      	beq.n	8006e38 <HAL_RCC_OscConfig+0xc0>
 8006e56:	e014      	b.n	8006e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e58:	f7fe fb2a 	bl	80054b0 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e60:	f7fe fb26 	bl	80054b0 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b64      	cmp	r3, #100	@ 0x64
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e1f3      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e72:	4b51      	ldr	r3, [pc, #324]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f0      	bne.n	8006e60 <HAL_RCC_OscConfig+0xe8>
 8006e7e:	e000      	b.n	8006e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d063      	beq.n	8006f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 030c 	and.w	r3, r3, #12
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00b      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e9a:	4b47      	ldr	r3, [pc, #284]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d11c      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ea6:	4b44      	ldr	r3, [pc, #272]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d116      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eb2:	4b41      	ldr	r3, [pc, #260]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d005      	beq.n	8006eca <HAL_RCC_OscConfig+0x152>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d001      	beq.n	8006eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e1c7      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eca:	4b3b      	ldr	r3, [pc, #236]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	4937      	ldr	r1, [pc, #220]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ede:	e03a      	b.n	8006f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d020      	beq.n	8006f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ee8:	4b34      	ldr	r3, [pc, #208]	@ (8006fbc <HAL_RCC_OscConfig+0x244>)
 8006eea:	2201      	movs	r2, #1
 8006eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eee:	f7fe fadf 	bl	80054b0 <HAL_GetTick>
 8006ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef4:	e008      	b.n	8006f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ef6:	f7fe fadb 	bl	80054b0 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e1a8      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f08:	4b2b      	ldr	r3, [pc, #172]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0f0      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f14:	4b28      	ldr	r3, [pc, #160]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	00db      	lsls	r3, r3, #3
 8006f22:	4925      	ldr	r1, [pc, #148]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	600b      	str	r3, [r1, #0]
 8006f28:	e015      	b.n	8006f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f2a:	4b24      	ldr	r3, [pc, #144]	@ (8006fbc <HAL_RCC_OscConfig+0x244>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f30:	f7fe fabe 	bl	80054b0 <HAL_GetTick>
 8006f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f38:	f7fe faba 	bl	80054b0 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e187      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f0      	bne.n	8006f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d036      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d016      	beq.n	8006f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f6a:	4b15      	ldr	r3, [pc, #84]	@ (8006fc0 <HAL_RCC_OscConfig+0x248>)
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f70:	f7fe fa9e 	bl	80054b0 <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f78:	f7fe fa9a 	bl	80054b0 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e167      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb8 <HAL_RCC_OscConfig+0x240>)
 8006f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0f0      	beq.n	8006f78 <HAL_RCC_OscConfig+0x200>
 8006f96:	e01b      	b.n	8006fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f98:	4b09      	ldr	r3, [pc, #36]	@ (8006fc0 <HAL_RCC_OscConfig+0x248>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f9e:	f7fe fa87 	bl	80054b0 <HAL_GetTick>
 8006fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fa4:	e00e      	b.n	8006fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fa6:	f7fe fa83 	bl	80054b0 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d907      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e150      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	42470000 	.word	0x42470000
 8006fc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fc4:	4b88      	ldr	r3, [pc, #544]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8006fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1ea      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 8097 	beq.w	800710c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fe2:	4b81      	ldr	r3, [pc, #516]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10f      	bne.n	800700e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff6:	4a7c      	ldr	r2, [pc, #496]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8006ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ffe:	4b7a      	ldr	r3, [pc, #488]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007006:	60bb      	str	r3, [r7, #8]
 8007008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800700a:	2301      	movs	r3, #1
 800700c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800700e:	4b77      	ldr	r3, [pc, #476]	@ (80071ec <HAL_RCC_OscConfig+0x474>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007016:	2b00      	cmp	r3, #0
 8007018:	d118      	bne.n	800704c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800701a:	4b74      	ldr	r3, [pc, #464]	@ (80071ec <HAL_RCC_OscConfig+0x474>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a73      	ldr	r2, [pc, #460]	@ (80071ec <HAL_RCC_OscConfig+0x474>)
 8007020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007026:	f7fe fa43 	bl	80054b0 <HAL_GetTick>
 800702a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800702c:	e008      	b.n	8007040 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800702e:	f7fe fa3f 	bl	80054b0 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e10c      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007040:	4b6a      	ldr	r3, [pc, #424]	@ (80071ec <HAL_RCC_OscConfig+0x474>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007048:	2b00      	cmp	r3, #0
 800704a:	d0f0      	beq.n	800702e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d106      	bne.n	8007062 <HAL_RCC_OscConfig+0x2ea>
 8007054:	4b64      	ldr	r3, [pc, #400]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007058:	4a63      	ldr	r2, [pc, #396]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 800705a:	f043 0301 	orr.w	r3, r3, #1
 800705e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007060:	e01c      	b.n	800709c <HAL_RCC_OscConfig+0x324>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	2b05      	cmp	r3, #5
 8007068:	d10c      	bne.n	8007084 <HAL_RCC_OscConfig+0x30c>
 800706a:	4b5f      	ldr	r3, [pc, #380]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 800706c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800706e:	4a5e      	ldr	r2, [pc, #376]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007070:	f043 0304 	orr.w	r3, r3, #4
 8007074:	6713      	str	r3, [r2, #112]	@ 0x70
 8007076:	4b5c      	ldr	r3, [pc, #368]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707a:	4a5b      	ldr	r2, [pc, #364]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 800707c:	f043 0301 	orr.w	r3, r3, #1
 8007080:	6713      	str	r3, [r2, #112]	@ 0x70
 8007082:	e00b      	b.n	800709c <HAL_RCC_OscConfig+0x324>
 8007084:	4b58      	ldr	r3, [pc, #352]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007088:	4a57      	ldr	r2, [pc, #348]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 800708a:	f023 0301 	bic.w	r3, r3, #1
 800708e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007090:	4b55      	ldr	r3, [pc, #340]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007094:	4a54      	ldr	r2, [pc, #336]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007096:	f023 0304 	bic.w	r3, r3, #4
 800709a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d015      	beq.n	80070d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a4:	f7fe fa04 	bl	80054b0 <HAL_GetTick>
 80070a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070aa:	e00a      	b.n	80070c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070ac:	f7fe fa00 	bl	80054b0 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e0cb      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c2:	4b49      	ldr	r3, [pc, #292]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 80070c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0ee      	beq.n	80070ac <HAL_RCC_OscConfig+0x334>
 80070ce:	e014      	b.n	80070fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070d0:	f7fe f9ee 	bl	80054b0 <HAL_GetTick>
 80070d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070d6:	e00a      	b.n	80070ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070d8:	f7fe f9ea 	bl	80054b0 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e0b5      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070ee:	4b3e      	ldr	r3, [pc, #248]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 80070f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1ee      	bne.n	80070d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d105      	bne.n	800710c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007100:	4b39      	ldr	r3, [pc, #228]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007104:	4a38      	ldr	r2, [pc, #224]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800710a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 80a1 	beq.w	8007258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007116:	4b34      	ldr	r3, [pc, #208]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 030c 	and.w	r3, r3, #12
 800711e:	2b08      	cmp	r3, #8
 8007120:	d05c      	beq.n	80071dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d141      	bne.n	80071ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800712a:	4b31      	ldr	r3, [pc, #196]	@ (80071f0 <HAL_RCC_OscConfig+0x478>)
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007130:	f7fe f9be 	bl	80054b0 <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007138:	f7fe f9ba 	bl	80054b0 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e087      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800714a:	4b27      	ldr	r3, [pc, #156]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f0      	bne.n	8007138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007164:	019b      	lsls	r3, r3, #6
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716c:	085b      	lsrs	r3, r3, #1
 800716e:	3b01      	subs	r3, #1
 8007170:	041b      	lsls	r3, r3, #16
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007178:	061b      	lsls	r3, r3, #24
 800717a:	491b      	ldr	r1, [pc, #108]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 800717c:	4313      	orrs	r3, r2
 800717e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007180:	4b1b      	ldr	r3, [pc, #108]	@ (80071f0 <HAL_RCC_OscConfig+0x478>)
 8007182:	2201      	movs	r2, #1
 8007184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007186:	f7fe f993 	bl	80054b0 <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800718e:	f7fe f98f 	bl	80054b0 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e05c      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071a0:	4b11      	ldr	r3, [pc, #68]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0f0      	beq.n	800718e <HAL_RCC_OscConfig+0x416>
 80071ac:	e054      	b.n	8007258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ae:	4b10      	ldr	r3, [pc, #64]	@ (80071f0 <HAL_RCC_OscConfig+0x478>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b4:	f7fe f97c 	bl	80054b0 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071bc:	f7fe f978 	bl	80054b0 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e045      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ce:	4b06      	ldr	r3, [pc, #24]	@ (80071e8 <HAL_RCC_OscConfig+0x470>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f0      	bne.n	80071bc <HAL_RCC_OscConfig+0x444>
 80071da:	e03d      	b.n	8007258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d107      	bne.n	80071f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e038      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
 80071e8:	40023800 	.word	0x40023800
 80071ec:	40007000 	.word	0x40007000
 80071f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007264 <HAL_RCC_OscConfig+0x4ec>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d028      	beq.n	8007254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800720c:	429a      	cmp	r2, r3
 800720e:	d121      	bne.n	8007254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800721a:	429a      	cmp	r2, r3
 800721c:	d11a      	bne.n	8007254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007224:	4013      	ands	r3, r2
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800722a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800722c:	4293      	cmp	r3, r2
 800722e:	d111      	bne.n	8007254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723a:	085b      	lsrs	r3, r3, #1
 800723c:	3b01      	subs	r3, #1
 800723e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007240:	429a      	cmp	r2, r3
 8007242:	d107      	bne.n	8007254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007250:	429a      	cmp	r2, r3
 8007252:	d001      	beq.n	8007258 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e000      	b.n	800725a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	40023800 	.word	0x40023800

08007268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e0cc      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800727c:	4b68      	ldr	r3, [pc, #416]	@ (8007420 <HAL_RCC_ClockConfig+0x1b8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0307 	and.w	r3, r3, #7
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	429a      	cmp	r2, r3
 8007288:	d90c      	bls.n	80072a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800728a:	4b65      	ldr	r3, [pc, #404]	@ (8007420 <HAL_RCC_ClockConfig+0x1b8>)
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007292:	4b63      	ldr	r3, [pc, #396]	@ (8007420 <HAL_RCC_ClockConfig+0x1b8>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d001      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e0b8      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d020      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072bc:	4b59      	ldr	r3, [pc, #356]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	4a58      	ldr	r2, [pc, #352]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80072c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80072c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072d4:	4b53      	ldr	r3, [pc, #332]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	4a52      	ldr	r2, [pc, #328]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80072da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80072de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072e0:	4b50      	ldr	r3, [pc, #320]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	494d      	ldr	r1, [pc, #308]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d044      	beq.n	8007388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d107      	bne.n	8007316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007306:	4b47      	ldr	r3, [pc, #284]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d119      	bne.n	8007346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e07f      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b02      	cmp	r3, #2
 800731c:	d003      	beq.n	8007326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007322:	2b03      	cmp	r3, #3
 8007324:	d107      	bne.n	8007336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007326:	4b3f      	ldr	r3, [pc, #252]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d109      	bne.n	8007346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e06f      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007336:	4b3b      	ldr	r3, [pc, #236]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e067      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007346:	4b37      	ldr	r3, [pc, #220]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f023 0203 	bic.w	r2, r3, #3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	4934      	ldr	r1, [pc, #208]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 8007354:	4313      	orrs	r3, r2
 8007356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007358:	f7fe f8aa 	bl	80054b0 <HAL_GetTick>
 800735c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800735e:	e00a      	b.n	8007376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007360:	f7fe f8a6 	bl	80054b0 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800736e:	4293      	cmp	r3, r2
 8007370:	d901      	bls.n	8007376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e04f      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007376:	4b2b      	ldr	r3, [pc, #172]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 020c 	and.w	r2, r3, #12
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	429a      	cmp	r2, r3
 8007386:	d1eb      	bne.n	8007360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007388:	4b25      	ldr	r3, [pc, #148]	@ (8007420 <HAL_RCC_ClockConfig+0x1b8>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	429a      	cmp	r2, r3
 8007394:	d20c      	bcs.n	80073b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007396:	4b22      	ldr	r3, [pc, #136]	@ (8007420 <HAL_RCC_ClockConfig+0x1b8>)
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800739e:	4b20      	ldr	r3, [pc, #128]	@ (8007420 <HAL_RCC_ClockConfig+0x1b8>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d001      	beq.n	80073b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e032      	b.n	8007416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d008      	beq.n	80073ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073bc:	4b19      	ldr	r3, [pc, #100]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	4916      	ldr	r1, [pc, #88]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d009      	beq.n	80073ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073da:	4b12      	ldr	r3, [pc, #72]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	490e      	ldr	r1, [pc, #56]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073ee:	f000 f821 	bl	8007434 <HAL_RCC_GetSysClockFreq>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007424 <HAL_RCC_ClockConfig+0x1bc>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	091b      	lsrs	r3, r3, #4
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	490a      	ldr	r1, [pc, #40]	@ (8007428 <HAL_RCC_ClockConfig+0x1c0>)
 8007400:	5ccb      	ldrb	r3, [r1, r3]
 8007402:	fa22 f303 	lsr.w	r3, r2, r3
 8007406:	4a09      	ldr	r2, [pc, #36]	@ (800742c <HAL_RCC_ClockConfig+0x1c4>)
 8007408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800740a:	4b09      	ldr	r3, [pc, #36]	@ (8007430 <HAL_RCC_ClockConfig+0x1c8>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe f80a 	bl	8005428 <HAL_InitTick>

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40023c00 	.word	0x40023c00
 8007424:	40023800 	.word	0x40023800
 8007428:	0800cea8 	.word	0x0800cea8
 800742c:	20000020 	.word	0x20000020
 8007430:	20000024 	.word	0x20000024

08007434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007438:	b094      	sub	sp, #80	@ 0x50
 800743a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007440:	2300      	movs	r3, #0
 8007442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007444:	2300      	movs	r3, #0
 8007446:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800744c:	4b79      	ldr	r3, [pc, #484]	@ (8007634 <HAL_RCC_GetSysClockFreq+0x200>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f003 030c 	and.w	r3, r3, #12
 8007454:	2b08      	cmp	r3, #8
 8007456:	d00d      	beq.n	8007474 <HAL_RCC_GetSysClockFreq+0x40>
 8007458:	2b08      	cmp	r3, #8
 800745a:	f200 80e1 	bhi.w	8007620 <HAL_RCC_GetSysClockFreq+0x1ec>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <HAL_RCC_GetSysClockFreq+0x34>
 8007462:	2b04      	cmp	r3, #4
 8007464:	d003      	beq.n	800746e <HAL_RCC_GetSysClockFreq+0x3a>
 8007466:	e0db      	b.n	8007620 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007468:	4b73      	ldr	r3, [pc, #460]	@ (8007638 <HAL_RCC_GetSysClockFreq+0x204>)
 800746a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800746c:	e0db      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800746e:	4b73      	ldr	r3, [pc, #460]	@ (800763c <HAL_RCC_GetSysClockFreq+0x208>)
 8007470:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007472:	e0d8      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007474:	4b6f      	ldr	r3, [pc, #444]	@ (8007634 <HAL_RCC_GetSysClockFreq+0x200>)
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800747c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800747e:	4b6d      	ldr	r3, [pc, #436]	@ (8007634 <HAL_RCC_GetSysClockFreq+0x200>)
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d063      	beq.n	8007552 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800748a:	4b6a      	ldr	r3, [pc, #424]	@ (8007634 <HAL_RCC_GetSysClockFreq+0x200>)
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	099b      	lsrs	r3, r3, #6
 8007490:	2200      	movs	r2, #0
 8007492:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007494:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749c:	633b      	str	r3, [r7, #48]	@ 0x30
 800749e:	2300      	movs	r3, #0
 80074a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80074a6:	4622      	mov	r2, r4
 80074a8:	462b      	mov	r3, r5
 80074aa:	f04f 0000 	mov.w	r0, #0
 80074ae:	f04f 0100 	mov.w	r1, #0
 80074b2:	0159      	lsls	r1, r3, #5
 80074b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074b8:	0150      	lsls	r0, r2, #5
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4621      	mov	r1, r4
 80074c0:	1a51      	subs	r1, r2, r1
 80074c2:	6139      	str	r1, [r7, #16]
 80074c4:	4629      	mov	r1, r5
 80074c6:	eb63 0301 	sbc.w	r3, r3, r1
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074d8:	4659      	mov	r1, fp
 80074da:	018b      	lsls	r3, r1, #6
 80074dc:	4651      	mov	r1, sl
 80074de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80074e2:	4651      	mov	r1, sl
 80074e4:	018a      	lsls	r2, r1, #6
 80074e6:	4651      	mov	r1, sl
 80074e8:	ebb2 0801 	subs.w	r8, r2, r1
 80074ec:	4659      	mov	r1, fp
 80074ee:	eb63 0901 	sbc.w	r9, r3, r1
 80074f2:	f04f 0200 	mov.w	r2, #0
 80074f6:	f04f 0300 	mov.w	r3, #0
 80074fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007506:	4690      	mov	r8, r2
 8007508:	4699      	mov	r9, r3
 800750a:	4623      	mov	r3, r4
 800750c:	eb18 0303 	adds.w	r3, r8, r3
 8007510:	60bb      	str	r3, [r7, #8]
 8007512:	462b      	mov	r3, r5
 8007514:	eb49 0303 	adc.w	r3, r9, r3
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	f04f 0200 	mov.w	r2, #0
 800751e:	f04f 0300 	mov.w	r3, #0
 8007522:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007526:	4629      	mov	r1, r5
 8007528:	024b      	lsls	r3, r1, #9
 800752a:	4621      	mov	r1, r4
 800752c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007530:	4621      	mov	r1, r4
 8007532:	024a      	lsls	r2, r1, #9
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
 8007538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800753a:	2200      	movs	r2, #0
 800753c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800753e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007540:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007544:	f7f9 fb2e 	bl	8000ba4 <__aeabi_uldivmod>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4613      	mov	r3, r2
 800754e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007550:	e058      	b.n	8007604 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007552:	4b38      	ldr	r3, [pc, #224]	@ (8007634 <HAL_RCC_GetSysClockFreq+0x200>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	099b      	lsrs	r3, r3, #6
 8007558:	2200      	movs	r2, #0
 800755a:	4618      	mov	r0, r3
 800755c:	4611      	mov	r1, r2
 800755e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007562:	623b      	str	r3, [r7, #32]
 8007564:	2300      	movs	r3, #0
 8007566:	627b      	str	r3, [r7, #36]	@ 0x24
 8007568:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800756c:	4642      	mov	r2, r8
 800756e:	464b      	mov	r3, r9
 8007570:	f04f 0000 	mov.w	r0, #0
 8007574:	f04f 0100 	mov.w	r1, #0
 8007578:	0159      	lsls	r1, r3, #5
 800757a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800757e:	0150      	lsls	r0, r2, #5
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4641      	mov	r1, r8
 8007586:	ebb2 0a01 	subs.w	sl, r2, r1
 800758a:	4649      	mov	r1, r9
 800758c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800759c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80075a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80075a4:	ebb2 040a 	subs.w	r4, r2, sl
 80075a8:	eb63 050b 	sbc.w	r5, r3, fp
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	00eb      	lsls	r3, r5, #3
 80075b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075ba:	00e2      	lsls	r2, r4, #3
 80075bc:	4614      	mov	r4, r2
 80075be:	461d      	mov	r5, r3
 80075c0:	4643      	mov	r3, r8
 80075c2:	18e3      	adds	r3, r4, r3
 80075c4:	603b      	str	r3, [r7, #0]
 80075c6:	464b      	mov	r3, r9
 80075c8:	eb45 0303 	adc.w	r3, r5, r3
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	f04f 0200 	mov.w	r2, #0
 80075d2:	f04f 0300 	mov.w	r3, #0
 80075d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075da:	4629      	mov	r1, r5
 80075dc:	028b      	lsls	r3, r1, #10
 80075de:	4621      	mov	r1, r4
 80075e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075e4:	4621      	mov	r1, r4
 80075e6:	028a      	lsls	r2, r1, #10
 80075e8:	4610      	mov	r0, r2
 80075ea:	4619      	mov	r1, r3
 80075ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075ee:	2200      	movs	r2, #0
 80075f0:	61bb      	str	r3, [r7, #24]
 80075f2:	61fa      	str	r2, [r7, #28]
 80075f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075f8:	f7f9 fad4 	bl	8000ba4 <__aeabi_uldivmod>
 80075fc:	4602      	mov	r2, r0
 80075fe:	460b      	mov	r3, r1
 8007600:	4613      	mov	r3, r2
 8007602:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007604:	4b0b      	ldr	r3, [pc, #44]	@ (8007634 <HAL_RCC_GetSysClockFreq+0x200>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	f003 0303 	and.w	r3, r3, #3
 800760e:	3301      	adds	r3, #1
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007618:	fbb2 f3f3 	udiv	r3, r2, r3
 800761c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800761e:	e002      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007620:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <HAL_RCC_GetSysClockFreq+0x204>)
 8007622:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007628:	4618      	mov	r0, r3
 800762a:	3750      	adds	r7, #80	@ 0x50
 800762c:	46bd      	mov	sp, r7
 800762e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007632:	bf00      	nop
 8007634:	40023800 	.word	0x40023800
 8007638:	00f42400 	.word	0x00f42400
 800763c:	007a1200 	.word	0x007a1200

08007640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007644:	4b03      	ldr	r3, [pc, #12]	@ (8007654 <HAL_RCC_GetHCLKFreq+0x14>)
 8007646:	681b      	ldr	r3, [r3, #0]
}
 8007648:	4618      	mov	r0, r3
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	20000020 	.word	0x20000020

08007658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800765c:	f7ff fff0 	bl	8007640 <HAL_RCC_GetHCLKFreq>
 8007660:	4602      	mov	r2, r0
 8007662:	4b05      	ldr	r3, [pc, #20]	@ (8007678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	0a9b      	lsrs	r3, r3, #10
 8007668:	f003 0307 	and.w	r3, r3, #7
 800766c:	4903      	ldr	r1, [pc, #12]	@ (800767c <HAL_RCC_GetPCLK1Freq+0x24>)
 800766e:	5ccb      	ldrb	r3, [r1, r3]
 8007670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007674:	4618      	mov	r0, r3
 8007676:	bd80      	pop	{r7, pc}
 8007678:	40023800 	.word	0x40023800
 800767c:	0800ceb8 	.word	0x0800ceb8

08007680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e07b      	b.n	800778a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007696:	2b00      	cmp	r3, #0
 8007698:	d108      	bne.n	80076ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076a2:	d009      	beq.n	80076b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	61da      	str	r2, [r3, #28]
 80076aa:	e005      	b.n	80076b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d106      	bne.n	80076d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fd fc7a 	bl	8004fcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007700:	431a      	orrs	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	431a      	orrs	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	431a      	orrs	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007728:	431a      	orrs	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007732:	431a      	orrs	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800773c:	ea42 0103 	orr.w	r1, r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007744:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	0c1b      	lsrs	r3, r3, #16
 8007756:	f003 0104 	and.w	r1, r3, #4
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775e:	f003 0210 	and.w	r2, r3, #16
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69da      	ldr	r2, [r3, #28]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007778:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b088      	sub	sp, #32
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	603b      	str	r3, [r7, #0]
 800779e:	4613      	mov	r3, r2
 80077a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d101      	bne.n	80077b4 <HAL_SPI_Transmit+0x22>
 80077b0:	2302      	movs	r3, #2
 80077b2:	e12d      	b.n	8007a10 <HAL_SPI_Transmit+0x27e>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077bc:	f7fd fe78 	bl	80054b0 <HAL_GetTick>
 80077c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d002      	beq.n	80077d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80077d2:	2302      	movs	r3, #2
 80077d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077d6:	e116      	b.n	8007a06 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_SPI_Transmit+0x52>
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80077e8:	e10d      	b.n	8007a06 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2203      	movs	r2, #3
 80077ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	88fa      	ldrh	r2, [r7, #6]
 8007802:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	88fa      	ldrh	r2, [r7, #6]
 8007808:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007830:	d10f      	bne.n	8007852 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007840:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007850:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785c:	2b40      	cmp	r3, #64	@ 0x40
 800785e:	d007      	beq.n	8007870 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800786e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007878:	d14f      	bne.n	800791a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <HAL_SPI_Transmit+0xf6>
 8007882:	8afb      	ldrh	r3, [r7, #22]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d142      	bne.n	800790e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788c:	881a      	ldrh	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007898:	1c9a      	adds	r2, r3, #2
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80078ac:	e02f      	b.n	800790e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d112      	bne.n	80078e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c0:	881a      	ldrh	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078cc:	1c9a      	adds	r2, r3, #2
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	b29a      	uxth	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80078e0:	e015      	b.n	800790e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078e2:	f7fd fde5 	bl	80054b0 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d803      	bhi.n	80078fa <HAL_SPI_Transmit+0x168>
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f8:	d102      	bne.n	8007900 <HAL_SPI_Transmit+0x16e>
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d106      	bne.n	800790e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800790c:	e07b      	b.n	8007a06 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007912:	b29b      	uxth	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1ca      	bne.n	80078ae <HAL_SPI_Transmit+0x11c>
 8007918:	e050      	b.n	80079bc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <HAL_SPI_Transmit+0x196>
 8007922:	8afb      	ldrh	r3, [r7, #22]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d144      	bne.n	80079b2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	330c      	adds	r3, #12
 8007932:	7812      	ldrb	r2, [r2, #0]
 8007934:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007944:	b29b      	uxth	r3, r3
 8007946:	3b01      	subs	r3, #1
 8007948:	b29a      	uxth	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800794e:	e030      	b.n	80079b2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b02      	cmp	r3, #2
 800795c:	d113      	bne.n	8007986 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	330c      	adds	r3, #12
 8007968:	7812      	ldrb	r2, [r2, #0]
 800796a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007970:	1c5a      	adds	r2, r3, #1
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800797a:	b29b      	uxth	r3, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007984:	e015      	b.n	80079b2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007986:	f7fd fd93 	bl	80054b0 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d803      	bhi.n	800799e <HAL_SPI_Transmit+0x20c>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d102      	bne.n	80079a4 <HAL_SPI_Transmit+0x212>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80079b0:	e029      	b.n	8007a06 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1c9      	bne.n	8007950 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 fbdf 	bl	8008184 <SPI_EndRxTxTransaction>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2220      	movs	r2, #32
 80079d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10a      	bne.n	80079f0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079da:	2300      	movs	r3, #0
 80079dc:	613b      	str	r3, [r7, #16]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	77fb      	strb	r3, [r7, #31]
 80079fc:	e003      	b.n	8007a06 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007a0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3720      	adds	r7, #32
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	603b      	str	r3, [r7, #0]
 8007a24:	4613      	mov	r3, r2
 8007a26:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d002      	beq.n	8007a3e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007a38:	2302      	movs	r3, #2
 8007a3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a3c:	e0fb      	b.n	8007c36 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a46:	d112      	bne.n	8007a6e <HAL_SPI_Receive+0x56>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10e      	bne.n	8007a6e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2204      	movs	r2, #4
 8007a54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007a58:	88fa      	ldrh	r2, [r7, #6]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 f8ef 	bl	8007c48 <HAL_SPI_TransmitReceive>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	e0e8      	b.n	8007c40 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d101      	bne.n	8007a7c <HAL_SPI_Receive+0x64>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e0e1      	b.n	8007c40 <HAL_SPI_Receive+0x228>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a84:	f7fd fd14 	bl	80054b0 <HAL_GetTick>
 8007a88:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d002      	beq.n	8007a96 <HAL_SPI_Receive+0x7e>
 8007a90:	88fb      	ldrh	r3, [r7, #6]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d102      	bne.n	8007a9c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a9a:	e0cc      	b.n	8007c36 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2204      	movs	r2, #4
 8007aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	88fa      	ldrh	r2, [r7, #6]
 8007ab4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	88fa      	ldrh	r2, [r7, #6]
 8007aba:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ae2:	d10f      	bne.n	8007b04 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007af2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b02:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b0e:	2b40      	cmp	r3, #64	@ 0x40
 8007b10:	d007      	beq.n	8007b22 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d16a      	bne.n	8007c00 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007b2a:	e032      	b.n	8007b92 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d115      	bne.n	8007b66 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f103 020c 	add.w	r2, r3, #12
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b46:	7812      	ldrb	r2, [r2, #0]
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b64:	e015      	b.n	8007b92 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b66:	f7fd fca3 	bl	80054b0 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d803      	bhi.n	8007b7e <HAL_SPI_Receive+0x166>
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7c:	d102      	bne.n	8007b84 <HAL_SPI_Receive+0x16c>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d106      	bne.n	8007b92 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007b90:	e051      	b.n	8007c36 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1c7      	bne.n	8007b2c <HAL_SPI_Receive+0x114>
 8007b9c:	e035      	b.n	8007c0a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d113      	bne.n	8007bd4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb6:	b292      	uxth	r2, r2
 8007bb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bbe:	1c9a      	adds	r2, r3, #2
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007bd2:	e015      	b.n	8007c00 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bd4:	f7fd fc6c 	bl	80054b0 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d803      	bhi.n	8007bec <HAL_SPI_Receive+0x1d4>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bea:	d102      	bne.n	8007bf2 <HAL_SPI_Receive+0x1da>
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d106      	bne.n	8007c00 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007bfe:	e01a      	b.n	8007c36 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1c9      	bne.n	8007b9e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fa52 	bl	80080b8 <SPI_EndRxTransaction>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	75fb      	strb	r3, [r7, #23]
 8007c2c:	e003      	b.n	8007c36 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08c      	sub	sp, #48	@ 0x30
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c56:	2301      	movs	r3, #1
 8007c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d101      	bne.n	8007c6e <HAL_SPI_TransmitReceive+0x26>
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e198      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x358>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c76:	f7fd fc1b 	bl	80054b0 <HAL_GetTick>
 8007c7a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007c8c:	887b      	ldrh	r3, [r7, #2]
 8007c8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c90:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d00f      	beq.n	8007cb8 <HAL_SPI_TransmitReceive+0x70>
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c9e:	d107      	bne.n	8007cb0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d103      	bne.n	8007cb0 <HAL_SPI_TransmitReceive+0x68>
 8007ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d003      	beq.n	8007cb8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007cb6:	e16d      	b.n	8007f94 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <HAL_SPI_TransmitReceive+0x82>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <HAL_SPI_TransmitReceive+0x82>
 8007cc4:	887b      	ldrh	r3, [r7, #2]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d103      	bne.n	8007cd2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007cd0:	e160      	b.n	8007f94 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d003      	beq.n	8007ce6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2205      	movs	r2, #5
 8007ce2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	887a      	ldrh	r2, [r7, #2]
 8007cf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	887a      	ldrh	r2, [r7, #2]
 8007cfc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	887a      	ldrh	r2, [r7, #2]
 8007d08:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	887a      	ldrh	r2, [r7, #2]
 8007d0e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d26:	2b40      	cmp	r3, #64	@ 0x40
 8007d28:	d007      	beq.n	8007d3a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d42:	d17c      	bne.n	8007e3e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HAL_SPI_TransmitReceive+0x10a>
 8007d4c:	8b7b      	ldrh	r3, [r7, #26]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d16a      	bne.n	8007e28 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d56:	881a      	ldrh	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d62:	1c9a      	adds	r2, r3, #2
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d76:	e057      	b.n	8007e28 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d11b      	bne.n	8007dbe <HAL_SPI_TransmitReceive+0x176>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d016      	beq.n	8007dbe <HAL_SPI_TransmitReceive+0x176>
 8007d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d113      	bne.n	8007dbe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d9a:	881a      	ldrh	r2, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da6:	1c9a      	adds	r2, r3, #2
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d119      	bne.n	8007e00 <HAL_SPI_TransmitReceive+0x1b8>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d014      	beq.n	8007e00 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	b292      	uxth	r2, r2
 8007de2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de8:	1c9a      	adds	r2, r3, #2
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e00:	f7fd fb56 	bl	80054b0 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d80b      	bhi.n	8007e28 <HAL_SPI_TransmitReceive+0x1e0>
 8007e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e16:	d007      	beq.n	8007e28 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007e26:	e0b5      	b.n	8007f94 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1a2      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x130>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d19d      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x130>
 8007e3c:	e080      	b.n	8007f40 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_SPI_TransmitReceive+0x204>
 8007e46:	8b7b      	ldrh	r3, [r7, #26]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d16f      	bne.n	8007f2c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	330c      	adds	r3, #12
 8007e56:	7812      	ldrb	r2, [r2, #0]
 8007e58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e72:	e05b      	b.n	8007f2c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d11c      	bne.n	8007ebc <HAL_SPI_TransmitReceive+0x274>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d017      	beq.n	8007ebc <HAL_SPI_TransmitReceive+0x274>
 8007e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d114      	bne.n	8007ebc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	7812      	ldrb	r2, [r2, #0]
 8007e9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d119      	bne.n	8007efe <HAL_SPI_TransmitReceive+0x2b6>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d014      	beq.n	8007efe <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007efa:	2301      	movs	r3, #1
 8007efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007efe:	f7fd fad7 	bl	80054b0 <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d803      	bhi.n	8007f16 <HAL_SPI_TransmitReceive+0x2ce>
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f14:	d102      	bne.n	8007f1c <HAL_SPI_TransmitReceive+0x2d4>
 8007f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d107      	bne.n	8007f2c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007f2a:	e033      	b.n	8007f94 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d19e      	bne.n	8007e74 <HAL_SPI_TransmitReceive+0x22c>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d199      	bne.n	8007e74 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 f91d 	bl	8008184 <SPI_EndRxTxTransaction>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d006      	beq.n	8007f5e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007f5c:	e01a      	b.n	8007f94 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f66:	2300      	movs	r3, #0
 8007f68:	617b      	str	r3, [r7, #20]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	617b      	str	r3, [r7, #20]
 8007f7a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8a:	e003      	b.n	8007f94 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007f9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3730      	adds	r7, #48	@ 0x30
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	603b      	str	r3, [r7, #0]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007fb8:	f7fd fa7a 	bl	80054b0 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc0:	1a9b      	subs	r3, r3, r2
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fc8:	f7fd fa72 	bl	80054b0 <HAL_GetTick>
 8007fcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fce:	4b39      	ldr	r3, [pc, #228]	@ (80080b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	015b      	lsls	r3, r3, #5
 8007fd4:	0d1b      	lsrs	r3, r3, #20
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	fb02 f303 	mul.w	r3, r2, r3
 8007fdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fde:	e054      	b.n	800808a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe6:	d050      	beq.n	800808a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fe8:	f7fd fa62 	bl	80054b0 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d902      	bls.n	8007ffe <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d13d      	bne.n	800807a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800800c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008016:	d111      	bne.n	800803c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008020:	d004      	beq.n	800802c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800802a:	d107      	bne.n	800803c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800803a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008044:	d10f      	bne.n	8008066 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008064:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e017      	b.n	80080aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	3b01      	subs	r3, #1
 8008088:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4013      	ands	r3, r2
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	429a      	cmp	r2, r3
 8008098:	bf0c      	ite	eq
 800809a:	2301      	moveq	r3, #1
 800809c:	2300      	movne	r3, #0
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	461a      	mov	r2, r3
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d19b      	bne.n	8007fe0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3720      	adds	r7, #32
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20000020 	.word	0x20000020

080080b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af02      	add	r7, sp, #8
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080cc:	d111      	bne.n	80080f2 <SPI_EndRxTransaction+0x3a>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080d6:	d004      	beq.n	80080e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080e0:	d107      	bne.n	80080f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080fa:	d12a      	bne.n	8008152 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008104:	d012      	beq.n	800812c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2200      	movs	r2, #0
 800810e:	2180      	movs	r1, #128	@ 0x80
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f7ff ff49 	bl	8007fa8 <SPI_WaitFlagStateUntilTimeout>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d02d      	beq.n	8008178 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008120:	f043 0220 	orr.w	r2, r3, #32
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e026      	b.n	800817a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2200      	movs	r2, #0
 8008134:	2101      	movs	r1, #1
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f7ff ff36 	bl	8007fa8 <SPI_WaitFlagStateUntilTimeout>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d01a      	beq.n	8008178 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008146:	f043 0220 	orr.w	r2, r3, #32
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e013      	b.n	800817a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2200      	movs	r2, #0
 800815a:	2101      	movs	r1, #1
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f7ff ff23 	bl	8007fa8 <SPI_WaitFlagStateUntilTimeout>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d007      	beq.n	8008178 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800816c:	f043 0220 	orr.w	r2, r3, #32
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008174:	2303      	movs	r3, #3
 8008176:	e000      	b.n	800817a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af02      	add	r7, sp, #8
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2201      	movs	r2, #1
 8008198:	2102      	movs	r1, #2
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff ff04 	bl	8007fa8 <SPI_WaitFlagStateUntilTimeout>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d007      	beq.n	80081b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081aa:	f043 0220 	orr.w	r2, r3, #32
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e032      	b.n	800821c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80081b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008224 <SPI_EndRxTxTransaction+0xa0>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008228 <SPI_EndRxTxTransaction+0xa4>)
 80081bc:	fba2 2303 	umull	r2, r3, r2, r3
 80081c0:	0d5b      	lsrs	r3, r3, #21
 80081c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80081c6:	fb02 f303 	mul.w	r3, r2, r3
 80081ca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081d4:	d112      	bne.n	80081fc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2200      	movs	r2, #0
 80081de:	2180      	movs	r1, #128	@ 0x80
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f7ff fee1 	bl	8007fa8 <SPI_WaitFlagStateUntilTimeout>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d016      	beq.n	800821a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f0:	f043 0220 	orr.w	r2, r3, #32
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e00f      	b.n	800821c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	3b01      	subs	r3, #1
 8008206:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008212:	2b80      	cmp	r3, #128	@ 0x80
 8008214:	d0f2      	beq.n	80081fc <SPI_EndRxTxTransaction+0x78>
 8008216:	e000      	b.n	800821a <SPI_EndRxTxTransaction+0x96>
        break;
 8008218:	bf00      	nop
  }

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20000020 	.word	0x20000020
 8008228:	165e9f81 	.word	0x165e9f81

0800822c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e038      	b.n	80082b4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f7f9 f9b2 	bl	80015c0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3308      	adds	r3, #8
 8008264:	4619      	mov	r1, r3
 8008266:	4610      	mov	r0, r2
 8008268:	f000 fc9e 	bl	8008ba8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6818      	ldr	r0, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	461a      	mov	r2, r3
 8008276:	68b9      	ldr	r1, [r7, #8]
 8008278:	f000 fd00 	bl	8008c7c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6858      	ldr	r0, [r3, #4]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	f000 fd2d 	bl	8008ce8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	6892      	ldr	r2, [r2, #8]
 8008296:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	6892      	ldr	r2, [r2, #8]
 80082a2:	f041 0101 	orr.w	r1, r1, #1
 80082a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e041      	b.n	8008352 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d106      	bne.n	80082e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7fc ffd2 	bl	800528c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3304      	adds	r3, #4
 80082f8:	4619      	mov	r1, r3
 80082fa:	4610      	mov	r0, r2
 80082fc:	f000 fa7e 	bl	80087fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3708      	adds	r7, #8
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b01      	cmp	r3, #1
 800836e:	d001      	beq.n	8008374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e04e      	b.n	8008412 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0201 	orr.w	r2, r2, #1
 800838a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a23      	ldr	r2, [pc, #140]	@ (8008420 <HAL_TIM_Base_Start_IT+0xc4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d022      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800839e:	d01d      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008424 <HAL_TIM_Base_Start_IT+0xc8>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d018      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008428 <HAL_TIM_Base_Start_IT+0xcc>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d013      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1c      	ldr	r2, [pc, #112]	@ (800842c <HAL_TIM_Base_Start_IT+0xd0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00e      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008430 <HAL_TIM_Base_Start_IT+0xd4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d009      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a19      	ldr	r2, [pc, #100]	@ (8008434 <HAL_TIM_Base_Start_IT+0xd8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d004      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x80>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a18      	ldr	r2, [pc, #96]	@ (8008438 <HAL_TIM_Base_Start_IT+0xdc>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d111      	bne.n	8008400 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b06      	cmp	r3, #6
 80083ec:	d010      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f042 0201 	orr.w	r2, r2, #1
 80083fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083fe:	e007      	b.n	8008410 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0201 	orr.w	r2, r2, #1
 800840e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	40010000 	.word	0x40010000
 8008424:	40000400 	.word	0x40000400
 8008428:	40000800 	.word	0x40000800
 800842c:	40000c00 	.word	0x40000c00
 8008430:	40010400 	.word	0x40010400
 8008434:	40014000 	.word	0x40014000
 8008438:	40001800 	.word	0x40001800

0800843c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b00      	cmp	r3, #0
 800845c:	d020      	beq.n	80084a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f003 0302 	and.w	r3, r3, #2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01b      	beq.n	80084a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f06f 0202 	mvn.w	r2, #2
 8008470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f003 0303 	and.w	r3, r3, #3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f999 	bl	80087be <HAL_TIM_IC_CaptureCallback>
 800848c:	e005      	b.n	800849a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f98b 	bl	80087aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f99c 	bl	80087d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f003 0304 	and.w	r3, r3, #4
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d020      	beq.n	80084ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01b      	beq.n	80084ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f06f 0204 	mvn.w	r2, #4
 80084bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2202      	movs	r2, #2
 80084c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f973 	bl	80087be <HAL_TIM_IC_CaptureCallback>
 80084d8:	e005      	b.n	80084e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f965 	bl	80087aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f976 	bl	80087d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f003 0308 	and.w	r3, r3, #8
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d020      	beq.n	8008538 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f003 0308 	and.w	r3, r3, #8
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01b      	beq.n	8008538 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f06f 0208 	mvn.w	r2, #8
 8008508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2204      	movs	r2, #4
 800850e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	f003 0303 	and.w	r3, r3, #3
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f94d 	bl	80087be <HAL_TIM_IC_CaptureCallback>
 8008524:	e005      	b.n	8008532 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f93f 	bl	80087aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f950 	bl	80087d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f003 0310 	and.w	r3, r3, #16
 800853e:	2b00      	cmp	r3, #0
 8008540:	d020      	beq.n	8008584 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f003 0310 	and.w	r3, r3, #16
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01b      	beq.n	8008584 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f06f 0210 	mvn.w	r2, #16
 8008554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2208      	movs	r2, #8
 800855a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f927 	bl	80087be <HAL_TIM_IC_CaptureCallback>
 8008570:	e005      	b.n	800857e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f919 	bl	80087aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f92a 	bl	80087d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00c      	beq.n	80085a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	d007      	beq.n	80085a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f06f 0201 	mvn.w	r2, #1
 80085a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fc fc9c 	bl	8004ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00c      	beq.n	80085cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d007      	beq.n	80085cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80085c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fae4 	bl	8008b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00c      	beq.n	80085f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d007      	beq.n	80085f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f8fb 	bl	80087e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00c      	beq.n	8008614 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f003 0320 	and.w	r3, r3, #32
 8008600:	2b00      	cmp	r3, #0
 8008602:	d007      	beq.n	8008614 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f06f 0220 	mvn.w	r2, #32
 800860c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fab6 	bl	8008b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008614:	bf00      	nop
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008630:	2b01      	cmp	r3, #1
 8008632:	d101      	bne.n	8008638 <HAL_TIM_ConfigClockSource+0x1c>
 8008634:	2302      	movs	r3, #2
 8008636:	e0b4      	b.n	80087a2 <HAL_TIM_ConfigClockSource+0x186>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800865e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008670:	d03e      	beq.n	80086f0 <HAL_TIM_ConfigClockSource+0xd4>
 8008672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008676:	f200 8087 	bhi.w	8008788 <HAL_TIM_ConfigClockSource+0x16c>
 800867a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800867e:	f000 8086 	beq.w	800878e <HAL_TIM_ConfigClockSource+0x172>
 8008682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008686:	d87f      	bhi.n	8008788 <HAL_TIM_ConfigClockSource+0x16c>
 8008688:	2b70      	cmp	r3, #112	@ 0x70
 800868a:	d01a      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0xa6>
 800868c:	2b70      	cmp	r3, #112	@ 0x70
 800868e:	d87b      	bhi.n	8008788 <HAL_TIM_ConfigClockSource+0x16c>
 8008690:	2b60      	cmp	r3, #96	@ 0x60
 8008692:	d050      	beq.n	8008736 <HAL_TIM_ConfigClockSource+0x11a>
 8008694:	2b60      	cmp	r3, #96	@ 0x60
 8008696:	d877      	bhi.n	8008788 <HAL_TIM_ConfigClockSource+0x16c>
 8008698:	2b50      	cmp	r3, #80	@ 0x50
 800869a:	d03c      	beq.n	8008716 <HAL_TIM_ConfigClockSource+0xfa>
 800869c:	2b50      	cmp	r3, #80	@ 0x50
 800869e:	d873      	bhi.n	8008788 <HAL_TIM_ConfigClockSource+0x16c>
 80086a0:	2b40      	cmp	r3, #64	@ 0x40
 80086a2:	d058      	beq.n	8008756 <HAL_TIM_ConfigClockSource+0x13a>
 80086a4:	2b40      	cmp	r3, #64	@ 0x40
 80086a6:	d86f      	bhi.n	8008788 <HAL_TIM_ConfigClockSource+0x16c>
 80086a8:	2b30      	cmp	r3, #48	@ 0x30
 80086aa:	d064      	beq.n	8008776 <HAL_TIM_ConfigClockSource+0x15a>
 80086ac:	2b30      	cmp	r3, #48	@ 0x30
 80086ae:	d86b      	bhi.n	8008788 <HAL_TIM_ConfigClockSource+0x16c>
 80086b0:	2b20      	cmp	r3, #32
 80086b2:	d060      	beq.n	8008776 <HAL_TIM_ConfigClockSource+0x15a>
 80086b4:	2b20      	cmp	r3, #32
 80086b6:	d867      	bhi.n	8008788 <HAL_TIM_ConfigClockSource+0x16c>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d05c      	beq.n	8008776 <HAL_TIM_ConfigClockSource+0x15a>
 80086bc:	2b10      	cmp	r3, #16
 80086be:	d05a      	beq.n	8008776 <HAL_TIM_ConfigClockSource+0x15a>
 80086c0:	e062      	b.n	8008788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086d2:	f000 f9b9 	bl	8008a48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	609a      	str	r2, [r3, #8]
      break;
 80086ee:	e04f      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008700:	f000 f9a2 	bl	8008a48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689a      	ldr	r2, [r3, #8]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008712:	609a      	str	r2, [r3, #8]
      break;
 8008714:	e03c      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008722:	461a      	mov	r2, r3
 8008724:	f000 f916 	bl	8008954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2150      	movs	r1, #80	@ 0x50
 800872e:	4618      	mov	r0, r3
 8008730:	f000 f96f 	bl	8008a12 <TIM_ITRx_SetConfig>
      break;
 8008734:	e02c      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008742:	461a      	mov	r2, r3
 8008744:	f000 f935 	bl	80089b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2160      	movs	r1, #96	@ 0x60
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f95f 	bl	8008a12 <TIM_ITRx_SetConfig>
      break;
 8008754:	e01c      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008762:	461a      	mov	r2, r3
 8008764:	f000 f8f6 	bl	8008954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2140      	movs	r1, #64	@ 0x40
 800876e:	4618      	mov	r0, r3
 8008770:	f000 f94f 	bl	8008a12 <TIM_ITRx_SetConfig>
      break;
 8008774:	e00c      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4619      	mov	r1, r3
 8008780:	4610      	mov	r0, r2
 8008782:	f000 f946 	bl	8008a12 <TIM_ITRx_SetConfig>
      break;
 8008786:	e003      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	73fb      	strb	r3, [r7, #15]
      break;
 800878c:	e000      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800878e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087c6:	bf00      	nop
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b083      	sub	sp, #12
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087da:	bf00      	nop
 80087dc:	370c      	adds	r7, #12
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
	...

080087fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a46      	ldr	r2, [pc, #280]	@ (8008928 <TIM_Base_SetConfig+0x12c>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d013      	beq.n	800883c <TIM_Base_SetConfig+0x40>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800881a:	d00f      	beq.n	800883c <TIM_Base_SetConfig+0x40>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a43      	ldr	r2, [pc, #268]	@ (800892c <TIM_Base_SetConfig+0x130>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00b      	beq.n	800883c <TIM_Base_SetConfig+0x40>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a42      	ldr	r2, [pc, #264]	@ (8008930 <TIM_Base_SetConfig+0x134>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d007      	beq.n	800883c <TIM_Base_SetConfig+0x40>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a41      	ldr	r2, [pc, #260]	@ (8008934 <TIM_Base_SetConfig+0x138>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d003      	beq.n	800883c <TIM_Base_SetConfig+0x40>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a40      	ldr	r2, [pc, #256]	@ (8008938 <TIM_Base_SetConfig+0x13c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d108      	bne.n	800884e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	4313      	orrs	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a35      	ldr	r2, [pc, #212]	@ (8008928 <TIM_Base_SetConfig+0x12c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d02b      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800885c:	d027      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a32      	ldr	r2, [pc, #200]	@ (800892c <TIM_Base_SetConfig+0x130>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d023      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a31      	ldr	r2, [pc, #196]	@ (8008930 <TIM_Base_SetConfig+0x134>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d01f      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a30      	ldr	r2, [pc, #192]	@ (8008934 <TIM_Base_SetConfig+0x138>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d01b      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a2f      	ldr	r2, [pc, #188]	@ (8008938 <TIM_Base_SetConfig+0x13c>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d017      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a2e      	ldr	r2, [pc, #184]	@ (800893c <TIM_Base_SetConfig+0x140>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d013      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a2d      	ldr	r2, [pc, #180]	@ (8008940 <TIM_Base_SetConfig+0x144>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d00f      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a2c      	ldr	r2, [pc, #176]	@ (8008944 <TIM_Base_SetConfig+0x148>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d00b      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a2b      	ldr	r2, [pc, #172]	@ (8008948 <TIM_Base_SetConfig+0x14c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d007      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a2a      	ldr	r2, [pc, #168]	@ (800894c <TIM_Base_SetConfig+0x150>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d003      	beq.n	80088ae <TIM_Base_SetConfig+0xb2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a29      	ldr	r2, [pc, #164]	@ (8008950 <TIM_Base_SetConfig+0x154>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d108      	bne.n	80088c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	4313      	orrs	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a10      	ldr	r2, [pc, #64]	@ (8008928 <TIM_Base_SetConfig+0x12c>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d003      	beq.n	80088f4 <TIM_Base_SetConfig+0xf8>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a12      	ldr	r2, [pc, #72]	@ (8008938 <TIM_Base_SetConfig+0x13c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d103      	bne.n	80088fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	2b01      	cmp	r3, #1
 800890c:	d105      	bne.n	800891a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	f023 0201 	bic.w	r2, r3, #1
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	611a      	str	r2, [r3, #16]
  }
}
 800891a:	bf00      	nop
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	40010000 	.word	0x40010000
 800892c:	40000400 	.word	0x40000400
 8008930:	40000800 	.word	0x40000800
 8008934:	40000c00 	.word	0x40000c00
 8008938:	40010400 	.word	0x40010400
 800893c:	40014000 	.word	0x40014000
 8008940:	40014400 	.word	0x40014400
 8008944:	40014800 	.word	0x40014800
 8008948:	40001800 	.word	0x40001800
 800894c:	40001c00 	.word	0x40001c00
 8008950:	40002000 	.word	0x40002000

08008954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008954:	b480      	push	{r7}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	f023 0201 	bic.w	r2, r3, #1
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800897e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	011b      	lsls	r3, r3, #4
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	4313      	orrs	r3, r2
 8008988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f023 030a 	bic.w	r3, r3, #10
 8008990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	4313      	orrs	r3, r2
 8008998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	621a      	str	r2, [r3, #32]
}
 80089a6:	bf00      	nop
 80089a8:	371c      	adds	r7, #28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b087      	sub	sp, #28
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	60b9      	str	r1, [r7, #8]
 80089bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	f023 0210 	bic.w	r2, r3, #16
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	031b      	lsls	r3, r3, #12
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	011b      	lsls	r3, r3, #4
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	621a      	str	r2, [r3, #32]
}
 8008a06:	bf00      	nop
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b085      	sub	sp, #20
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a2a:	683a      	ldr	r2, [r7, #0]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	f043 0307 	orr.w	r3, r3, #7
 8008a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	609a      	str	r2, [r3, #8]
}
 8008a3c:	bf00      	nop
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b087      	sub	sp, #28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	021a      	lsls	r2, r3, #8
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	431a      	orrs	r2, r3
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	697a      	ldr	r2, [r7, #20]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	609a      	str	r2, [r3, #8]
}
 8008a7c:	bf00      	nop
 8008a7e:	371c      	adds	r7, #28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d101      	bne.n	8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a9c:	2302      	movs	r3, #2
 8008a9e:	e05a      	b.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a21      	ldr	r2, [pc, #132]	@ (8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d022      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008aec:	d01d      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a1d      	ldr	r2, [pc, #116]	@ (8008b68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d018      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a1b      	ldr	r2, [pc, #108]	@ (8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d013      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a1a      	ldr	r2, [pc, #104]	@ (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d00e      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a18      	ldr	r2, [pc, #96]	@ (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d009      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a17      	ldr	r2, [pc, #92]	@ (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d004      	beq.n	8008b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a15      	ldr	r2, [pc, #84]	@ (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d10c      	bne.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	40010000 	.word	0x40010000
 8008b68:	40000400 	.word	0x40000400
 8008b6c:	40000800 	.word	0x40000800
 8008b70:	40000c00 	.word	0x40000c00
 8008b74:	40010400 	.word	0x40010400
 8008b78:	40014000 	.word	0x40014000
 8008b7c:	40001800 	.word	0x40001800

08008b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	f023 0101 	bic.w	r1, r3, #1
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d102      	bne.n	8008bd8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008bd2:	2340      	movs	r3, #64	@ 0x40
 8008bd4:	617b      	str	r3, [r7, #20]
 8008bd6:	e001      	b.n	8008bdc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008be8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008bee:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008bf4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008bfa:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008c00:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008c06:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8008c0c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8008c12:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8008c18:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8008c36:	4b10      	ldr	r3, [pc, #64]	@ (8008c78 <FSMC_NORSRAM_Init+0xd0>)
 8008c38:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008c40:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8008c48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	43db      	mvns	r3, r3
 8008c58:	ea02 0103 	and.w	r1, r2, r3
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	4319      	orrs	r1, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr
 8008c78:	0008fb7f 	.word	0x0008fb7f

08008c7c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c92:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	011b      	lsls	r3, r3, #4
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	021b      	lsls	r3, r3, #8
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	041b      	lsls	r3, r3, #16
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	051b      	lsls	r3, r3, #20
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	3b02      	subs	r3, #2
 8008cc2:	061b      	lsls	r3, r3, #24
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	3201      	adds	r2, #1
 8008cd0:	4319      	orrs	r1, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
	...

08008ce8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cfc:	d11d      	bne.n	8008d3a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d06:	4b13      	ldr	r3, [pc, #76]	@ (8008d54 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008d08:	4013      	ands	r3, r2
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	6811      	ldr	r1, [r2, #0]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	6852      	ldr	r2, [r2, #4]
 8008d12:	0112      	lsls	r2, r2, #4
 8008d14:	4311      	orrs	r1, r2
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	6892      	ldr	r2, [r2, #8]
 8008d1a:	0212      	lsls	r2, r2, #8
 8008d1c:	4311      	orrs	r1, r2
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	6992      	ldr	r2, [r2, #24]
 8008d22:	4311      	orrs	r1, r2
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	68d2      	ldr	r2, [r2, #12]
 8008d28:	0412      	lsls	r2, r2, #16
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	ea43 0102 	orr.w	r1, r3, r2
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008d38:	e005      	b.n	8008d46 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	cff00000 	.word	0xcff00000

08008d58 <memset>:
 8008d58:	4402      	add	r2, r0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d100      	bne.n	8008d62 <memset+0xa>
 8008d60:	4770      	bx	lr
 8008d62:	f803 1b01 	strb.w	r1, [r3], #1
 8008d66:	e7f9      	b.n	8008d5c <memset+0x4>

08008d68 <__libc_init_array>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	4d0d      	ldr	r5, [pc, #52]	@ (8008da0 <__libc_init_array+0x38>)
 8008d6c:	4c0d      	ldr	r4, [pc, #52]	@ (8008da4 <__libc_init_array+0x3c>)
 8008d6e:	1b64      	subs	r4, r4, r5
 8008d70:	10a4      	asrs	r4, r4, #2
 8008d72:	2600      	movs	r6, #0
 8008d74:	42a6      	cmp	r6, r4
 8008d76:	d109      	bne.n	8008d8c <__libc_init_array+0x24>
 8008d78:	4d0b      	ldr	r5, [pc, #44]	@ (8008da8 <__libc_init_array+0x40>)
 8008d7a:	4c0c      	ldr	r4, [pc, #48]	@ (8008dac <__libc_init_array+0x44>)
 8008d7c:	f001 f89c 	bl	8009eb8 <_init>
 8008d80:	1b64      	subs	r4, r4, r5
 8008d82:	10a4      	asrs	r4, r4, #2
 8008d84:	2600      	movs	r6, #0
 8008d86:	42a6      	cmp	r6, r4
 8008d88:	d105      	bne.n	8008d96 <__libc_init_array+0x2e>
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}
 8008d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d90:	4798      	blx	r3
 8008d92:	3601      	adds	r6, #1
 8008d94:	e7ee      	b.n	8008d74 <__libc_init_array+0xc>
 8008d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d9a:	4798      	blx	r3
 8008d9c:	3601      	adds	r6, #1
 8008d9e:	e7f2      	b.n	8008d86 <__libc_init_array+0x1e>
 8008da0:	0800d0a0 	.word	0x0800d0a0
 8008da4:	0800d0a0 	.word	0x0800d0a0
 8008da8:	0800d0a0 	.word	0x0800d0a0
 8008dac:	0800d0a4 	.word	0x0800d0a4

08008db0 <cos>:
 8008db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008db2:	ec53 2b10 	vmov	r2, r3, d0
 8008db6:	4826      	ldr	r0, [pc, #152]	@ (8008e50 <cos+0xa0>)
 8008db8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008dbc:	4281      	cmp	r1, r0
 8008dbe:	d806      	bhi.n	8008dce <cos+0x1e>
 8008dc0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008e48 <cos+0x98>
 8008dc4:	b005      	add	sp, #20
 8008dc6:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dca:	f000 b899 	b.w	8008f00 <__kernel_cos>
 8008dce:	4821      	ldr	r0, [pc, #132]	@ (8008e54 <cos+0xa4>)
 8008dd0:	4281      	cmp	r1, r0
 8008dd2:	d908      	bls.n	8008de6 <cos+0x36>
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	f7f7 f9fa 	bl	80001d0 <__aeabi_dsub>
 8008ddc:	ec41 0b10 	vmov	d0, r0, r1
 8008de0:	b005      	add	sp, #20
 8008de2:	f85d fb04 	ldr.w	pc, [sp], #4
 8008de6:	4668      	mov	r0, sp
 8008de8:	f000 fa0e 	bl	8009208 <__ieee754_rem_pio2>
 8008dec:	f000 0003 	and.w	r0, r0, #3
 8008df0:	2801      	cmp	r0, #1
 8008df2:	d00b      	beq.n	8008e0c <cos+0x5c>
 8008df4:	2802      	cmp	r0, #2
 8008df6:	d015      	beq.n	8008e24 <cos+0x74>
 8008df8:	b9d8      	cbnz	r0, 8008e32 <cos+0x82>
 8008dfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008dfe:	ed9d 0b00 	vldr	d0, [sp]
 8008e02:	f000 f87d 	bl	8008f00 <__kernel_cos>
 8008e06:	ec51 0b10 	vmov	r0, r1, d0
 8008e0a:	e7e7      	b.n	8008ddc <cos+0x2c>
 8008e0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e10:	ed9d 0b00 	vldr	d0, [sp]
 8008e14:	f000 f93c 	bl	8009090 <__kernel_sin>
 8008e18:	ec53 2b10 	vmov	r2, r3, d0
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008e22:	e7db      	b.n	8008ddc <cos+0x2c>
 8008e24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e28:	ed9d 0b00 	vldr	d0, [sp]
 8008e2c:	f000 f868 	bl	8008f00 <__kernel_cos>
 8008e30:	e7f2      	b.n	8008e18 <cos+0x68>
 8008e32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008e36:	ed9d 0b00 	vldr	d0, [sp]
 8008e3a:	2001      	movs	r0, #1
 8008e3c:	f000 f928 	bl	8009090 <__kernel_sin>
 8008e40:	e7e1      	b.n	8008e06 <cos+0x56>
 8008e42:	bf00      	nop
 8008e44:	f3af 8000 	nop.w
	...
 8008e50:	3fe921fb 	.word	0x3fe921fb
 8008e54:	7fefffff 	.word	0x7fefffff

08008e58 <sin>:
 8008e58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e5a:	ec53 2b10 	vmov	r2, r3, d0
 8008e5e:	4826      	ldr	r0, [pc, #152]	@ (8008ef8 <sin+0xa0>)
 8008e60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008e64:	4281      	cmp	r1, r0
 8008e66:	d807      	bhi.n	8008e78 <sin+0x20>
 8008e68:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008ef0 <sin+0x98>
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	b005      	add	sp, #20
 8008e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e74:	f000 b90c 	b.w	8009090 <__kernel_sin>
 8008e78:	4820      	ldr	r0, [pc, #128]	@ (8008efc <sin+0xa4>)
 8008e7a:	4281      	cmp	r1, r0
 8008e7c:	d908      	bls.n	8008e90 <sin+0x38>
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4619      	mov	r1, r3
 8008e82:	f7f7 f9a5 	bl	80001d0 <__aeabi_dsub>
 8008e86:	ec41 0b10 	vmov	d0, r0, r1
 8008e8a:	b005      	add	sp, #20
 8008e8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e90:	4668      	mov	r0, sp
 8008e92:	f000 f9b9 	bl	8009208 <__ieee754_rem_pio2>
 8008e96:	f000 0003 	and.w	r0, r0, #3
 8008e9a:	2801      	cmp	r0, #1
 8008e9c:	d00c      	beq.n	8008eb8 <sin+0x60>
 8008e9e:	2802      	cmp	r0, #2
 8008ea0:	d011      	beq.n	8008ec6 <sin+0x6e>
 8008ea2:	b9e8      	cbnz	r0, 8008ee0 <sin+0x88>
 8008ea4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ea8:	ed9d 0b00 	vldr	d0, [sp]
 8008eac:	2001      	movs	r0, #1
 8008eae:	f000 f8ef 	bl	8009090 <__kernel_sin>
 8008eb2:	ec51 0b10 	vmov	r0, r1, d0
 8008eb6:	e7e6      	b.n	8008e86 <sin+0x2e>
 8008eb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ebc:	ed9d 0b00 	vldr	d0, [sp]
 8008ec0:	f000 f81e 	bl	8008f00 <__kernel_cos>
 8008ec4:	e7f5      	b.n	8008eb2 <sin+0x5a>
 8008ec6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008eca:	ed9d 0b00 	vldr	d0, [sp]
 8008ece:	2001      	movs	r0, #1
 8008ed0:	f000 f8de 	bl	8009090 <__kernel_sin>
 8008ed4:	ec53 2b10 	vmov	r2, r3, d0
 8008ed8:	4610      	mov	r0, r2
 8008eda:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008ede:	e7d2      	b.n	8008e86 <sin+0x2e>
 8008ee0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ee4:	ed9d 0b00 	vldr	d0, [sp]
 8008ee8:	f000 f80a 	bl	8008f00 <__kernel_cos>
 8008eec:	e7f2      	b.n	8008ed4 <sin+0x7c>
 8008eee:	bf00      	nop
	...
 8008ef8:	3fe921fb 	.word	0x3fe921fb
 8008efc:	7fefffff 	.word	0x7fefffff

08008f00 <__kernel_cos>:
 8008f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	ec57 6b10 	vmov	r6, r7, d0
 8008f08:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008f0c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008f10:	ed8d 1b00 	vstr	d1, [sp]
 8008f14:	d206      	bcs.n	8008f24 <__kernel_cos+0x24>
 8008f16:	4630      	mov	r0, r6
 8008f18:	4639      	mov	r1, r7
 8008f1a:	f7f7 fdab 	bl	8000a74 <__aeabi_d2iz>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f000 8088 	beq.w	8009034 <__kernel_cos+0x134>
 8008f24:	4632      	mov	r2, r6
 8008f26:	463b      	mov	r3, r7
 8008f28:	4630      	mov	r0, r6
 8008f2a:	4639      	mov	r1, r7
 8008f2c:	f7f7 fb08 	bl	8000540 <__aeabi_dmul>
 8008f30:	4b51      	ldr	r3, [pc, #324]	@ (8009078 <__kernel_cos+0x178>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	4604      	mov	r4, r0
 8008f36:	460d      	mov	r5, r1
 8008f38:	f7f7 fb02 	bl	8000540 <__aeabi_dmul>
 8008f3c:	a340      	add	r3, pc, #256	@ (adr r3, 8009040 <__kernel_cos+0x140>)
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	4682      	mov	sl, r0
 8008f44:	468b      	mov	fp, r1
 8008f46:	4620      	mov	r0, r4
 8008f48:	4629      	mov	r1, r5
 8008f4a:	f7f7 faf9 	bl	8000540 <__aeabi_dmul>
 8008f4e:	a33e      	add	r3, pc, #248	@ (adr r3, 8009048 <__kernel_cos+0x148>)
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f7f7 f93e 	bl	80001d4 <__adddf3>
 8008f58:	4622      	mov	r2, r4
 8008f5a:	462b      	mov	r3, r5
 8008f5c:	f7f7 faf0 	bl	8000540 <__aeabi_dmul>
 8008f60:	a33b      	add	r3, pc, #236	@ (adr r3, 8009050 <__kernel_cos+0x150>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f7f7 f933 	bl	80001d0 <__aeabi_dsub>
 8008f6a:	4622      	mov	r2, r4
 8008f6c:	462b      	mov	r3, r5
 8008f6e:	f7f7 fae7 	bl	8000540 <__aeabi_dmul>
 8008f72:	a339      	add	r3, pc, #228	@ (adr r3, 8009058 <__kernel_cos+0x158>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 f92c 	bl	80001d4 <__adddf3>
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	462b      	mov	r3, r5
 8008f80:	f7f7 fade 	bl	8000540 <__aeabi_dmul>
 8008f84:	a336      	add	r3, pc, #216	@ (adr r3, 8009060 <__kernel_cos+0x160>)
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 f921 	bl	80001d0 <__aeabi_dsub>
 8008f8e:	4622      	mov	r2, r4
 8008f90:	462b      	mov	r3, r5
 8008f92:	f7f7 fad5 	bl	8000540 <__aeabi_dmul>
 8008f96:	a334      	add	r3, pc, #208	@ (adr r3, 8009068 <__kernel_cos+0x168>)
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	f7f7 f91a 	bl	80001d4 <__adddf3>
 8008fa0:	4622      	mov	r2, r4
 8008fa2:	462b      	mov	r3, r5
 8008fa4:	f7f7 facc 	bl	8000540 <__aeabi_dmul>
 8008fa8:	4622      	mov	r2, r4
 8008faa:	462b      	mov	r3, r5
 8008fac:	f7f7 fac8 	bl	8000540 <__aeabi_dmul>
 8008fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	460d      	mov	r5, r1
 8008fb8:	4630      	mov	r0, r6
 8008fba:	4639      	mov	r1, r7
 8008fbc:	f7f7 fac0 	bl	8000540 <__aeabi_dmul>
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f7f7 f902 	bl	80001d0 <__aeabi_dsub>
 8008fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800907c <__kernel_cos+0x17c>)
 8008fce:	4598      	cmp	r8, r3
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	460f      	mov	r7, r1
 8008fd4:	d810      	bhi.n	8008ff8 <__kernel_cos+0xf8>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4650      	mov	r0, sl
 8008fdc:	4659      	mov	r1, fp
 8008fde:	f7f7 f8f7 	bl	80001d0 <__aeabi_dsub>
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4926      	ldr	r1, [pc, #152]	@ (8009080 <__kernel_cos+0x180>)
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	2000      	movs	r0, #0
 8008fea:	f7f7 f8f1 	bl	80001d0 <__aeabi_dsub>
 8008fee:	ec41 0b10 	vmov	d0, r0, r1
 8008ff2:	b003      	add	sp, #12
 8008ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff8:	4b22      	ldr	r3, [pc, #136]	@ (8009084 <__kernel_cos+0x184>)
 8008ffa:	4921      	ldr	r1, [pc, #132]	@ (8009080 <__kernel_cos+0x180>)
 8008ffc:	4598      	cmp	r8, r3
 8008ffe:	bf8c      	ite	hi
 8009000:	4d21      	ldrhi	r5, [pc, #132]	@ (8009088 <__kernel_cos+0x188>)
 8009002:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009006:	2400      	movs	r4, #0
 8009008:	4622      	mov	r2, r4
 800900a:	462b      	mov	r3, r5
 800900c:	2000      	movs	r0, #0
 800900e:	f7f7 f8df 	bl	80001d0 <__aeabi_dsub>
 8009012:	4622      	mov	r2, r4
 8009014:	4680      	mov	r8, r0
 8009016:	4689      	mov	r9, r1
 8009018:	462b      	mov	r3, r5
 800901a:	4650      	mov	r0, sl
 800901c:	4659      	mov	r1, fp
 800901e:	f7f7 f8d7 	bl	80001d0 <__aeabi_dsub>
 8009022:	4632      	mov	r2, r6
 8009024:	463b      	mov	r3, r7
 8009026:	f7f7 f8d3 	bl	80001d0 <__aeabi_dsub>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4640      	mov	r0, r8
 8009030:	4649      	mov	r1, r9
 8009032:	e7da      	b.n	8008fea <__kernel_cos+0xea>
 8009034:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009070 <__kernel_cos+0x170>
 8009038:	e7db      	b.n	8008ff2 <__kernel_cos+0xf2>
 800903a:	bf00      	nop
 800903c:	f3af 8000 	nop.w
 8009040:	be8838d4 	.word	0xbe8838d4
 8009044:	bda8fae9 	.word	0xbda8fae9
 8009048:	bdb4b1c4 	.word	0xbdb4b1c4
 800904c:	3e21ee9e 	.word	0x3e21ee9e
 8009050:	809c52ad 	.word	0x809c52ad
 8009054:	3e927e4f 	.word	0x3e927e4f
 8009058:	19cb1590 	.word	0x19cb1590
 800905c:	3efa01a0 	.word	0x3efa01a0
 8009060:	16c15177 	.word	0x16c15177
 8009064:	3f56c16c 	.word	0x3f56c16c
 8009068:	5555554c 	.word	0x5555554c
 800906c:	3fa55555 	.word	0x3fa55555
 8009070:	00000000 	.word	0x00000000
 8009074:	3ff00000 	.word	0x3ff00000
 8009078:	3fe00000 	.word	0x3fe00000
 800907c:	3fd33332 	.word	0x3fd33332
 8009080:	3ff00000 	.word	0x3ff00000
 8009084:	3fe90000 	.word	0x3fe90000
 8009088:	3fd20000 	.word	0x3fd20000
 800908c:	00000000 	.word	0x00000000

08009090 <__kernel_sin>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	ec55 4b10 	vmov	r4, r5, d0
 8009098:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800909c:	b085      	sub	sp, #20
 800909e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80090a2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80090a6:	4680      	mov	r8, r0
 80090a8:	d205      	bcs.n	80090b6 <__kernel_sin+0x26>
 80090aa:	4620      	mov	r0, r4
 80090ac:	4629      	mov	r1, r5
 80090ae:	f7f7 fce1 	bl	8000a74 <__aeabi_d2iz>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d052      	beq.n	800915c <__kernel_sin+0xcc>
 80090b6:	4622      	mov	r2, r4
 80090b8:	462b      	mov	r3, r5
 80090ba:	4620      	mov	r0, r4
 80090bc:	4629      	mov	r1, r5
 80090be:	f7f7 fa3f 	bl	8000540 <__aeabi_dmul>
 80090c2:	4682      	mov	sl, r0
 80090c4:	468b      	mov	fp, r1
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4620      	mov	r0, r4
 80090cc:	4629      	mov	r1, r5
 80090ce:	f7f7 fa37 	bl	8000540 <__aeabi_dmul>
 80090d2:	a342      	add	r3, pc, #264	@ (adr r3, 80091dc <__kernel_sin+0x14c>)
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	e9cd 0100 	strd	r0, r1, [sp]
 80090dc:	4650      	mov	r0, sl
 80090de:	4659      	mov	r1, fp
 80090e0:	f7f7 fa2e 	bl	8000540 <__aeabi_dmul>
 80090e4:	a33f      	add	r3, pc, #252	@ (adr r3, 80091e4 <__kernel_sin+0x154>)
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	f7f7 f871 	bl	80001d0 <__aeabi_dsub>
 80090ee:	4652      	mov	r2, sl
 80090f0:	465b      	mov	r3, fp
 80090f2:	f7f7 fa25 	bl	8000540 <__aeabi_dmul>
 80090f6:	a33d      	add	r3, pc, #244	@ (adr r3, 80091ec <__kernel_sin+0x15c>)
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	f7f7 f86a 	bl	80001d4 <__adddf3>
 8009100:	4652      	mov	r2, sl
 8009102:	465b      	mov	r3, fp
 8009104:	f7f7 fa1c 	bl	8000540 <__aeabi_dmul>
 8009108:	a33a      	add	r3, pc, #232	@ (adr r3, 80091f4 <__kernel_sin+0x164>)
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	f7f7 f85f 	bl	80001d0 <__aeabi_dsub>
 8009112:	4652      	mov	r2, sl
 8009114:	465b      	mov	r3, fp
 8009116:	f7f7 fa13 	bl	8000540 <__aeabi_dmul>
 800911a:	a338      	add	r3, pc, #224	@ (adr r3, 80091fc <__kernel_sin+0x16c>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	f7f7 f858 	bl	80001d4 <__adddf3>
 8009124:	4606      	mov	r6, r0
 8009126:	460f      	mov	r7, r1
 8009128:	f1b8 0f00 	cmp.w	r8, #0
 800912c:	d11b      	bne.n	8009166 <__kernel_sin+0xd6>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4650      	mov	r0, sl
 8009134:	4659      	mov	r1, fp
 8009136:	f7f7 fa03 	bl	8000540 <__aeabi_dmul>
 800913a:	a325      	add	r3, pc, #148	@ (adr r3, 80091d0 <__kernel_sin+0x140>)
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f7f7 f846 	bl	80001d0 <__aeabi_dsub>
 8009144:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009148:	f7f7 f9fa 	bl	8000540 <__aeabi_dmul>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4620      	mov	r0, r4
 8009152:	4629      	mov	r1, r5
 8009154:	f7f7 f83e 	bl	80001d4 <__adddf3>
 8009158:	4604      	mov	r4, r0
 800915a:	460d      	mov	r5, r1
 800915c:	ec45 4b10 	vmov	d0, r4, r5
 8009160:	b005      	add	sp, #20
 8009162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800916a:	4b1b      	ldr	r3, [pc, #108]	@ (80091d8 <__kernel_sin+0x148>)
 800916c:	2200      	movs	r2, #0
 800916e:	f7f7 f9e7 	bl	8000540 <__aeabi_dmul>
 8009172:	4632      	mov	r2, r6
 8009174:	4680      	mov	r8, r0
 8009176:	4689      	mov	r9, r1
 8009178:	463b      	mov	r3, r7
 800917a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800917e:	f7f7 f9df 	bl	8000540 <__aeabi_dmul>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4640      	mov	r0, r8
 8009188:	4649      	mov	r1, r9
 800918a:	f7f7 f821 	bl	80001d0 <__aeabi_dsub>
 800918e:	4652      	mov	r2, sl
 8009190:	465b      	mov	r3, fp
 8009192:	f7f7 f9d5 	bl	8000540 <__aeabi_dmul>
 8009196:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800919a:	f7f7 f819 	bl	80001d0 <__aeabi_dsub>
 800919e:	a30c      	add	r3, pc, #48	@ (adr r3, 80091d0 <__kernel_sin+0x140>)
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	4606      	mov	r6, r0
 80091a6:	460f      	mov	r7, r1
 80091a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091ac:	f7f7 f9c8 	bl	8000540 <__aeabi_dmul>
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	4630      	mov	r0, r6
 80091b6:	4639      	mov	r1, r7
 80091b8:	f7f7 f80c 	bl	80001d4 <__adddf3>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	4620      	mov	r0, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	f7f7 f804 	bl	80001d0 <__aeabi_dsub>
 80091c8:	e7c6      	b.n	8009158 <__kernel_sin+0xc8>
 80091ca:	bf00      	nop
 80091cc:	f3af 8000 	nop.w
 80091d0:	55555549 	.word	0x55555549
 80091d4:	3fc55555 	.word	0x3fc55555
 80091d8:	3fe00000 	.word	0x3fe00000
 80091dc:	5acfd57c 	.word	0x5acfd57c
 80091e0:	3de5d93a 	.word	0x3de5d93a
 80091e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80091e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80091ec:	57b1fe7d 	.word	0x57b1fe7d
 80091f0:	3ec71de3 	.word	0x3ec71de3
 80091f4:	19c161d5 	.word	0x19c161d5
 80091f8:	3f2a01a0 	.word	0x3f2a01a0
 80091fc:	1110f8a6 	.word	0x1110f8a6
 8009200:	3f811111 	.word	0x3f811111
 8009204:	00000000 	.word	0x00000000

08009208 <__ieee754_rem_pio2>:
 8009208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920c:	ec57 6b10 	vmov	r6, r7, d0
 8009210:	4bc5      	ldr	r3, [pc, #788]	@ (8009528 <__ieee754_rem_pio2+0x320>)
 8009212:	b08d      	sub	sp, #52	@ 0x34
 8009214:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009218:	4598      	cmp	r8, r3
 800921a:	4604      	mov	r4, r0
 800921c:	9704      	str	r7, [sp, #16]
 800921e:	d807      	bhi.n	8009230 <__ieee754_rem_pio2+0x28>
 8009220:	2200      	movs	r2, #0
 8009222:	2300      	movs	r3, #0
 8009224:	ed80 0b00 	vstr	d0, [r0]
 8009228:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800922c:	2500      	movs	r5, #0
 800922e:	e028      	b.n	8009282 <__ieee754_rem_pio2+0x7a>
 8009230:	4bbe      	ldr	r3, [pc, #760]	@ (800952c <__ieee754_rem_pio2+0x324>)
 8009232:	4598      	cmp	r8, r3
 8009234:	d878      	bhi.n	8009328 <__ieee754_rem_pio2+0x120>
 8009236:	9b04      	ldr	r3, [sp, #16]
 8009238:	4dbd      	ldr	r5, [pc, #756]	@ (8009530 <__ieee754_rem_pio2+0x328>)
 800923a:	2b00      	cmp	r3, #0
 800923c:	4630      	mov	r0, r6
 800923e:	a3ac      	add	r3, pc, #688	@ (adr r3, 80094f0 <__ieee754_rem_pio2+0x2e8>)
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	4639      	mov	r1, r7
 8009246:	dd38      	ble.n	80092ba <__ieee754_rem_pio2+0xb2>
 8009248:	f7f6 ffc2 	bl	80001d0 <__aeabi_dsub>
 800924c:	45a8      	cmp	r8, r5
 800924e:	4606      	mov	r6, r0
 8009250:	460f      	mov	r7, r1
 8009252:	d01a      	beq.n	800928a <__ieee754_rem_pio2+0x82>
 8009254:	a3a8      	add	r3, pc, #672	@ (adr r3, 80094f8 <__ieee754_rem_pio2+0x2f0>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f6 ffb9 	bl	80001d0 <__aeabi_dsub>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4680      	mov	r8, r0
 8009264:	4689      	mov	r9, r1
 8009266:	4630      	mov	r0, r6
 8009268:	4639      	mov	r1, r7
 800926a:	f7f6 ffb1 	bl	80001d0 <__aeabi_dsub>
 800926e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80094f8 <__ieee754_rem_pio2+0x2f0>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f7f6 ffac 	bl	80001d0 <__aeabi_dsub>
 8009278:	e9c4 8900 	strd	r8, r9, [r4]
 800927c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009280:	2501      	movs	r5, #1
 8009282:	4628      	mov	r0, r5
 8009284:	b00d      	add	sp, #52	@ 0x34
 8009286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928a:	a39d      	add	r3, pc, #628	@ (adr r3, 8009500 <__ieee754_rem_pio2+0x2f8>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f6 ff9e 	bl	80001d0 <__aeabi_dsub>
 8009294:	a39c      	add	r3, pc, #624	@ (adr r3, 8009508 <__ieee754_rem_pio2+0x300>)
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	4606      	mov	r6, r0
 800929c:	460f      	mov	r7, r1
 800929e:	f7f6 ff97 	bl	80001d0 <__aeabi_dsub>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4680      	mov	r8, r0
 80092a8:	4689      	mov	r9, r1
 80092aa:	4630      	mov	r0, r6
 80092ac:	4639      	mov	r1, r7
 80092ae:	f7f6 ff8f 	bl	80001d0 <__aeabi_dsub>
 80092b2:	a395      	add	r3, pc, #596	@ (adr r3, 8009508 <__ieee754_rem_pio2+0x300>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	e7dc      	b.n	8009274 <__ieee754_rem_pio2+0x6c>
 80092ba:	f7f6 ff8b 	bl	80001d4 <__adddf3>
 80092be:	45a8      	cmp	r8, r5
 80092c0:	4606      	mov	r6, r0
 80092c2:	460f      	mov	r7, r1
 80092c4:	d018      	beq.n	80092f8 <__ieee754_rem_pio2+0xf0>
 80092c6:	a38c      	add	r3, pc, #560	@ (adr r3, 80094f8 <__ieee754_rem_pio2+0x2f0>)
 80092c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092cc:	f7f6 ff82 	bl	80001d4 <__adddf3>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4680      	mov	r8, r0
 80092d6:	4689      	mov	r9, r1
 80092d8:	4630      	mov	r0, r6
 80092da:	4639      	mov	r1, r7
 80092dc:	f7f6 ff78 	bl	80001d0 <__aeabi_dsub>
 80092e0:	a385      	add	r3, pc, #532	@ (adr r3, 80094f8 <__ieee754_rem_pio2+0x2f0>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	f7f6 ff75 	bl	80001d4 <__adddf3>
 80092ea:	f04f 35ff 	mov.w	r5, #4294967295
 80092ee:	e9c4 8900 	strd	r8, r9, [r4]
 80092f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80092f6:	e7c4      	b.n	8009282 <__ieee754_rem_pio2+0x7a>
 80092f8:	a381      	add	r3, pc, #516	@ (adr r3, 8009500 <__ieee754_rem_pio2+0x2f8>)
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	f7f6 ff69 	bl	80001d4 <__adddf3>
 8009302:	a381      	add	r3, pc, #516	@ (adr r3, 8009508 <__ieee754_rem_pio2+0x300>)
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	4606      	mov	r6, r0
 800930a:	460f      	mov	r7, r1
 800930c:	f7f6 ff62 	bl	80001d4 <__adddf3>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4680      	mov	r8, r0
 8009316:	4689      	mov	r9, r1
 8009318:	4630      	mov	r0, r6
 800931a:	4639      	mov	r1, r7
 800931c:	f7f6 ff58 	bl	80001d0 <__aeabi_dsub>
 8009320:	a379      	add	r3, pc, #484	@ (adr r3, 8009508 <__ieee754_rem_pio2+0x300>)
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	e7de      	b.n	80092e6 <__ieee754_rem_pio2+0xde>
 8009328:	4b82      	ldr	r3, [pc, #520]	@ (8009534 <__ieee754_rem_pio2+0x32c>)
 800932a:	4598      	cmp	r8, r3
 800932c:	f200 80d1 	bhi.w	80094d2 <__ieee754_rem_pio2+0x2ca>
 8009330:	f000 f966 	bl	8009600 <fabs>
 8009334:	ec57 6b10 	vmov	r6, r7, d0
 8009338:	a375      	add	r3, pc, #468	@ (adr r3, 8009510 <__ieee754_rem_pio2+0x308>)
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	4630      	mov	r0, r6
 8009340:	4639      	mov	r1, r7
 8009342:	f7f7 f8fd 	bl	8000540 <__aeabi_dmul>
 8009346:	4b7c      	ldr	r3, [pc, #496]	@ (8009538 <__ieee754_rem_pio2+0x330>)
 8009348:	2200      	movs	r2, #0
 800934a:	f7f6 ff43 	bl	80001d4 <__adddf3>
 800934e:	f7f7 fb91 	bl	8000a74 <__aeabi_d2iz>
 8009352:	4605      	mov	r5, r0
 8009354:	f7f7 f88a 	bl	800046c <__aeabi_i2d>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009360:	a363      	add	r3, pc, #396	@ (adr r3, 80094f0 <__ieee754_rem_pio2+0x2e8>)
 8009362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009366:	f7f7 f8eb 	bl	8000540 <__aeabi_dmul>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	4630      	mov	r0, r6
 8009370:	4639      	mov	r1, r7
 8009372:	f7f6 ff2d 	bl	80001d0 <__aeabi_dsub>
 8009376:	a360      	add	r3, pc, #384	@ (adr r3, 80094f8 <__ieee754_rem_pio2+0x2f0>)
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	4682      	mov	sl, r0
 800937e:	468b      	mov	fp, r1
 8009380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009384:	f7f7 f8dc 	bl	8000540 <__aeabi_dmul>
 8009388:	2d1f      	cmp	r5, #31
 800938a:	4606      	mov	r6, r0
 800938c:	460f      	mov	r7, r1
 800938e:	dc0c      	bgt.n	80093aa <__ieee754_rem_pio2+0x1a2>
 8009390:	4b6a      	ldr	r3, [pc, #424]	@ (800953c <__ieee754_rem_pio2+0x334>)
 8009392:	1e6a      	subs	r2, r5, #1
 8009394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009398:	4543      	cmp	r3, r8
 800939a:	d006      	beq.n	80093aa <__ieee754_rem_pio2+0x1a2>
 800939c:	4632      	mov	r2, r6
 800939e:	463b      	mov	r3, r7
 80093a0:	4650      	mov	r0, sl
 80093a2:	4659      	mov	r1, fp
 80093a4:	f7f6 ff14 	bl	80001d0 <__aeabi_dsub>
 80093a8:	e00e      	b.n	80093c8 <__ieee754_rem_pio2+0x1c0>
 80093aa:	463b      	mov	r3, r7
 80093ac:	4632      	mov	r2, r6
 80093ae:	4650      	mov	r0, sl
 80093b0:	4659      	mov	r1, fp
 80093b2:	f7f6 ff0d 	bl	80001d0 <__aeabi_dsub>
 80093b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80093ba:	9305      	str	r3, [sp, #20]
 80093bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80093c0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80093c4:	2b10      	cmp	r3, #16
 80093c6:	dc02      	bgt.n	80093ce <__ieee754_rem_pio2+0x1c6>
 80093c8:	e9c4 0100 	strd	r0, r1, [r4]
 80093cc:	e039      	b.n	8009442 <__ieee754_rem_pio2+0x23a>
 80093ce:	a34c      	add	r3, pc, #304	@ (adr r3, 8009500 <__ieee754_rem_pio2+0x2f8>)
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093d8:	f7f7 f8b2 	bl	8000540 <__aeabi_dmul>
 80093dc:	4606      	mov	r6, r0
 80093de:	460f      	mov	r7, r1
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4650      	mov	r0, sl
 80093e6:	4659      	mov	r1, fp
 80093e8:	f7f6 fef2 	bl	80001d0 <__aeabi_dsub>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4680      	mov	r8, r0
 80093f2:	4689      	mov	r9, r1
 80093f4:	4650      	mov	r0, sl
 80093f6:	4659      	mov	r1, fp
 80093f8:	f7f6 feea 	bl	80001d0 <__aeabi_dsub>
 80093fc:	4632      	mov	r2, r6
 80093fe:	463b      	mov	r3, r7
 8009400:	f7f6 fee6 	bl	80001d0 <__aeabi_dsub>
 8009404:	a340      	add	r3, pc, #256	@ (adr r3, 8009508 <__ieee754_rem_pio2+0x300>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	4606      	mov	r6, r0
 800940c:	460f      	mov	r7, r1
 800940e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009412:	f7f7 f895 	bl	8000540 <__aeabi_dmul>
 8009416:	4632      	mov	r2, r6
 8009418:	463b      	mov	r3, r7
 800941a:	f7f6 fed9 	bl	80001d0 <__aeabi_dsub>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4606      	mov	r6, r0
 8009424:	460f      	mov	r7, r1
 8009426:	4640      	mov	r0, r8
 8009428:	4649      	mov	r1, r9
 800942a:	f7f6 fed1 	bl	80001d0 <__aeabi_dsub>
 800942e:	9a05      	ldr	r2, [sp, #20]
 8009430:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	2b31      	cmp	r3, #49	@ 0x31
 8009438:	dc20      	bgt.n	800947c <__ieee754_rem_pio2+0x274>
 800943a:	e9c4 0100 	strd	r0, r1, [r4]
 800943e:	46c2      	mov	sl, r8
 8009440:	46cb      	mov	fp, r9
 8009442:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009446:	4650      	mov	r0, sl
 8009448:	4642      	mov	r2, r8
 800944a:	464b      	mov	r3, r9
 800944c:	4659      	mov	r1, fp
 800944e:	f7f6 febf 	bl	80001d0 <__aeabi_dsub>
 8009452:	463b      	mov	r3, r7
 8009454:	4632      	mov	r2, r6
 8009456:	f7f6 febb 	bl	80001d0 <__aeabi_dsub>
 800945a:	9b04      	ldr	r3, [sp, #16]
 800945c:	2b00      	cmp	r3, #0
 800945e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009462:	f6bf af0e 	bge.w	8009282 <__ieee754_rem_pio2+0x7a>
 8009466:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800946a:	6063      	str	r3, [r4, #4]
 800946c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009470:	f8c4 8000 	str.w	r8, [r4]
 8009474:	60a0      	str	r0, [r4, #8]
 8009476:	60e3      	str	r3, [r4, #12]
 8009478:	426d      	negs	r5, r5
 800947a:	e702      	b.n	8009282 <__ieee754_rem_pio2+0x7a>
 800947c:	a326      	add	r3, pc, #152	@ (adr r3, 8009518 <__ieee754_rem_pio2+0x310>)
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009486:	f7f7 f85b 	bl	8000540 <__aeabi_dmul>
 800948a:	4606      	mov	r6, r0
 800948c:	460f      	mov	r7, r1
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4640      	mov	r0, r8
 8009494:	4649      	mov	r1, r9
 8009496:	f7f6 fe9b 	bl	80001d0 <__aeabi_dsub>
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	4682      	mov	sl, r0
 80094a0:	468b      	mov	fp, r1
 80094a2:	4640      	mov	r0, r8
 80094a4:	4649      	mov	r1, r9
 80094a6:	f7f6 fe93 	bl	80001d0 <__aeabi_dsub>
 80094aa:	4632      	mov	r2, r6
 80094ac:	463b      	mov	r3, r7
 80094ae:	f7f6 fe8f 	bl	80001d0 <__aeabi_dsub>
 80094b2:	a31b      	add	r3, pc, #108	@ (adr r3, 8009520 <__ieee754_rem_pio2+0x318>)
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	4606      	mov	r6, r0
 80094ba:	460f      	mov	r7, r1
 80094bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094c0:	f7f7 f83e 	bl	8000540 <__aeabi_dmul>
 80094c4:	4632      	mov	r2, r6
 80094c6:	463b      	mov	r3, r7
 80094c8:	f7f6 fe82 	bl	80001d0 <__aeabi_dsub>
 80094cc:	4606      	mov	r6, r0
 80094ce:	460f      	mov	r7, r1
 80094d0:	e764      	b.n	800939c <__ieee754_rem_pio2+0x194>
 80094d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009540 <__ieee754_rem_pio2+0x338>)
 80094d4:	4598      	cmp	r8, r3
 80094d6:	d935      	bls.n	8009544 <__ieee754_rem_pio2+0x33c>
 80094d8:	4632      	mov	r2, r6
 80094da:	463b      	mov	r3, r7
 80094dc:	4630      	mov	r0, r6
 80094de:	4639      	mov	r1, r7
 80094e0:	f7f6 fe76 	bl	80001d0 <__aeabi_dsub>
 80094e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80094e8:	e9c4 0100 	strd	r0, r1, [r4]
 80094ec:	e69e      	b.n	800922c <__ieee754_rem_pio2+0x24>
 80094ee:	bf00      	nop
 80094f0:	54400000 	.word	0x54400000
 80094f4:	3ff921fb 	.word	0x3ff921fb
 80094f8:	1a626331 	.word	0x1a626331
 80094fc:	3dd0b461 	.word	0x3dd0b461
 8009500:	1a600000 	.word	0x1a600000
 8009504:	3dd0b461 	.word	0x3dd0b461
 8009508:	2e037073 	.word	0x2e037073
 800950c:	3ba3198a 	.word	0x3ba3198a
 8009510:	6dc9c883 	.word	0x6dc9c883
 8009514:	3fe45f30 	.word	0x3fe45f30
 8009518:	2e000000 	.word	0x2e000000
 800951c:	3ba3198a 	.word	0x3ba3198a
 8009520:	252049c1 	.word	0x252049c1
 8009524:	397b839a 	.word	0x397b839a
 8009528:	3fe921fb 	.word	0x3fe921fb
 800952c:	4002d97b 	.word	0x4002d97b
 8009530:	3ff921fb 	.word	0x3ff921fb
 8009534:	413921fb 	.word	0x413921fb
 8009538:	3fe00000 	.word	0x3fe00000
 800953c:	0800cec0 	.word	0x0800cec0
 8009540:	7fefffff 	.word	0x7fefffff
 8009544:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009548:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800954c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009550:	4630      	mov	r0, r6
 8009552:	460f      	mov	r7, r1
 8009554:	f7f7 fa8e 	bl	8000a74 <__aeabi_d2iz>
 8009558:	f7f6 ff88 	bl	800046c <__aeabi_i2d>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4630      	mov	r0, r6
 8009562:	4639      	mov	r1, r7
 8009564:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009568:	f7f6 fe32 	bl	80001d0 <__aeabi_dsub>
 800956c:	4b22      	ldr	r3, [pc, #136]	@ (80095f8 <__ieee754_rem_pio2+0x3f0>)
 800956e:	2200      	movs	r2, #0
 8009570:	f7f6 ffe6 	bl	8000540 <__aeabi_dmul>
 8009574:	460f      	mov	r7, r1
 8009576:	4606      	mov	r6, r0
 8009578:	f7f7 fa7c 	bl	8000a74 <__aeabi_d2iz>
 800957c:	f7f6 ff76 	bl	800046c <__aeabi_i2d>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4630      	mov	r0, r6
 8009586:	4639      	mov	r1, r7
 8009588:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800958c:	f7f6 fe20 	bl	80001d0 <__aeabi_dsub>
 8009590:	4b19      	ldr	r3, [pc, #100]	@ (80095f8 <__ieee754_rem_pio2+0x3f0>)
 8009592:	2200      	movs	r2, #0
 8009594:	f7f6 ffd4 	bl	8000540 <__aeabi_dmul>
 8009598:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800959c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80095a0:	f04f 0803 	mov.w	r8, #3
 80095a4:	2600      	movs	r6, #0
 80095a6:	2700      	movs	r7, #0
 80095a8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80095ac:	4632      	mov	r2, r6
 80095ae:	463b      	mov	r3, r7
 80095b0:	46c2      	mov	sl, r8
 80095b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80095b6:	f7f7 fa2b 	bl	8000a10 <__aeabi_dcmpeq>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d1f4      	bne.n	80095a8 <__ieee754_rem_pio2+0x3a0>
 80095be:	4b0f      	ldr	r3, [pc, #60]	@ (80095fc <__ieee754_rem_pio2+0x3f4>)
 80095c0:	9301      	str	r3, [sp, #4]
 80095c2:	2302      	movs	r3, #2
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	462a      	mov	r2, r5
 80095c8:	4653      	mov	r3, sl
 80095ca:	4621      	mov	r1, r4
 80095cc:	a806      	add	r0, sp, #24
 80095ce:	f000 f81f 	bl	8009610 <__kernel_rem_pio2>
 80095d2:	9b04      	ldr	r3, [sp, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	4605      	mov	r5, r0
 80095d8:	f6bf ae53 	bge.w	8009282 <__ieee754_rem_pio2+0x7a>
 80095dc:	e9d4 2100 	ldrd	r2, r1, [r4]
 80095e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80095e4:	e9c4 2300 	strd	r2, r3, [r4]
 80095e8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80095ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80095f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80095f4:	e740      	b.n	8009478 <__ieee754_rem_pio2+0x270>
 80095f6:	bf00      	nop
 80095f8:	41700000 	.word	0x41700000
 80095fc:	0800cf40 	.word	0x0800cf40

08009600 <fabs>:
 8009600:	ec51 0b10 	vmov	r0, r1, d0
 8009604:	4602      	mov	r2, r0
 8009606:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800960a:	ec43 2b10 	vmov	d0, r2, r3
 800960e:	4770      	bx	lr

08009610 <__kernel_rem_pio2>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	ed2d 8b02 	vpush	{d8}
 8009618:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800961c:	f112 0f14 	cmn.w	r2, #20
 8009620:	9306      	str	r3, [sp, #24]
 8009622:	9104      	str	r1, [sp, #16]
 8009624:	4bbe      	ldr	r3, [pc, #760]	@ (8009920 <__kernel_rem_pio2+0x310>)
 8009626:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009628:	9008      	str	r0, [sp, #32]
 800962a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	9b06      	ldr	r3, [sp, #24]
 8009632:	f103 33ff 	add.w	r3, r3, #4294967295
 8009636:	bfa8      	it	ge
 8009638:	1ed4      	subge	r4, r2, #3
 800963a:	9305      	str	r3, [sp, #20]
 800963c:	bfb2      	itee	lt
 800963e:	2400      	movlt	r4, #0
 8009640:	2318      	movge	r3, #24
 8009642:	fb94 f4f3 	sdivge	r4, r4, r3
 8009646:	f06f 0317 	mvn.w	r3, #23
 800964a:	fb04 3303 	mla	r3, r4, r3, r3
 800964e:	eb03 0b02 	add.w	fp, r3, r2
 8009652:	9b00      	ldr	r3, [sp, #0]
 8009654:	9a05      	ldr	r2, [sp, #20]
 8009656:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009910 <__kernel_rem_pio2+0x300>
 800965a:	eb03 0802 	add.w	r8, r3, r2
 800965e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009660:	1aa7      	subs	r7, r4, r2
 8009662:	ae20      	add	r6, sp, #128	@ 0x80
 8009664:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009668:	2500      	movs	r5, #0
 800966a:	4545      	cmp	r5, r8
 800966c:	dd13      	ble.n	8009696 <__kernel_rem_pio2+0x86>
 800966e:	9b06      	ldr	r3, [sp, #24]
 8009670:	aa20      	add	r2, sp, #128	@ 0x80
 8009672:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009676:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800967a:	f04f 0800 	mov.w	r8, #0
 800967e:	9b00      	ldr	r3, [sp, #0]
 8009680:	4598      	cmp	r8, r3
 8009682:	dc31      	bgt.n	80096e8 <__kernel_rem_pio2+0xd8>
 8009684:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009910 <__kernel_rem_pio2+0x300>
 8009688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800968c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009690:	462f      	mov	r7, r5
 8009692:	2600      	movs	r6, #0
 8009694:	e01b      	b.n	80096ce <__kernel_rem_pio2+0xbe>
 8009696:	42ef      	cmn	r7, r5
 8009698:	d407      	bmi.n	80096aa <__kernel_rem_pio2+0x9a>
 800969a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800969e:	f7f6 fee5 	bl	800046c <__aeabi_i2d>
 80096a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80096a6:	3501      	adds	r5, #1
 80096a8:	e7df      	b.n	800966a <__kernel_rem_pio2+0x5a>
 80096aa:	ec51 0b18 	vmov	r0, r1, d8
 80096ae:	e7f8      	b.n	80096a2 <__kernel_rem_pio2+0x92>
 80096b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80096b8:	f7f6 ff42 	bl	8000540 <__aeabi_dmul>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096c4:	f7f6 fd86 	bl	80001d4 <__adddf3>
 80096c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096cc:	3601      	adds	r6, #1
 80096ce:	9b05      	ldr	r3, [sp, #20]
 80096d0:	429e      	cmp	r6, r3
 80096d2:	f1a7 0708 	sub.w	r7, r7, #8
 80096d6:	ddeb      	ble.n	80096b0 <__kernel_rem_pio2+0xa0>
 80096d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096dc:	f108 0801 	add.w	r8, r8, #1
 80096e0:	ecaa 7b02 	vstmia	sl!, {d7}
 80096e4:	3508      	adds	r5, #8
 80096e6:	e7ca      	b.n	800967e <__kernel_rem_pio2+0x6e>
 80096e8:	9b00      	ldr	r3, [sp, #0]
 80096ea:	f8dd 8000 	ldr.w	r8, [sp]
 80096ee:	aa0c      	add	r2, sp, #48	@ 0x30
 80096f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80096f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80096f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80096fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80096fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009702:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009704:	ab98      	add	r3, sp, #608	@ 0x260
 8009706:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800970a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800970e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009712:	ac0c      	add	r4, sp, #48	@ 0x30
 8009714:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009716:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800971a:	46a1      	mov	r9, r4
 800971c:	46c2      	mov	sl, r8
 800971e:	f1ba 0f00 	cmp.w	sl, #0
 8009722:	f1a5 0508 	sub.w	r5, r5, #8
 8009726:	dc77      	bgt.n	8009818 <__kernel_rem_pio2+0x208>
 8009728:	4658      	mov	r0, fp
 800972a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800972e:	f000 fac7 	bl	8009cc0 <scalbn>
 8009732:	ec57 6b10 	vmov	r6, r7, d0
 8009736:	2200      	movs	r2, #0
 8009738:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800973c:	4630      	mov	r0, r6
 800973e:	4639      	mov	r1, r7
 8009740:	f7f6 fefe 	bl	8000540 <__aeabi_dmul>
 8009744:	ec41 0b10 	vmov	d0, r0, r1
 8009748:	f000 fb3a 	bl	8009dc0 <floor>
 800974c:	4b75      	ldr	r3, [pc, #468]	@ (8009924 <__kernel_rem_pio2+0x314>)
 800974e:	ec51 0b10 	vmov	r0, r1, d0
 8009752:	2200      	movs	r2, #0
 8009754:	f7f6 fef4 	bl	8000540 <__aeabi_dmul>
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	4630      	mov	r0, r6
 800975e:	4639      	mov	r1, r7
 8009760:	f7f6 fd36 	bl	80001d0 <__aeabi_dsub>
 8009764:	460f      	mov	r7, r1
 8009766:	4606      	mov	r6, r0
 8009768:	f7f7 f984 	bl	8000a74 <__aeabi_d2iz>
 800976c:	9002      	str	r0, [sp, #8]
 800976e:	f7f6 fe7d 	bl	800046c <__aeabi_i2d>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4630      	mov	r0, r6
 8009778:	4639      	mov	r1, r7
 800977a:	f7f6 fd29 	bl	80001d0 <__aeabi_dsub>
 800977e:	f1bb 0f00 	cmp.w	fp, #0
 8009782:	4606      	mov	r6, r0
 8009784:	460f      	mov	r7, r1
 8009786:	dd6c      	ble.n	8009862 <__kernel_rem_pio2+0x252>
 8009788:	f108 31ff 	add.w	r1, r8, #4294967295
 800978c:	ab0c      	add	r3, sp, #48	@ 0x30
 800978e:	9d02      	ldr	r5, [sp, #8]
 8009790:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009794:	f1cb 0018 	rsb	r0, fp, #24
 8009798:	fa43 f200 	asr.w	r2, r3, r0
 800979c:	4415      	add	r5, r2
 800979e:	4082      	lsls	r2, r0
 80097a0:	1a9b      	subs	r3, r3, r2
 80097a2:	aa0c      	add	r2, sp, #48	@ 0x30
 80097a4:	9502      	str	r5, [sp, #8]
 80097a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80097aa:	f1cb 0217 	rsb	r2, fp, #23
 80097ae:	fa43 f902 	asr.w	r9, r3, r2
 80097b2:	f1b9 0f00 	cmp.w	r9, #0
 80097b6:	dd64      	ble.n	8009882 <__kernel_rem_pio2+0x272>
 80097b8:	9b02      	ldr	r3, [sp, #8]
 80097ba:	2200      	movs	r2, #0
 80097bc:	3301      	adds	r3, #1
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	4615      	mov	r5, r2
 80097c2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80097c6:	4590      	cmp	r8, r2
 80097c8:	f300 80b8 	bgt.w	800993c <__kernel_rem_pio2+0x32c>
 80097cc:	f1bb 0f00 	cmp.w	fp, #0
 80097d0:	dd07      	ble.n	80097e2 <__kernel_rem_pio2+0x1d2>
 80097d2:	f1bb 0f01 	cmp.w	fp, #1
 80097d6:	f000 80bf 	beq.w	8009958 <__kernel_rem_pio2+0x348>
 80097da:	f1bb 0f02 	cmp.w	fp, #2
 80097de:	f000 80c6 	beq.w	800996e <__kernel_rem_pio2+0x35e>
 80097e2:	f1b9 0f02 	cmp.w	r9, #2
 80097e6:	d14c      	bne.n	8009882 <__kernel_rem_pio2+0x272>
 80097e8:	4632      	mov	r2, r6
 80097ea:	463b      	mov	r3, r7
 80097ec:	494e      	ldr	r1, [pc, #312]	@ (8009928 <__kernel_rem_pio2+0x318>)
 80097ee:	2000      	movs	r0, #0
 80097f0:	f7f6 fcee 	bl	80001d0 <__aeabi_dsub>
 80097f4:	4606      	mov	r6, r0
 80097f6:	460f      	mov	r7, r1
 80097f8:	2d00      	cmp	r5, #0
 80097fa:	d042      	beq.n	8009882 <__kernel_rem_pio2+0x272>
 80097fc:	4658      	mov	r0, fp
 80097fe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009918 <__kernel_rem_pio2+0x308>
 8009802:	f000 fa5d 	bl	8009cc0 <scalbn>
 8009806:	4630      	mov	r0, r6
 8009808:	4639      	mov	r1, r7
 800980a:	ec53 2b10 	vmov	r2, r3, d0
 800980e:	f7f6 fcdf 	bl	80001d0 <__aeabi_dsub>
 8009812:	4606      	mov	r6, r0
 8009814:	460f      	mov	r7, r1
 8009816:	e034      	b.n	8009882 <__kernel_rem_pio2+0x272>
 8009818:	4b44      	ldr	r3, [pc, #272]	@ (800992c <__kernel_rem_pio2+0x31c>)
 800981a:	2200      	movs	r2, #0
 800981c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009820:	f7f6 fe8e 	bl	8000540 <__aeabi_dmul>
 8009824:	f7f7 f926 	bl	8000a74 <__aeabi_d2iz>
 8009828:	f7f6 fe20 	bl	800046c <__aeabi_i2d>
 800982c:	4b40      	ldr	r3, [pc, #256]	@ (8009930 <__kernel_rem_pio2+0x320>)
 800982e:	2200      	movs	r2, #0
 8009830:	4606      	mov	r6, r0
 8009832:	460f      	mov	r7, r1
 8009834:	f7f6 fe84 	bl	8000540 <__aeabi_dmul>
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009840:	f7f6 fcc6 	bl	80001d0 <__aeabi_dsub>
 8009844:	f7f7 f916 	bl	8000a74 <__aeabi_d2iz>
 8009848:	e9d5 2300 	ldrd	r2, r3, [r5]
 800984c:	f849 0b04 	str.w	r0, [r9], #4
 8009850:	4639      	mov	r1, r7
 8009852:	4630      	mov	r0, r6
 8009854:	f7f6 fcbe 	bl	80001d4 <__adddf3>
 8009858:	f10a 3aff 	add.w	sl, sl, #4294967295
 800985c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009860:	e75d      	b.n	800971e <__kernel_rem_pio2+0x10e>
 8009862:	d107      	bne.n	8009874 <__kernel_rem_pio2+0x264>
 8009864:	f108 33ff 	add.w	r3, r8, #4294967295
 8009868:	aa0c      	add	r2, sp, #48	@ 0x30
 800986a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800986e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009872:	e79e      	b.n	80097b2 <__kernel_rem_pio2+0x1a2>
 8009874:	4b2f      	ldr	r3, [pc, #188]	@ (8009934 <__kernel_rem_pio2+0x324>)
 8009876:	2200      	movs	r2, #0
 8009878:	f7f7 f8e8 	bl	8000a4c <__aeabi_dcmpge>
 800987c:	2800      	cmp	r0, #0
 800987e:	d143      	bne.n	8009908 <__kernel_rem_pio2+0x2f8>
 8009880:	4681      	mov	r9, r0
 8009882:	2200      	movs	r2, #0
 8009884:	2300      	movs	r3, #0
 8009886:	4630      	mov	r0, r6
 8009888:	4639      	mov	r1, r7
 800988a:	f7f7 f8c1 	bl	8000a10 <__aeabi_dcmpeq>
 800988e:	2800      	cmp	r0, #0
 8009890:	f000 80bf 	beq.w	8009a12 <__kernel_rem_pio2+0x402>
 8009894:	f108 33ff 	add.w	r3, r8, #4294967295
 8009898:	2200      	movs	r2, #0
 800989a:	9900      	ldr	r1, [sp, #0]
 800989c:	428b      	cmp	r3, r1
 800989e:	da6e      	bge.n	800997e <__kernel_rem_pio2+0x36e>
 80098a0:	2a00      	cmp	r2, #0
 80098a2:	f000 8089 	beq.w	80099b8 <__kernel_rem_pio2+0x3a8>
 80098a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80098aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80098ac:	f1ab 0b18 	sub.w	fp, fp, #24
 80098b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0f6      	beq.n	80098a6 <__kernel_rem_pio2+0x296>
 80098b8:	4658      	mov	r0, fp
 80098ba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009918 <__kernel_rem_pio2+0x308>
 80098be:	f000 f9ff 	bl	8009cc0 <scalbn>
 80098c2:	f108 0301 	add.w	r3, r8, #1
 80098c6:	00da      	lsls	r2, r3, #3
 80098c8:	9205      	str	r2, [sp, #20]
 80098ca:	ec55 4b10 	vmov	r4, r5, d0
 80098ce:	aa70      	add	r2, sp, #448	@ 0x1c0
 80098d0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800992c <__kernel_rem_pio2+0x31c>
 80098d4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80098d8:	4646      	mov	r6, r8
 80098da:	f04f 0a00 	mov.w	sl, #0
 80098de:	2e00      	cmp	r6, #0
 80098e0:	f280 80cf 	bge.w	8009a82 <__kernel_rem_pio2+0x472>
 80098e4:	4644      	mov	r4, r8
 80098e6:	2c00      	cmp	r4, #0
 80098e8:	f2c0 80fd 	blt.w	8009ae6 <__kernel_rem_pio2+0x4d6>
 80098ec:	4b12      	ldr	r3, [pc, #72]	@ (8009938 <__kernel_rem_pio2+0x328>)
 80098ee:	461f      	mov	r7, r3
 80098f0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80098f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098f6:	9306      	str	r3, [sp, #24]
 80098f8:	f04f 0a00 	mov.w	sl, #0
 80098fc:	f04f 0b00 	mov.w	fp, #0
 8009900:	2600      	movs	r6, #0
 8009902:	eba8 0504 	sub.w	r5, r8, r4
 8009906:	e0e2      	b.n	8009ace <__kernel_rem_pio2+0x4be>
 8009908:	f04f 0902 	mov.w	r9, #2
 800990c:	e754      	b.n	80097b8 <__kernel_rem_pio2+0x1a8>
 800990e:	bf00      	nop
	...
 800991c:	3ff00000 	.word	0x3ff00000
 8009920:	0800d088 	.word	0x0800d088
 8009924:	40200000 	.word	0x40200000
 8009928:	3ff00000 	.word	0x3ff00000
 800992c:	3e700000 	.word	0x3e700000
 8009930:	41700000 	.word	0x41700000
 8009934:	3fe00000 	.word	0x3fe00000
 8009938:	0800d048 	.word	0x0800d048
 800993c:	f854 3b04 	ldr.w	r3, [r4], #4
 8009940:	b945      	cbnz	r5, 8009954 <__kernel_rem_pio2+0x344>
 8009942:	b123      	cbz	r3, 800994e <__kernel_rem_pio2+0x33e>
 8009944:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009948:	f844 3c04 	str.w	r3, [r4, #-4]
 800994c:	2301      	movs	r3, #1
 800994e:	3201      	adds	r2, #1
 8009950:	461d      	mov	r5, r3
 8009952:	e738      	b.n	80097c6 <__kernel_rem_pio2+0x1b6>
 8009954:	1acb      	subs	r3, r1, r3
 8009956:	e7f7      	b.n	8009948 <__kernel_rem_pio2+0x338>
 8009958:	f108 32ff 	add.w	r2, r8, #4294967295
 800995c:	ab0c      	add	r3, sp, #48	@ 0x30
 800995e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009962:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009966:	a90c      	add	r1, sp, #48	@ 0x30
 8009968:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800996c:	e739      	b.n	80097e2 <__kernel_rem_pio2+0x1d2>
 800996e:	f108 32ff 	add.w	r2, r8, #4294967295
 8009972:	ab0c      	add	r3, sp, #48	@ 0x30
 8009974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009978:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800997c:	e7f3      	b.n	8009966 <__kernel_rem_pio2+0x356>
 800997e:	a90c      	add	r1, sp, #48	@ 0x30
 8009980:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009984:	3b01      	subs	r3, #1
 8009986:	430a      	orrs	r2, r1
 8009988:	e787      	b.n	800989a <__kernel_rem_pio2+0x28a>
 800998a:	3401      	adds	r4, #1
 800998c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009990:	2a00      	cmp	r2, #0
 8009992:	d0fa      	beq.n	800998a <__kernel_rem_pio2+0x37a>
 8009994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009996:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800999a:	eb0d 0503 	add.w	r5, sp, r3
 800999e:	9b06      	ldr	r3, [sp, #24]
 80099a0:	aa20      	add	r2, sp, #128	@ 0x80
 80099a2:	4443      	add	r3, r8
 80099a4:	f108 0701 	add.w	r7, r8, #1
 80099a8:	3d98      	subs	r5, #152	@ 0x98
 80099aa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80099ae:	4444      	add	r4, r8
 80099b0:	42bc      	cmp	r4, r7
 80099b2:	da04      	bge.n	80099be <__kernel_rem_pio2+0x3ae>
 80099b4:	46a0      	mov	r8, r4
 80099b6:	e6a2      	b.n	80096fe <__kernel_rem_pio2+0xee>
 80099b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ba:	2401      	movs	r4, #1
 80099bc:	e7e6      	b.n	800998c <__kernel_rem_pio2+0x37c>
 80099be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80099c4:	f7f6 fd52 	bl	800046c <__aeabi_i2d>
 80099c8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8009c90 <__kernel_rem_pio2+0x680>
 80099cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80099d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80099d8:	46b2      	mov	sl, r6
 80099da:	f04f 0800 	mov.w	r8, #0
 80099de:	9b05      	ldr	r3, [sp, #20]
 80099e0:	4598      	cmp	r8, r3
 80099e2:	dd05      	ble.n	80099f0 <__kernel_rem_pio2+0x3e0>
 80099e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099e8:	3701      	adds	r7, #1
 80099ea:	eca5 7b02 	vstmia	r5!, {d7}
 80099ee:	e7df      	b.n	80099b0 <__kernel_rem_pio2+0x3a0>
 80099f0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80099f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80099f8:	f7f6 fda2 	bl	8000540 <__aeabi_dmul>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a04:	f7f6 fbe6 	bl	80001d4 <__adddf3>
 8009a08:	f108 0801 	add.w	r8, r8, #1
 8009a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a10:	e7e5      	b.n	80099de <__kernel_rem_pio2+0x3ce>
 8009a12:	f1cb 0000 	rsb	r0, fp, #0
 8009a16:	ec47 6b10 	vmov	d0, r6, r7
 8009a1a:	f000 f951 	bl	8009cc0 <scalbn>
 8009a1e:	ec55 4b10 	vmov	r4, r5, d0
 8009a22:	4b9d      	ldr	r3, [pc, #628]	@ (8009c98 <__kernel_rem_pio2+0x688>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	4620      	mov	r0, r4
 8009a28:	4629      	mov	r1, r5
 8009a2a:	f7f7 f80f 	bl	8000a4c <__aeabi_dcmpge>
 8009a2e:	b300      	cbz	r0, 8009a72 <__kernel_rem_pio2+0x462>
 8009a30:	4b9a      	ldr	r3, [pc, #616]	@ (8009c9c <__kernel_rem_pio2+0x68c>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	4620      	mov	r0, r4
 8009a36:	4629      	mov	r1, r5
 8009a38:	f7f6 fd82 	bl	8000540 <__aeabi_dmul>
 8009a3c:	f7f7 f81a 	bl	8000a74 <__aeabi_d2iz>
 8009a40:	4606      	mov	r6, r0
 8009a42:	f7f6 fd13 	bl	800046c <__aeabi_i2d>
 8009a46:	4b94      	ldr	r3, [pc, #592]	@ (8009c98 <__kernel_rem_pio2+0x688>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f7f6 fd79 	bl	8000540 <__aeabi_dmul>
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4602      	mov	r2, r0
 8009a52:	4629      	mov	r1, r5
 8009a54:	4620      	mov	r0, r4
 8009a56:	f7f6 fbbb 	bl	80001d0 <__aeabi_dsub>
 8009a5a:	f7f7 f80b 	bl	8000a74 <__aeabi_d2iz>
 8009a5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8009a60:	f10b 0b18 	add.w	fp, fp, #24
 8009a64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009a68:	f108 0801 	add.w	r8, r8, #1
 8009a6c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009a70:	e722      	b.n	80098b8 <__kernel_rem_pio2+0x2a8>
 8009a72:	4620      	mov	r0, r4
 8009a74:	4629      	mov	r1, r5
 8009a76:	f7f6 fffd 	bl	8000a74 <__aeabi_d2iz>
 8009a7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009a7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009a80:	e71a      	b.n	80098b8 <__kernel_rem_pio2+0x2a8>
 8009a82:	ab0c      	add	r3, sp, #48	@ 0x30
 8009a84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009a88:	f7f6 fcf0 	bl	800046c <__aeabi_i2d>
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	462b      	mov	r3, r5
 8009a90:	f7f6 fd56 	bl	8000540 <__aeabi_dmul>
 8009a94:	4652      	mov	r2, sl
 8009a96:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009a9a:	465b      	mov	r3, fp
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	f7f6 fd4e 	bl	8000540 <__aeabi_dmul>
 8009aa4:	3e01      	subs	r6, #1
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	e718      	b.n	80098de <__kernel_rem_pio2+0x2ce>
 8009aac:	9906      	ldr	r1, [sp, #24]
 8009aae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009ab2:	9106      	str	r1, [sp, #24]
 8009ab4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009ab8:	f7f6 fd42 	bl	8000540 <__aeabi_dmul>
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	4650      	mov	r0, sl
 8009ac2:	4659      	mov	r1, fp
 8009ac4:	f7f6 fb86 	bl	80001d4 <__adddf3>
 8009ac8:	3601      	adds	r6, #1
 8009aca:	4682      	mov	sl, r0
 8009acc:	468b      	mov	fp, r1
 8009ace:	9b00      	ldr	r3, [sp, #0]
 8009ad0:	429e      	cmp	r6, r3
 8009ad2:	dc01      	bgt.n	8009ad8 <__kernel_rem_pio2+0x4c8>
 8009ad4:	42b5      	cmp	r5, r6
 8009ad6:	dae9      	bge.n	8009aac <__kernel_rem_pio2+0x49c>
 8009ad8:	ab48      	add	r3, sp, #288	@ 0x120
 8009ada:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009ade:	e9c5 ab00 	strd	sl, fp, [r5]
 8009ae2:	3c01      	subs	r4, #1
 8009ae4:	e6ff      	b.n	80098e6 <__kernel_rem_pio2+0x2d6>
 8009ae6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	dc0b      	bgt.n	8009b04 <__kernel_rem_pio2+0x4f4>
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	dc39      	bgt.n	8009b64 <__kernel_rem_pio2+0x554>
 8009af0:	d05d      	beq.n	8009bae <__kernel_rem_pio2+0x59e>
 8009af2:	9b02      	ldr	r3, [sp, #8]
 8009af4:	f003 0007 	and.w	r0, r3, #7
 8009af8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009afc:	ecbd 8b02 	vpop	{d8}
 8009b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b04:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	d1f3      	bne.n	8009af2 <__kernel_rem_pio2+0x4e2>
 8009b0a:	9b05      	ldr	r3, [sp, #20]
 8009b0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009b10:	eb0d 0403 	add.w	r4, sp, r3
 8009b14:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009b18:	4625      	mov	r5, r4
 8009b1a:	46c2      	mov	sl, r8
 8009b1c:	f1ba 0f00 	cmp.w	sl, #0
 8009b20:	f1a5 0508 	sub.w	r5, r5, #8
 8009b24:	dc6b      	bgt.n	8009bfe <__kernel_rem_pio2+0x5ee>
 8009b26:	4645      	mov	r5, r8
 8009b28:	2d01      	cmp	r5, #1
 8009b2a:	f1a4 0408 	sub.w	r4, r4, #8
 8009b2e:	f300 8087 	bgt.w	8009c40 <__kernel_rem_pio2+0x630>
 8009b32:	9c05      	ldr	r4, [sp, #20]
 8009b34:	ab48      	add	r3, sp, #288	@ 0x120
 8009b36:	441c      	add	r4, r3
 8009b38:	2000      	movs	r0, #0
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	f1b8 0f01 	cmp.w	r8, #1
 8009b40:	f300 809c 	bgt.w	8009c7c <__kernel_rem_pio2+0x66c>
 8009b44:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009b48:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009b4c:	f1b9 0f00 	cmp.w	r9, #0
 8009b50:	f040 80a6 	bne.w	8009ca0 <__kernel_rem_pio2+0x690>
 8009b54:	9b04      	ldr	r3, [sp, #16]
 8009b56:	e9c3 7800 	strd	r7, r8, [r3]
 8009b5a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009b5e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009b62:	e7c6      	b.n	8009af2 <__kernel_rem_pio2+0x4e2>
 8009b64:	9d05      	ldr	r5, [sp, #20]
 8009b66:	ab48      	add	r3, sp, #288	@ 0x120
 8009b68:	441d      	add	r5, r3
 8009b6a:	4644      	mov	r4, r8
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	2100      	movs	r1, #0
 8009b70:	2c00      	cmp	r4, #0
 8009b72:	da35      	bge.n	8009be0 <__kernel_rem_pio2+0x5d0>
 8009b74:	f1b9 0f00 	cmp.w	r9, #0
 8009b78:	d038      	beq.n	8009bec <__kernel_rem_pio2+0x5dc>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b80:	9c04      	ldr	r4, [sp, #16]
 8009b82:	e9c4 2300 	strd	r2, r3, [r4]
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009b8e:	f7f6 fb1f 	bl	80001d0 <__aeabi_dsub>
 8009b92:	ad4a      	add	r5, sp, #296	@ 0x128
 8009b94:	2401      	movs	r4, #1
 8009b96:	45a0      	cmp	r8, r4
 8009b98:	da2b      	bge.n	8009bf2 <__kernel_rem_pio2+0x5e2>
 8009b9a:	f1b9 0f00 	cmp.w	r9, #0
 8009b9e:	d002      	beq.n	8009ba6 <__kernel_rem_pio2+0x596>
 8009ba0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	9b04      	ldr	r3, [sp, #16]
 8009ba8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009bac:	e7a1      	b.n	8009af2 <__kernel_rem_pio2+0x4e2>
 8009bae:	9c05      	ldr	r4, [sp, #20]
 8009bb0:	ab48      	add	r3, sp, #288	@ 0x120
 8009bb2:	441c      	add	r4, r3
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	f1b8 0f00 	cmp.w	r8, #0
 8009bbc:	da09      	bge.n	8009bd2 <__kernel_rem_pio2+0x5c2>
 8009bbe:	f1b9 0f00 	cmp.w	r9, #0
 8009bc2:	d002      	beq.n	8009bca <__kernel_rem_pio2+0x5ba>
 8009bc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009bc8:	4619      	mov	r1, r3
 8009bca:	9b04      	ldr	r3, [sp, #16]
 8009bcc:	e9c3 0100 	strd	r0, r1, [r3]
 8009bd0:	e78f      	b.n	8009af2 <__kernel_rem_pio2+0x4e2>
 8009bd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009bd6:	f7f6 fafd 	bl	80001d4 <__adddf3>
 8009bda:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bde:	e7eb      	b.n	8009bb8 <__kernel_rem_pio2+0x5a8>
 8009be0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009be4:	f7f6 faf6 	bl	80001d4 <__adddf3>
 8009be8:	3c01      	subs	r4, #1
 8009bea:	e7c1      	b.n	8009b70 <__kernel_rem_pio2+0x560>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	e7c6      	b.n	8009b80 <__kernel_rem_pio2+0x570>
 8009bf2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009bf6:	f7f6 faed 	bl	80001d4 <__adddf3>
 8009bfa:	3401      	adds	r4, #1
 8009bfc:	e7cb      	b.n	8009b96 <__kernel_rem_pio2+0x586>
 8009bfe:	ed95 7b00 	vldr	d7, [r5]
 8009c02:	ed8d 7b00 	vstr	d7, [sp]
 8009c06:	ed95 7b02 	vldr	d7, [r5, #8]
 8009c0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c0e:	ec53 2b17 	vmov	r2, r3, d7
 8009c12:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c16:	f7f6 fadd 	bl	80001d4 <__adddf3>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4606      	mov	r6, r0
 8009c20:	460f      	mov	r7, r1
 8009c22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c26:	f7f6 fad3 	bl	80001d0 <__aeabi_dsub>
 8009c2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c2e:	f7f6 fad1 	bl	80001d4 <__adddf3>
 8009c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c36:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009c3a:	e9c5 6700 	strd	r6, r7, [r5]
 8009c3e:	e76d      	b.n	8009b1c <__kernel_rem_pio2+0x50c>
 8009c40:	ed94 7b00 	vldr	d7, [r4]
 8009c44:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009c48:	ec51 0b17 	vmov	r0, r1, d7
 8009c4c:	4652      	mov	r2, sl
 8009c4e:	465b      	mov	r3, fp
 8009c50:	ed8d 7b00 	vstr	d7, [sp]
 8009c54:	f7f6 fabe 	bl	80001d4 <__adddf3>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	460f      	mov	r7, r1
 8009c60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c64:	f7f6 fab4 	bl	80001d0 <__aeabi_dsub>
 8009c68:	4652      	mov	r2, sl
 8009c6a:	465b      	mov	r3, fp
 8009c6c:	f7f6 fab2 	bl	80001d4 <__adddf3>
 8009c70:	3d01      	subs	r5, #1
 8009c72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c76:	e9c4 6700 	strd	r6, r7, [r4]
 8009c7a:	e755      	b.n	8009b28 <__kernel_rem_pio2+0x518>
 8009c7c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009c80:	f7f6 faa8 	bl	80001d4 <__adddf3>
 8009c84:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c88:	e758      	b.n	8009b3c <__kernel_rem_pio2+0x52c>
 8009c8a:	bf00      	nop
 8009c8c:	f3af 8000 	nop.w
	...
 8009c98:	41700000 	.word	0x41700000
 8009c9c:	3e700000 	.word	0x3e700000
 8009ca0:	9b04      	ldr	r3, [sp, #16]
 8009ca2:	9a04      	ldr	r2, [sp, #16]
 8009ca4:	601f      	str	r7, [r3, #0]
 8009ca6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8009caa:	605c      	str	r4, [r3, #4]
 8009cac:	609d      	str	r5, [r3, #8]
 8009cae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009cb2:	60d3      	str	r3, [r2, #12]
 8009cb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cb8:	6110      	str	r0, [r2, #16]
 8009cba:	6153      	str	r3, [r2, #20]
 8009cbc:	e719      	b.n	8009af2 <__kernel_rem_pio2+0x4e2>
 8009cbe:	bf00      	nop

08009cc0 <scalbn>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	ec55 4b10 	vmov	r4, r5, d0
 8009cc6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009cca:	4606      	mov	r6, r0
 8009ccc:	462b      	mov	r3, r5
 8009cce:	b991      	cbnz	r1, 8009cf6 <scalbn+0x36>
 8009cd0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009cd4:	4323      	orrs	r3, r4
 8009cd6:	d03d      	beq.n	8009d54 <scalbn+0x94>
 8009cd8:	4b35      	ldr	r3, [pc, #212]	@ (8009db0 <scalbn+0xf0>)
 8009cda:	4620      	mov	r0, r4
 8009cdc:	4629      	mov	r1, r5
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f7f6 fc2e 	bl	8000540 <__aeabi_dmul>
 8009ce4:	4b33      	ldr	r3, [pc, #204]	@ (8009db4 <scalbn+0xf4>)
 8009ce6:	429e      	cmp	r6, r3
 8009ce8:	4604      	mov	r4, r0
 8009cea:	460d      	mov	r5, r1
 8009cec:	da0f      	bge.n	8009d0e <scalbn+0x4e>
 8009cee:	a328      	add	r3, pc, #160	@ (adr r3, 8009d90 <scalbn+0xd0>)
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	e01e      	b.n	8009d34 <scalbn+0x74>
 8009cf6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009cfa:	4291      	cmp	r1, r2
 8009cfc:	d10b      	bne.n	8009d16 <scalbn+0x56>
 8009cfe:	4622      	mov	r2, r4
 8009d00:	4620      	mov	r0, r4
 8009d02:	4629      	mov	r1, r5
 8009d04:	f7f6 fa66 	bl	80001d4 <__adddf3>
 8009d08:	4604      	mov	r4, r0
 8009d0a:	460d      	mov	r5, r1
 8009d0c:	e022      	b.n	8009d54 <scalbn+0x94>
 8009d0e:	460b      	mov	r3, r1
 8009d10:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009d14:	3936      	subs	r1, #54	@ 0x36
 8009d16:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009d1a:	4296      	cmp	r6, r2
 8009d1c:	dd0d      	ble.n	8009d3a <scalbn+0x7a>
 8009d1e:	2d00      	cmp	r5, #0
 8009d20:	a11d      	add	r1, pc, #116	@ (adr r1, 8009d98 <scalbn+0xd8>)
 8009d22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d26:	da02      	bge.n	8009d2e <scalbn+0x6e>
 8009d28:	a11d      	add	r1, pc, #116	@ (adr r1, 8009da0 <scalbn+0xe0>)
 8009d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d2e:	a31a      	add	r3, pc, #104	@ (adr r3, 8009d98 <scalbn+0xd8>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 fc04 	bl	8000540 <__aeabi_dmul>
 8009d38:	e7e6      	b.n	8009d08 <scalbn+0x48>
 8009d3a:	1872      	adds	r2, r6, r1
 8009d3c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009d40:	428a      	cmp	r2, r1
 8009d42:	dcec      	bgt.n	8009d1e <scalbn+0x5e>
 8009d44:	2a00      	cmp	r2, #0
 8009d46:	dd08      	ble.n	8009d5a <scalbn+0x9a>
 8009d48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009d4c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009d50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009d54:	ec45 4b10 	vmov	d0, r4, r5
 8009d58:	bd70      	pop	{r4, r5, r6, pc}
 8009d5a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009d5e:	da08      	bge.n	8009d72 <scalbn+0xb2>
 8009d60:	2d00      	cmp	r5, #0
 8009d62:	a10b      	add	r1, pc, #44	@ (adr r1, 8009d90 <scalbn+0xd0>)
 8009d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d68:	dac1      	bge.n	8009cee <scalbn+0x2e>
 8009d6a:	a10f      	add	r1, pc, #60	@ (adr r1, 8009da8 <scalbn+0xe8>)
 8009d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d70:	e7bd      	b.n	8009cee <scalbn+0x2e>
 8009d72:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009d76:	3236      	adds	r2, #54	@ 0x36
 8009d78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009d7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009d80:	4620      	mov	r0, r4
 8009d82:	4b0d      	ldr	r3, [pc, #52]	@ (8009db8 <scalbn+0xf8>)
 8009d84:	4629      	mov	r1, r5
 8009d86:	2200      	movs	r2, #0
 8009d88:	e7d4      	b.n	8009d34 <scalbn+0x74>
 8009d8a:	bf00      	nop
 8009d8c:	f3af 8000 	nop.w
 8009d90:	c2f8f359 	.word	0xc2f8f359
 8009d94:	01a56e1f 	.word	0x01a56e1f
 8009d98:	8800759c 	.word	0x8800759c
 8009d9c:	7e37e43c 	.word	0x7e37e43c
 8009da0:	8800759c 	.word	0x8800759c
 8009da4:	fe37e43c 	.word	0xfe37e43c
 8009da8:	c2f8f359 	.word	0xc2f8f359
 8009dac:	81a56e1f 	.word	0x81a56e1f
 8009db0:	43500000 	.word	0x43500000
 8009db4:	ffff3cb0 	.word	0xffff3cb0
 8009db8:	3c900000 	.word	0x3c900000
 8009dbc:	00000000 	.word	0x00000000

08009dc0 <floor>:
 8009dc0:	ec51 0b10 	vmov	r0, r1, d0
 8009dc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dcc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009dd0:	2e13      	cmp	r6, #19
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	4680      	mov	r8, r0
 8009dd8:	dc34      	bgt.n	8009e44 <floor+0x84>
 8009dda:	2e00      	cmp	r6, #0
 8009ddc:	da17      	bge.n	8009e0e <floor+0x4e>
 8009dde:	a332      	add	r3, pc, #200	@ (adr r3, 8009ea8 <floor+0xe8>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	f7f6 f9f6 	bl	80001d4 <__adddf3>
 8009de8:	2200      	movs	r2, #0
 8009dea:	2300      	movs	r3, #0
 8009dec:	f7f6 fe38 	bl	8000a60 <__aeabi_dcmpgt>
 8009df0:	b150      	cbz	r0, 8009e08 <floor+0x48>
 8009df2:	2c00      	cmp	r4, #0
 8009df4:	da55      	bge.n	8009ea2 <floor+0xe2>
 8009df6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009dfa:	432c      	orrs	r4, r5
 8009dfc:	2500      	movs	r5, #0
 8009dfe:	42ac      	cmp	r4, r5
 8009e00:	4c2b      	ldr	r4, [pc, #172]	@ (8009eb0 <floor+0xf0>)
 8009e02:	bf08      	it	eq
 8009e04:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009e08:	4621      	mov	r1, r4
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	e023      	b.n	8009e56 <floor+0x96>
 8009e0e:	4f29      	ldr	r7, [pc, #164]	@ (8009eb4 <floor+0xf4>)
 8009e10:	4137      	asrs	r7, r6
 8009e12:	ea01 0307 	and.w	r3, r1, r7
 8009e16:	4303      	orrs	r3, r0
 8009e18:	d01d      	beq.n	8009e56 <floor+0x96>
 8009e1a:	a323      	add	r3, pc, #140	@ (adr r3, 8009ea8 <floor+0xe8>)
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	f7f6 f9d8 	bl	80001d4 <__adddf3>
 8009e24:	2200      	movs	r2, #0
 8009e26:	2300      	movs	r3, #0
 8009e28:	f7f6 fe1a 	bl	8000a60 <__aeabi_dcmpgt>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	d0eb      	beq.n	8009e08 <floor+0x48>
 8009e30:	2c00      	cmp	r4, #0
 8009e32:	bfbe      	ittt	lt
 8009e34:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009e38:	4133      	asrlt	r3, r6
 8009e3a:	18e4      	addlt	r4, r4, r3
 8009e3c:	ea24 0407 	bic.w	r4, r4, r7
 8009e40:	2500      	movs	r5, #0
 8009e42:	e7e1      	b.n	8009e08 <floor+0x48>
 8009e44:	2e33      	cmp	r6, #51	@ 0x33
 8009e46:	dd0a      	ble.n	8009e5e <floor+0x9e>
 8009e48:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009e4c:	d103      	bne.n	8009e56 <floor+0x96>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	f7f6 f9bf 	bl	80001d4 <__adddf3>
 8009e56:	ec41 0b10 	vmov	d0, r0, r1
 8009e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e5e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8009e62:	f04f 37ff 	mov.w	r7, #4294967295
 8009e66:	40df      	lsrs	r7, r3
 8009e68:	4207      	tst	r7, r0
 8009e6a:	d0f4      	beq.n	8009e56 <floor+0x96>
 8009e6c:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ea8 <floor+0xe8>)
 8009e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e72:	f7f6 f9af 	bl	80001d4 <__adddf3>
 8009e76:	2200      	movs	r2, #0
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f7f6 fdf1 	bl	8000a60 <__aeabi_dcmpgt>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d0c2      	beq.n	8009e08 <floor+0x48>
 8009e82:	2c00      	cmp	r4, #0
 8009e84:	da0a      	bge.n	8009e9c <floor+0xdc>
 8009e86:	2e14      	cmp	r6, #20
 8009e88:	d101      	bne.n	8009e8e <floor+0xce>
 8009e8a:	3401      	adds	r4, #1
 8009e8c:	e006      	b.n	8009e9c <floor+0xdc>
 8009e8e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009e92:	2301      	movs	r3, #1
 8009e94:	40b3      	lsls	r3, r6
 8009e96:	441d      	add	r5, r3
 8009e98:	4545      	cmp	r5, r8
 8009e9a:	d3f6      	bcc.n	8009e8a <floor+0xca>
 8009e9c:	ea25 0507 	bic.w	r5, r5, r7
 8009ea0:	e7b2      	b.n	8009e08 <floor+0x48>
 8009ea2:	2500      	movs	r5, #0
 8009ea4:	462c      	mov	r4, r5
 8009ea6:	e7af      	b.n	8009e08 <floor+0x48>
 8009ea8:	8800759c 	.word	0x8800759c
 8009eac:	7e37e43c 	.word	0x7e37e43c
 8009eb0:	bff00000 	.word	0xbff00000
 8009eb4:	000fffff 	.word	0x000fffff

08009eb8 <_init>:
 8009eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eba:	bf00      	nop
 8009ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ebe:	bc08      	pop	{r3}
 8009ec0:	469e      	mov	lr, r3
 8009ec2:	4770      	bx	lr

08009ec4 <_fini>:
 8009ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec6:	bf00      	nop
 8009ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eca:	bc08      	pop	{r3}
 8009ecc:	469e      	mov	lr, r3
 8009ece:	4770      	bx	lr
